// Code generated by MockGen. DO NOT EDIT.
// Source: ./content-reward-item-price.go
//
// Generated by this command:
//
//	mockgen -source=./content-reward-item-price.go -package=loadb -self_package=github.com/KubrickCode/loa-work/src/go/libs/loadb
//

// Package loadb is a generated GoMock package.
package loadb

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockContentRewardItemPriceDB is a mock of ContentRewardItemPriceDB interface.
type MockContentRewardItemPriceDB struct {
	ctrl     *gomock.Controller
	recorder *MockContentRewardItemPriceDBMockRecorder
	isgomock struct{}
}

// MockContentRewardItemPriceDBMockRecorder is the mock recorder for MockContentRewardItemPriceDB.
type MockContentRewardItemPriceDBMockRecorder struct {
	mock *MockContentRewardItemPriceDB
}

// NewMockContentRewardItemPriceDB creates a new mock instance.
func NewMockContentRewardItemPriceDB(ctrl *gomock.Controller) *MockContentRewardItemPriceDB {
	mock := &MockContentRewardItemPriceDB{ctrl: ctrl}
	mock.recorder = &MockContentRewardItemPriceDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContentRewardItemPriceDB) EXPECT() *MockContentRewardItemPriceDBMockRecorder {
	return m.recorder
}

// CreateMany mocks base method.
func (m *MockContentRewardItemPriceDB) CreateMany(items []ContentRewardItemPrice) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMany", items)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMany indicates an expected call of CreateMany.
func (mr *MockContentRewardItemPriceDBMockRecorder) CreateMany(items any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMany", reflect.TypeOf((*MockContentRewardItemPriceDB)(nil).CreateMany), items)
}
