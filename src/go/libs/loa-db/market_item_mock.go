// Code generated by MockGen. DO NOT EDIT.
// Source: market_item.go
//
// Generated by this command:
//
//	mockgen -source=market_item.go -package=loadb -self_package=github.com/KubrickCode/loa-work/src/go/libs/loadb
//

// Package loadb is a generated GoMock package.
package loadb

import (
	reflect "reflect"

	models "github.com/KubrickCode/loa-work/src/go/libs/loadb/models"
	gomock "go.uber.org/mock/gomock"
)

// MockMarketItemRepository is a mock of MarketItemRepository interface.
type MockMarketItemRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMarketItemRepositoryMockRecorder
	isgomock struct{}
}

// MockMarketItemRepositoryMockRecorder is the mock recorder for MockMarketItemRepository.
type MockMarketItemRepositoryMockRecorder struct {
	mock *MockMarketItemRepository
}

// NewMockMarketItemRepository creates a new mock instance.
func NewMockMarketItemRepository(ctrl *gomock.Controller) *MockMarketItemRepository {
	mock := &MockMarketItemRepository{ctrl: ctrl}
	mock.recorder = &MockMarketItemRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMarketItemRepository) EXPECT() *MockMarketItemRepositoryMockRecorder {
	return m.recorder
}

// FindAll mocks base method.
func (m *MockMarketItemRepository) FindAll() ([]*models.MarketItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]*models.MarketItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockMarketItemRepositoryMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockMarketItemRepository)(nil).FindAll))
}

// FindByName mocks base method.
func (m *MockMarketItemRepository) FindByName(name string) (*models.MarketItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByName", name)
	ret0, _ := ret[0].(*models.MarketItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByName indicates an expected call of FindByName.
func (mr *MockMarketItemRepositoryMockRecorder) FindByName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByName", reflect.TypeOf((*MockMarketItemRepository)(nil).FindByName), name)
}

// FindStatScraperEnabledAll mocks base method.
func (m *MockMarketItemRepository) FindStatScraperEnabledAll() ([]*models.MarketItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindStatScraperEnabledAll")
	ret0, _ := ret[0].([]*models.MarketItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindStatScraperEnabledAll indicates an expected call of FindStatScraperEnabledAll.
func (mr *MockMarketItemRepositoryMockRecorder) FindStatScraperEnabledAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindStatScraperEnabledAll", reflect.TypeOf((*MockMarketItemRepository)(nil).FindStatScraperEnabledAll))
}

// UpdateStat mocks base method.
func (m *MockMarketItemRepository) UpdateStat(item *models.MarketItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStat", item)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStat indicates an expected call of UpdateStat.
func (mr *MockMarketItemRepositoryMockRecorder) UpdateStat(item any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStat", reflect.TypeOf((*MockMarketItemRepository)(nil).UpdateStat), item)
}

// UpsertMany mocks base method.
func (m *MockMarketItemRepository) UpsertMany(items []*models.MarketItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertMany", items)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertMany indicates an expected call of UpsertMany.
func (mr *MockMarketItemRepositoryMockRecorder) UpsertMany(items any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertMany", reflect.TypeOf((*MockMarketItemRepository)(nil).UpsertMany), items)
}
