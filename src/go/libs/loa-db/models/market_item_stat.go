// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/sqlboiler/v4/types"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// MarketItemStat is an object representing the database table.
type MarketItemStat struct {
	ID              int           `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt       time.Time     `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	CurrentMinPrice int           `boil:"current_min_price" json:"current_min_price" toml:"current_min_price" yaml:"current_min_price"`
	RecentPrice     int           `boil:"recent_price" json:"recent_price" toml:"recent_price" yaml:"recent_price"`
	YDayAvgPrice    types.Decimal `boil:"y_day_avg_price" json:"y_day_avg_price" toml:"y_day_avg_price" yaml:"y_day_avg_price"`
	MarketItemID    int           `boil:"market_item_id" json:"market_item_id" toml:"market_item_id" yaml:"market_item_id"`

	R *marketItemStatR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L marketItemStatL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MarketItemStatColumns = struct {
	ID              string
	CreatedAt       string
	CurrentMinPrice string
	RecentPrice     string
	YDayAvgPrice    string
	MarketItemID    string
}{
	ID:              "id",
	CreatedAt:       "created_at",
	CurrentMinPrice: "current_min_price",
	RecentPrice:     "recent_price",
	YDayAvgPrice:    "y_day_avg_price",
	MarketItemID:    "market_item_id",
}

var MarketItemStatTableColumns = struct {
	ID              string
	CreatedAt       string
	CurrentMinPrice string
	RecentPrice     string
	YDayAvgPrice    string
	MarketItemID    string
}{
	ID:              "market_item_stat.id",
	CreatedAt:       "market_item_stat.created_at",
	CurrentMinPrice: "market_item_stat.current_min_price",
	RecentPrice:     "market_item_stat.recent_price",
	YDayAvgPrice:    "market_item_stat.y_day_avg_price",
	MarketItemID:    "market_item_stat.market_item_id",
}

// Generated where

var MarketItemStatWhere = struct {
	ID              whereHelperint
	CreatedAt       whereHelpertime_Time
	CurrentMinPrice whereHelperint
	RecentPrice     whereHelperint
	YDayAvgPrice    whereHelpertypes_Decimal
	MarketItemID    whereHelperint
}{
	ID:              whereHelperint{field: "\"market_item_stat\".\"id\""},
	CreatedAt:       whereHelpertime_Time{field: "\"market_item_stat\".\"created_at\""},
	CurrentMinPrice: whereHelperint{field: "\"market_item_stat\".\"current_min_price\""},
	RecentPrice:     whereHelperint{field: "\"market_item_stat\".\"recent_price\""},
	YDayAvgPrice:    whereHelpertypes_Decimal{field: "\"market_item_stat\".\"y_day_avg_price\""},
	MarketItemID:    whereHelperint{field: "\"market_item_stat\".\"market_item_id\""},
}

// MarketItemStatRels is where relationship names are stored.
var MarketItemStatRels = struct {
	MarketItem string
}{
	MarketItem: "MarketItem",
}

// marketItemStatR is where relationships are stored.
type marketItemStatR struct {
	MarketItem *MarketItem `boil:"MarketItem" json:"MarketItem" toml:"MarketItem" yaml:"MarketItem"`
}

// NewStruct creates a new relationship struct
func (*marketItemStatR) NewStruct() *marketItemStatR {
	return &marketItemStatR{}
}

func (o *MarketItemStat) GetMarketItem() *MarketItem {
	if o == nil {
		return nil
	}

	return o.R.GetMarketItem()
}

func (r *marketItemStatR) GetMarketItem() *MarketItem {
	if r == nil {
		return nil
	}

	return r.MarketItem
}

// marketItemStatL is where Load methods for each relationship are stored.
type marketItemStatL struct{}

var (
	marketItemStatAllColumns            = []string{"id", "created_at", "current_min_price", "recent_price", "y_day_avg_price", "market_item_id"}
	marketItemStatColumnsWithoutDefault = []string{"current_min_price", "recent_price", "y_day_avg_price", "market_item_id"}
	marketItemStatColumnsWithDefault    = []string{"id", "created_at"}
	marketItemStatPrimaryKeyColumns     = []string{"id"}
	marketItemStatGeneratedColumns      = []string{}
)

type (
	// MarketItemStatSlice is an alias for a slice of pointers to MarketItemStat.
	// This should almost always be used instead of []MarketItemStat.
	MarketItemStatSlice []*MarketItemStat
	// MarketItemStatHook is the signature for custom MarketItemStat hook methods
	MarketItemStatHook func(context.Context, boil.ContextExecutor, *MarketItemStat) error

	marketItemStatQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	marketItemStatType                 = reflect.TypeOf(&MarketItemStat{})
	marketItemStatMapping              = queries.MakeStructMapping(marketItemStatType)
	marketItemStatPrimaryKeyMapping, _ = queries.BindMapping(marketItemStatType, marketItemStatMapping, marketItemStatPrimaryKeyColumns)
	marketItemStatInsertCacheMut       sync.RWMutex
	marketItemStatInsertCache          = make(map[string]insertCache)
	marketItemStatUpdateCacheMut       sync.RWMutex
	marketItemStatUpdateCache          = make(map[string]updateCache)
	marketItemStatUpsertCacheMut       sync.RWMutex
	marketItemStatUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var marketItemStatAfterSelectMu sync.Mutex
var marketItemStatAfterSelectHooks []MarketItemStatHook

var marketItemStatBeforeInsertMu sync.Mutex
var marketItemStatBeforeInsertHooks []MarketItemStatHook
var marketItemStatAfterInsertMu sync.Mutex
var marketItemStatAfterInsertHooks []MarketItemStatHook

var marketItemStatBeforeUpdateMu sync.Mutex
var marketItemStatBeforeUpdateHooks []MarketItemStatHook
var marketItemStatAfterUpdateMu sync.Mutex
var marketItemStatAfterUpdateHooks []MarketItemStatHook

var marketItemStatBeforeDeleteMu sync.Mutex
var marketItemStatBeforeDeleteHooks []MarketItemStatHook
var marketItemStatAfterDeleteMu sync.Mutex
var marketItemStatAfterDeleteHooks []MarketItemStatHook

var marketItemStatBeforeUpsertMu sync.Mutex
var marketItemStatBeforeUpsertHooks []MarketItemStatHook
var marketItemStatAfterUpsertMu sync.Mutex
var marketItemStatAfterUpsertHooks []MarketItemStatHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MarketItemStat) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range marketItemStatAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MarketItemStat) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range marketItemStatBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MarketItemStat) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range marketItemStatAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MarketItemStat) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range marketItemStatBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MarketItemStat) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range marketItemStatAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MarketItemStat) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range marketItemStatBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MarketItemStat) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range marketItemStatAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MarketItemStat) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range marketItemStatBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MarketItemStat) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range marketItemStatAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMarketItemStatHook registers your hook function for all future operations.
func AddMarketItemStatHook(hookPoint boil.HookPoint, marketItemStatHook MarketItemStatHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		marketItemStatAfterSelectMu.Lock()
		marketItemStatAfterSelectHooks = append(marketItemStatAfterSelectHooks, marketItemStatHook)
		marketItemStatAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		marketItemStatBeforeInsertMu.Lock()
		marketItemStatBeforeInsertHooks = append(marketItemStatBeforeInsertHooks, marketItemStatHook)
		marketItemStatBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		marketItemStatAfterInsertMu.Lock()
		marketItemStatAfterInsertHooks = append(marketItemStatAfterInsertHooks, marketItemStatHook)
		marketItemStatAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		marketItemStatBeforeUpdateMu.Lock()
		marketItemStatBeforeUpdateHooks = append(marketItemStatBeforeUpdateHooks, marketItemStatHook)
		marketItemStatBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		marketItemStatAfterUpdateMu.Lock()
		marketItemStatAfterUpdateHooks = append(marketItemStatAfterUpdateHooks, marketItemStatHook)
		marketItemStatAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		marketItemStatBeforeDeleteMu.Lock()
		marketItemStatBeforeDeleteHooks = append(marketItemStatBeforeDeleteHooks, marketItemStatHook)
		marketItemStatBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		marketItemStatAfterDeleteMu.Lock()
		marketItemStatAfterDeleteHooks = append(marketItemStatAfterDeleteHooks, marketItemStatHook)
		marketItemStatAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		marketItemStatBeforeUpsertMu.Lock()
		marketItemStatBeforeUpsertHooks = append(marketItemStatBeforeUpsertHooks, marketItemStatHook)
		marketItemStatBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		marketItemStatAfterUpsertMu.Lock()
		marketItemStatAfterUpsertHooks = append(marketItemStatAfterUpsertHooks, marketItemStatHook)
		marketItemStatAfterUpsertMu.Unlock()
	}
}

// OneG returns a single marketItemStat record from the query using the global executor.
func (q marketItemStatQuery) OneG(ctx context.Context) (*MarketItemStat, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single marketItemStat record from the query.
func (q marketItemStatQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MarketItemStat, error) {
	o := &MarketItemStat{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for market_item_stat")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all MarketItemStat records from the query using the global executor.
func (q marketItemStatQuery) AllG(ctx context.Context) (MarketItemStatSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all MarketItemStat records from the query.
func (q marketItemStatQuery) All(ctx context.Context, exec boil.ContextExecutor) (MarketItemStatSlice, error) {
	var o []*MarketItemStat

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to MarketItemStat slice")
	}

	if len(marketItemStatAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all MarketItemStat records in the query using the global executor
func (q marketItemStatQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all MarketItemStat records in the query.
func (q marketItemStatQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count market_item_stat rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q marketItemStatQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q marketItemStatQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if market_item_stat exists")
	}

	return count > 0, nil
}

// MarketItem pointed to by the foreign key.
func (o *MarketItemStat) MarketItem(mods ...qm.QueryMod) marketItemQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MarketItemID),
	}

	queryMods = append(queryMods, mods...)

	return MarketItems(queryMods...)
}

// LoadMarketItem allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (marketItemStatL) LoadMarketItem(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMarketItemStat interface{}, mods queries.Applicator) error {
	var slice []*MarketItemStat
	var object *MarketItemStat

	if singular {
		var ok bool
		object, ok = maybeMarketItemStat.(*MarketItemStat)
		if !ok {
			object = new(MarketItemStat)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMarketItemStat)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMarketItemStat))
			}
		}
	} else {
		s, ok := maybeMarketItemStat.(*[]*MarketItemStat)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMarketItemStat)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMarketItemStat))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &marketItemStatR{}
		}
		args[object.MarketItemID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &marketItemStatR{}
			}

			args[obj.MarketItemID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`market_item`),
		qm.WhereIn(`market_item.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MarketItem")
	}

	var resultSlice []*MarketItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MarketItem")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for market_item")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for market_item")
	}

	if len(marketItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MarketItem = foreign
		if foreign.R == nil {
			foreign.R = &marketItemR{}
		}
		foreign.R.MarketItemStats = append(foreign.R.MarketItemStats, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MarketItemID == foreign.ID {
				local.R.MarketItem = foreign
				if foreign.R == nil {
					foreign.R = &marketItemR{}
				}
				foreign.R.MarketItemStats = append(foreign.R.MarketItemStats, local)
				break
			}
		}
	}

	return nil
}

// SetMarketItemG of the marketItemStat to the related item.
// Sets o.R.MarketItem to related.
// Adds o to related.R.MarketItemStats.
// Uses the global database handle.
func (o *MarketItemStat) SetMarketItemG(ctx context.Context, insert bool, related *MarketItem) error {
	return o.SetMarketItem(ctx, boil.GetContextDB(), insert, related)
}

// SetMarketItem of the marketItemStat to the related item.
// Sets o.R.MarketItem to related.
// Adds o to related.R.MarketItemStats.
func (o *MarketItemStat) SetMarketItem(ctx context.Context, exec boil.ContextExecutor, insert bool, related *MarketItem) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"market_item_stat\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"market_item_id"}),
		strmangle.WhereClause("\"", "\"", 2, marketItemStatPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MarketItemID = related.ID
	if o.R == nil {
		o.R = &marketItemStatR{
			MarketItem: related,
		}
	} else {
		o.R.MarketItem = related
	}

	if related.R == nil {
		related.R = &marketItemR{
			MarketItemStats: MarketItemStatSlice{o},
		}
	} else {
		related.R.MarketItemStats = append(related.R.MarketItemStats, o)
	}

	return nil
}

// MarketItemStats retrieves all the records using an executor.
func MarketItemStats(mods ...qm.QueryMod) marketItemStatQuery {
	mods = append(mods, qm.From("\"market_item_stat\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"market_item_stat\".*"})
	}

	return marketItemStatQuery{q}
}

// FindMarketItemStatG retrieves a single record by ID.
func FindMarketItemStatG(ctx context.Context, iD int, selectCols ...string) (*MarketItemStat, error) {
	return FindMarketItemStat(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindMarketItemStat retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMarketItemStat(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*MarketItemStat, error) {
	marketItemStatObj := &MarketItemStat{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"market_item_stat\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, marketItemStatObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from market_item_stat")
	}

	if err = marketItemStatObj.doAfterSelectHooks(ctx, exec); err != nil {
		return marketItemStatObj, err
	}

	return marketItemStatObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *MarketItemStat) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MarketItemStat) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no market_item_stat provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(marketItemStatColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	marketItemStatInsertCacheMut.RLock()
	cache, cached := marketItemStatInsertCache[key]
	marketItemStatInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			marketItemStatAllColumns,
			marketItemStatColumnsWithDefault,
			marketItemStatColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(marketItemStatType, marketItemStatMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(marketItemStatType, marketItemStatMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"market_item_stat\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"market_item_stat\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into market_item_stat")
	}

	if !cached {
		marketItemStatInsertCacheMut.Lock()
		marketItemStatInsertCache[key] = cache
		marketItemStatInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single MarketItemStat record using the global executor.
// See Update for more documentation.
func (o *MarketItemStat) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the MarketItemStat.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MarketItemStat) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	marketItemStatUpdateCacheMut.RLock()
	cache, cached := marketItemStatUpdateCache[key]
	marketItemStatUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			marketItemStatAllColumns,
			marketItemStatPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update market_item_stat, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"market_item_stat\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, marketItemStatPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(marketItemStatType, marketItemStatMapping, append(wl, marketItemStatPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update market_item_stat row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for market_item_stat")
	}

	if !cached {
		marketItemStatUpdateCacheMut.Lock()
		marketItemStatUpdateCache[key] = cache
		marketItemStatUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q marketItemStatQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q marketItemStatQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for market_item_stat")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for market_item_stat")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o MarketItemStatSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MarketItemStatSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), marketItemStatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"market_item_stat\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, marketItemStatPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in marketItemStat slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all marketItemStat")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *MarketItemStat) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MarketItemStat) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no market_item_stat provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(marketItemStatColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	marketItemStatUpsertCacheMut.RLock()
	cache, cached := marketItemStatUpsertCache[key]
	marketItemStatUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			marketItemStatAllColumns,
			marketItemStatColumnsWithDefault,
			marketItemStatColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			marketItemStatAllColumns,
			marketItemStatPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert market_item_stat, could not build update column list")
		}

		ret := strmangle.SetComplement(marketItemStatAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(marketItemStatPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert market_item_stat, could not build conflict column list")
			}

			conflict = make([]string, len(marketItemStatPrimaryKeyColumns))
			copy(conflict, marketItemStatPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"market_item_stat\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(marketItemStatType, marketItemStatMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(marketItemStatType, marketItemStatMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert market_item_stat")
	}

	if !cached {
		marketItemStatUpsertCacheMut.Lock()
		marketItemStatUpsertCache[key] = cache
		marketItemStatUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single MarketItemStat record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *MarketItemStat) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single MarketItemStat record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MarketItemStat) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MarketItemStat provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), marketItemStatPrimaryKeyMapping)
	sql := "DELETE FROM \"market_item_stat\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from market_item_stat")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for market_item_stat")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q marketItemStatQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q marketItemStatQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no marketItemStatQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from market_item_stat")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for market_item_stat")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o MarketItemStatSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MarketItemStatSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(marketItemStatBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), marketItemStatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"market_item_stat\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, marketItemStatPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from marketItemStat slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for market_item_stat")
	}

	if len(marketItemStatAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *MarketItemStat) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no MarketItemStat provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MarketItemStat) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMarketItemStat(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MarketItemStatSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty MarketItemStatSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MarketItemStatSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MarketItemStatSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), marketItemStatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"market_item_stat\".* FROM \"market_item_stat\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, marketItemStatPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MarketItemStatSlice")
	}

	*o = slice

	return nil
}

// MarketItemStatExistsG checks if the MarketItemStat row exists.
func MarketItemStatExistsG(ctx context.Context, iD int) (bool, error) {
	return MarketItemStatExists(ctx, boil.GetContextDB(), iD)
}

// MarketItemStatExists checks if the MarketItemStat row exists.
func MarketItemStatExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"market_item_stat\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if market_item_stat exists")
	}

	return exists, nil
}

// Exists checks if the MarketItemStat row exists.
func (o *MarketItemStat) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return MarketItemStatExists(ctx, exec, o.ID)
}
