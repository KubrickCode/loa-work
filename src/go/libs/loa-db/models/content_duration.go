// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// ContentDuration is an object representing the database table.
type ContentDuration struct {
	ID        int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	ContentID int       `boil:"content_id" json:"content_id" toml:"content_id" yaml:"content_id"`
	Value     int       `boil:"value" json:"value" toml:"value" yaml:"value"`

	R *contentDurationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L contentDurationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ContentDurationColumns = struct {
	ID        string
	CreatedAt string
	UpdatedAt string
	ContentID string
	Value     string
}{
	ID:        "id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	ContentID: "content_id",
	Value:     "value",
}

var ContentDurationTableColumns = struct {
	ID        string
	CreatedAt string
	UpdatedAt string
	ContentID string
	Value     string
}{
	ID:        "content_duration.id",
	CreatedAt: "content_duration.created_at",
	UpdatedAt: "content_duration.updated_at",
	ContentID: "content_duration.content_id",
	Value:     "content_duration.value",
}

// Generated where

var ContentDurationWhere = struct {
	ID        whereHelperint
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
	ContentID whereHelperint
	Value     whereHelperint
}{
	ID:        whereHelperint{field: "\"content_duration\".\"id\""},
	CreatedAt: whereHelpertime_Time{field: "\"content_duration\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"content_duration\".\"updated_at\""},
	ContentID: whereHelperint{field: "\"content_duration\".\"content_id\""},
	Value:     whereHelperint{field: "\"content_duration\".\"value\""},
}

// ContentDurationRels is where relationship names are stored.
var ContentDurationRels = struct {
	Content string
}{
	Content: "Content",
}

// contentDurationR is where relationships are stored.
type contentDurationR struct {
	Content *Content `boil:"Content" json:"Content" toml:"Content" yaml:"Content"`
}

// NewStruct creates a new relationship struct
func (*contentDurationR) NewStruct() *contentDurationR {
	return &contentDurationR{}
}

func (o *ContentDuration) GetContent() *Content {
	if o == nil {
		return nil
	}

	return o.R.GetContent()
}

func (r *contentDurationR) GetContent() *Content {
	if r == nil {
		return nil
	}

	return r.Content
}

// contentDurationL is where Load methods for each relationship are stored.
type contentDurationL struct{}

var (
	contentDurationAllColumns            = []string{"id", "created_at", "updated_at", "content_id", "value"}
	contentDurationColumnsWithoutDefault = []string{"updated_at", "content_id", "value"}
	contentDurationColumnsWithDefault    = []string{"id", "created_at"}
	contentDurationPrimaryKeyColumns     = []string{"id"}
	contentDurationGeneratedColumns      = []string{}
)

type (
	// ContentDurationSlice is an alias for a slice of pointers to ContentDuration.
	// This should almost always be used instead of []ContentDuration.
	ContentDurationSlice []*ContentDuration
	// ContentDurationHook is the signature for custom ContentDuration hook methods
	ContentDurationHook func(context.Context, boil.ContextExecutor, *ContentDuration) error

	contentDurationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	contentDurationType                 = reflect.TypeOf(&ContentDuration{})
	contentDurationMapping              = queries.MakeStructMapping(contentDurationType)
	contentDurationPrimaryKeyMapping, _ = queries.BindMapping(contentDurationType, contentDurationMapping, contentDurationPrimaryKeyColumns)
	contentDurationInsertCacheMut       sync.RWMutex
	contentDurationInsertCache          = make(map[string]insertCache)
	contentDurationUpdateCacheMut       sync.RWMutex
	contentDurationUpdateCache          = make(map[string]updateCache)
	contentDurationUpsertCacheMut       sync.RWMutex
	contentDurationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var contentDurationAfterSelectMu sync.Mutex
var contentDurationAfterSelectHooks []ContentDurationHook

var contentDurationBeforeInsertMu sync.Mutex
var contentDurationBeforeInsertHooks []ContentDurationHook
var contentDurationAfterInsertMu sync.Mutex
var contentDurationAfterInsertHooks []ContentDurationHook

var contentDurationBeforeUpdateMu sync.Mutex
var contentDurationBeforeUpdateHooks []ContentDurationHook
var contentDurationAfterUpdateMu sync.Mutex
var contentDurationAfterUpdateHooks []ContentDurationHook

var contentDurationBeforeDeleteMu sync.Mutex
var contentDurationBeforeDeleteHooks []ContentDurationHook
var contentDurationAfterDeleteMu sync.Mutex
var contentDurationAfterDeleteHooks []ContentDurationHook

var contentDurationBeforeUpsertMu sync.Mutex
var contentDurationBeforeUpsertHooks []ContentDurationHook
var contentDurationAfterUpsertMu sync.Mutex
var contentDurationAfterUpsertHooks []ContentDurationHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ContentDuration) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contentDurationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ContentDuration) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contentDurationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ContentDuration) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contentDurationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ContentDuration) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contentDurationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ContentDuration) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contentDurationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ContentDuration) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contentDurationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ContentDuration) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contentDurationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ContentDuration) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contentDurationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ContentDuration) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contentDurationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddContentDurationHook registers your hook function for all future operations.
func AddContentDurationHook(hookPoint boil.HookPoint, contentDurationHook ContentDurationHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		contentDurationAfterSelectMu.Lock()
		contentDurationAfterSelectHooks = append(contentDurationAfterSelectHooks, contentDurationHook)
		contentDurationAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		contentDurationBeforeInsertMu.Lock()
		contentDurationBeforeInsertHooks = append(contentDurationBeforeInsertHooks, contentDurationHook)
		contentDurationBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		contentDurationAfterInsertMu.Lock()
		contentDurationAfterInsertHooks = append(contentDurationAfterInsertHooks, contentDurationHook)
		contentDurationAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		contentDurationBeforeUpdateMu.Lock()
		contentDurationBeforeUpdateHooks = append(contentDurationBeforeUpdateHooks, contentDurationHook)
		contentDurationBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		contentDurationAfterUpdateMu.Lock()
		contentDurationAfterUpdateHooks = append(contentDurationAfterUpdateHooks, contentDurationHook)
		contentDurationAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		contentDurationBeforeDeleteMu.Lock()
		contentDurationBeforeDeleteHooks = append(contentDurationBeforeDeleteHooks, contentDurationHook)
		contentDurationBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		contentDurationAfterDeleteMu.Lock()
		contentDurationAfterDeleteHooks = append(contentDurationAfterDeleteHooks, contentDurationHook)
		contentDurationAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		contentDurationBeforeUpsertMu.Lock()
		contentDurationBeforeUpsertHooks = append(contentDurationBeforeUpsertHooks, contentDurationHook)
		contentDurationBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		contentDurationAfterUpsertMu.Lock()
		contentDurationAfterUpsertHooks = append(contentDurationAfterUpsertHooks, contentDurationHook)
		contentDurationAfterUpsertMu.Unlock()
	}
}

// OneG returns a single contentDuration record from the query using the global executor.
func (q contentDurationQuery) OneG(ctx context.Context) (*ContentDuration, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single contentDuration record from the query.
func (q contentDurationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ContentDuration, error) {
	o := &ContentDuration{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for content_duration")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all ContentDuration records from the query using the global executor.
func (q contentDurationQuery) AllG(ctx context.Context) (ContentDurationSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all ContentDuration records from the query.
func (q contentDurationQuery) All(ctx context.Context, exec boil.ContextExecutor) (ContentDurationSlice, error) {
	var o []*ContentDuration

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ContentDuration slice")
	}

	if len(contentDurationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all ContentDuration records in the query using the global executor
func (q contentDurationQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all ContentDuration records in the query.
func (q contentDurationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count content_duration rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q contentDurationQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q contentDurationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if content_duration exists")
	}

	return count > 0, nil
}

// Content pointed to by the foreign key.
func (o *ContentDuration) Content(mods ...qm.QueryMod) contentQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ContentID),
	}

	queryMods = append(queryMods, mods...)

	return Contents(queryMods...)
}

// LoadContent allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (contentDurationL) LoadContent(ctx context.Context, e boil.ContextExecutor, singular bool, maybeContentDuration interface{}, mods queries.Applicator) error {
	var slice []*ContentDuration
	var object *ContentDuration

	if singular {
		var ok bool
		object, ok = maybeContentDuration.(*ContentDuration)
		if !ok {
			object = new(ContentDuration)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeContentDuration)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeContentDuration))
			}
		}
	} else {
		s, ok := maybeContentDuration.(*[]*ContentDuration)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeContentDuration)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeContentDuration))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &contentDurationR{}
		}
		args[object.ContentID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &contentDurationR{}
			}

			args[obj.ContentID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`content`),
		qm.WhereIn(`content.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Content")
	}

	var resultSlice []*Content
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Content")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for content")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for content")
	}

	if len(contentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Content = foreign
		if foreign.R == nil {
			foreign.R = &contentR{}
		}
		foreign.R.ContentDuration = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ContentID == foreign.ID {
				local.R.Content = foreign
				if foreign.R == nil {
					foreign.R = &contentR{}
				}
				foreign.R.ContentDuration = local
				break
			}
		}
	}

	return nil
}

// SetContentG of the contentDuration to the related item.
// Sets o.R.Content to related.
// Adds o to related.R.ContentDuration.
// Uses the global database handle.
func (o *ContentDuration) SetContentG(ctx context.Context, insert bool, related *Content) error {
	return o.SetContent(ctx, boil.GetContextDB(), insert, related)
}

// SetContent of the contentDuration to the related item.
// Sets o.R.Content to related.
// Adds o to related.R.ContentDuration.
func (o *ContentDuration) SetContent(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Content) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"content_duration\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"content_id"}),
		strmangle.WhereClause("\"", "\"", 2, contentDurationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ContentID = related.ID
	if o.R == nil {
		o.R = &contentDurationR{
			Content: related,
		}
	} else {
		o.R.Content = related
	}

	if related.R == nil {
		related.R = &contentR{
			ContentDuration: o,
		}
	} else {
		related.R.ContentDuration = o
	}

	return nil
}

// ContentDurations retrieves all the records using an executor.
func ContentDurations(mods ...qm.QueryMod) contentDurationQuery {
	mods = append(mods, qm.From("\"content_duration\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"content_duration\".*"})
	}

	return contentDurationQuery{q}
}

// FindContentDurationG retrieves a single record by ID.
func FindContentDurationG(ctx context.Context, iD int, selectCols ...string) (*ContentDuration, error) {
	return FindContentDuration(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindContentDuration retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindContentDuration(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ContentDuration, error) {
	contentDurationObj := &ContentDuration{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"content_duration\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, contentDurationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from content_duration")
	}

	if err = contentDurationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return contentDurationObj, err
	}

	return contentDurationObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *ContentDuration) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ContentDuration) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no content_duration provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(contentDurationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	contentDurationInsertCacheMut.RLock()
	cache, cached := contentDurationInsertCache[key]
	contentDurationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			contentDurationAllColumns,
			contentDurationColumnsWithDefault,
			contentDurationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(contentDurationType, contentDurationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(contentDurationType, contentDurationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"content_duration\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"content_duration\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into content_duration")
	}

	if !cached {
		contentDurationInsertCacheMut.Lock()
		contentDurationInsertCache[key] = cache
		contentDurationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single ContentDuration record using the global executor.
// See Update for more documentation.
func (o *ContentDuration) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the ContentDuration.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ContentDuration) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	contentDurationUpdateCacheMut.RLock()
	cache, cached := contentDurationUpdateCache[key]
	contentDurationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			contentDurationAllColumns,
			contentDurationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update content_duration, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"content_duration\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, contentDurationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(contentDurationType, contentDurationMapping, append(wl, contentDurationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update content_duration row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for content_duration")
	}

	if !cached {
		contentDurationUpdateCacheMut.Lock()
		contentDurationUpdateCache[key] = cache
		contentDurationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q contentDurationQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q contentDurationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for content_duration")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for content_duration")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ContentDurationSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ContentDurationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), contentDurationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"content_duration\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, contentDurationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in contentDuration slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all contentDuration")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *ContentDuration) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ContentDuration) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no content_duration provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(contentDurationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	contentDurationUpsertCacheMut.RLock()
	cache, cached := contentDurationUpsertCache[key]
	contentDurationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			contentDurationAllColumns,
			contentDurationColumnsWithDefault,
			contentDurationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			contentDurationAllColumns,
			contentDurationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert content_duration, could not build update column list")
		}

		ret := strmangle.SetComplement(contentDurationAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(contentDurationPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert content_duration, could not build conflict column list")
			}

			conflict = make([]string, len(contentDurationPrimaryKeyColumns))
			copy(conflict, contentDurationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"content_duration\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(contentDurationType, contentDurationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(contentDurationType, contentDurationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert content_duration")
	}

	if !cached {
		contentDurationUpsertCacheMut.Lock()
		contentDurationUpsertCache[key] = cache
		contentDurationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single ContentDuration record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *ContentDuration) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single ContentDuration record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ContentDuration) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ContentDuration provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), contentDurationPrimaryKeyMapping)
	sql := "DELETE FROM \"content_duration\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from content_duration")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for content_duration")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q contentDurationQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q contentDurationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no contentDurationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from content_duration")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for content_duration")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ContentDurationSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ContentDurationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(contentDurationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), contentDurationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"content_duration\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, contentDurationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from contentDuration slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for content_duration")
	}

	if len(contentDurationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *ContentDuration) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no ContentDuration provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ContentDuration) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindContentDuration(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ContentDurationSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty ContentDurationSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ContentDurationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ContentDurationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), contentDurationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"content_duration\".* FROM \"content_duration\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, contentDurationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ContentDurationSlice")
	}

	*o = slice

	return nil
}

// ContentDurationExistsG checks if the ContentDuration row exists.
func ContentDurationExistsG(ctx context.Context, iD int) (bool, error) {
	return ContentDurationExists(ctx, boil.GetContextDB(), iD)
}

// ContentDurationExists checks if the ContentDuration row exists.
func ContentDurationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"content_duration\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if content_duration exists")
	}

	return exists, nil
}

// Exists checks if the ContentDuration row exists.
func (o *ContentDuration) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ContentDurationExists(ctx, exec, o.ID)
}
