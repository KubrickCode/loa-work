// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/sqlboiler/v4/types"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// MarketItem is an object representing the database table.
type MarketItem struct {
	ID                   int           `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt            time.Time     `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt            time.Time     `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	BundleCount          int           `boil:"bundle_count" json:"bundle_count" toml:"bundle_count" yaml:"bundle_count"`
	Name                 string        `boil:"name" json:"name" toml:"name" yaml:"name"`
	MarketItemCategoryID int           `boil:"market_item_category_id" json:"market_item_category_id" toml:"market_item_category_id" yaml:"market_item_category_id"`
	IsStatScraperEnabled bool          `boil:"is_stat_scraper_enabled" json:"is_stat_scraper_enabled" toml:"is_stat_scraper_enabled" yaml:"is_stat_scraper_enabled"`
	RefID                int           `boil:"ref_id" json:"ref_id" toml:"ref_id" yaml:"ref_id"`
	Grade                string        `boil:"grade" json:"grade" toml:"grade" yaml:"grade"`
	ImageURL             string        `boil:"image_url" json:"image_url" toml:"image_url" yaml:"image_url"`
	CurrentMinPrice      int           `boil:"current_min_price" json:"current_min_price" toml:"current_min_price" yaml:"current_min_price"`
	RecentPrice          int           `boil:"recent_price" json:"recent_price" toml:"recent_price" yaml:"recent_price"`
	YDayAvgPrice         types.Decimal `boil:"y_day_avg_price" json:"y_day_avg_price" toml:"y_day_avg_price" yaml:"y_day_avg_price"`

	R *marketItemR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L marketItemL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MarketItemColumns = struct {
	ID                   string
	CreatedAt            string
	UpdatedAt            string
	BundleCount          string
	Name                 string
	MarketItemCategoryID string
	IsStatScraperEnabled string
	RefID                string
	Grade                string
	ImageURL             string
	CurrentMinPrice      string
	RecentPrice          string
	YDayAvgPrice         string
}{
	ID:                   "id",
	CreatedAt:            "created_at",
	UpdatedAt:            "updated_at",
	BundleCount:          "bundle_count",
	Name:                 "name",
	MarketItemCategoryID: "market_item_category_id",
	IsStatScraperEnabled: "is_stat_scraper_enabled",
	RefID:                "ref_id",
	Grade:                "grade",
	ImageURL:             "image_url",
	CurrentMinPrice:      "current_min_price",
	RecentPrice:          "recent_price",
	YDayAvgPrice:         "y_day_avg_price",
}

var MarketItemTableColumns = struct {
	ID                   string
	CreatedAt            string
	UpdatedAt            string
	BundleCount          string
	Name                 string
	MarketItemCategoryID string
	IsStatScraperEnabled string
	RefID                string
	Grade                string
	ImageURL             string
	CurrentMinPrice      string
	RecentPrice          string
	YDayAvgPrice         string
}{
	ID:                   "market_item.id",
	CreatedAt:            "market_item.created_at",
	UpdatedAt:            "market_item.updated_at",
	BundleCount:          "market_item.bundle_count",
	Name:                 "market_item.name",
	MarketItemCategoryID: "market_item.market_item_category_id",
	IsStatScraperEnabled: "market_item.is_stat_scraper_enabled",
	RefID:                "market_item.ref_id",
	Grade:                "market_item.grade",
	ImageURL:             "market_item.image_url",
	CurrentMinPrice:      "market_item.current_min_price",
	RecentPrice:          "market_item.recent_price",
	YDayAvgPrice:         "market_item.y_day_avg_price",
}

// Generated where

var MarketItemWhere = struct {
	ID                   whereHelperint
	CreatedAt            whereHelpertime_Time
	UpdatedAt            whereHelpertime_Time
	BundleCount          whereHelperint
	Name                 whereHelperstring
	MarketItemCategoryID whereHelperint
	IsStatScraperEnabled whereHelperbool
	RefID                whereHelperint
	Grade                whereHelperstring
	ImageURL             whereHelperstring
	CurrentMinPrice      whereHelperint
	RecentPrice          whereHelperint
	YDayAvgPrice         whereHelpertypes_Decimal
}{
	ID:                   whereHelperint{field: "\"market_item\".\"id\""},
	CreatedAt:            whereHelpertime_Time{field: "\"market_item\".\"created_at\""},
	UpdatedAt:            whereHelpertime_Time{field: "\"market_item\".\"updated_at\""},
	BundleCount:          whereHelperint{field: "\"market_item\".\"bundle_count\""},
	Name:                 whereHelperstring{field: "\"market_item\".\"name\""},
	MarketItemCategoryID: whereHelperint{field: "\"market_item\".\"market_item_category_id\""},
	IsStatScraperEnabled: whereHelperbool{field: "\"market_item\".\"is_stat_scraper_enabled\""},
	RefID:                whereHelperint{field: "\"market_item\".\"ref_id\""},
	Grade:                whereHelperstring{field: "\"market_item\".\"grade\""},
	ImageURL:             whereHelperstring{field: "\"market_item\".\"image_url\""},
	CurrentMinPrice:      whereHelperint{field: "\"market_item\".\"current_min_price\""},
	RecentPrice:          whereHelperint{field: "\"market_item\".\"recent_price\""},
	YDayAvgPrice:         whereHelpertypes_Decimal{field: "\"market_item\".\"y_day_avg_price\""},
}

// MarketItemRels is where relationship names are stored.
var MarketItemRels = struct {
	MarketItemCategory string
	MarketItemStats    string
}{
	MarketItemCategory: "MarketItemCategory",
	MarketItemStats:    "MarketItemStats",
}

// marketItemR is where relationships are stored.
type marketItemR struct {
	MarketItemCategory *MarketItemCategory `boil:"MarketItemCategory" json:"MarketItemCategory" toml:"MarketItemCategory" yaml:"MarketItemCategory"`
	MarketItemStats    MarketItemStatSlice `boil:"MarketItemStats" json:"MarketItemStats" toml:"MarketItemStats" yaml:"MarketItemStats"`
}

// NewStruct creates a new relationship struct
func (*marketItemR) NewStruct() *marketItemR {
	return &marketItemR{}
}

func (o *MarketItem) GetMarketItemCategory() *MarketItemCategory {
	if o == nil {
		return nil
	}

	return o.R.GetMarketItemCategory()
}

func (r *marketItemR) GetMarketItemCategory() *MarketItemCategory {
	if r == nil {
		return nil
	}

	return r.MarketItemCategory
}

func (o *MarketItem) GetMarketItemStats() MarketItemStatSlice {
	if o == nil {
		return nil
	}

	return o.R.GetMarketItemStats()
}

func (r *marketItemR) GetMarketItemStats() MarketItemStatSlice {
	if r == nil {
		return nil
	}

	return r.MarketItemStats
}

// marketItemL is where Load methods for each relationship are stored.
type marketItemL struct{}

var (
	marketItemAllColumns            = []string{"id", "created_at", "updated_at", "bundle_count", "name", "market_item_category_id", "is_stat_scraper_enabled", "ref_id", "grade", "image_url", "current_min_price", "recent_price", "y_day_avg_price"}
	marketItemColumnsWithoutDefault = []string{"updated_at", "bundle_count", "name", "market_item_category_id", "ref_id", "grade", "image_url"}
	marketItemColumnsWithDefault    = []string{"id", "created_at", "is_stat_scraper_enabled", "current_min_price", "recent_price", "y_day_avg_price"}
	marketItemPrimaryKeyColumns     = []string{"id"}
	marketItemGeneratedColumns      = []string{}
)

type (
	// MarketItemSlice is an alias for a slice of pointers to MarketItem.
	// This should almost always be used instead of []MarketItem.
	MarketItemSlice []*MarketItem
	// MarketItemHook is the signature for custom MarketItem hook methods
	MarketItemHook func(context.Context, boil.ContextExecutor, *MarketItem) error

	marketItemQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	marketItemType                 = reflect.TypeOf(&MarketItem{})
	marketItemMapping              = queries.MakeStructMapping(marketItemType)
	marketItemPrimaryKeyMapping, _ = queries.BindMapping(marketItemType, marketItemMapping, marketItemPrimaryKeyColumns)
	marketItemInsertCacheMut       sync.RWMutex
	marketItemInsertCache          = make(map[string]insertCache)
	marketItemUpdateCacheMut       sync.RWMutex
	marketItemUpdateCache          = make(map[string]updateCache)
	marketItemUpsertCacheMut       sync.RWMutex
	marketItemUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var marketItemAfterSelectMu sync.Mutex
var marketItemAfterSelectHooks []MarketItemHook

var marketItemBeforeInsertMu sync.Mutex
var marketItemBeforeInsertHooks []MarketItemHook
var marketItemAfterInsertMu sync.Mutex
var marketItemAfterInsertHooks []MarketItemHook

var marketItemBeforeUpdateMu sync.Mutex
var marketItemBeforeUpdateHooks []MarketItemHook
var marketItemAfterUpdateMu sync.Mutex
var marketItemAfterUpdateHooks []MarketItemHook

var marketItemBeforeDeleteMu sync.Mutex
var marketItemBeforeDeleteHooks []MarketItemHook
var marketItemAfterDeleteMu sync.Mutex
var marketItemAfterDeleteHooks []MarketItemHook

var marketItemBeforeUpsertMu sync.Mutex
var marketItemBeforeUpsertHooks []MarketItemHook
var marketItemAfterUpsertMu sync.Mutex
var marketItemAfterUpsertHooks []MarketItemHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MarketItem) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range marketItemAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MarketItem) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range marketItemBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MarketItem) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range marketItemAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MarketItem) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range marketItemBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MarketItem) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range marketItemAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MarketItem) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range marketItemBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MarketItem) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range marketItemAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MarketItem) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range marketItemBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MarketItem) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range marketItemAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMarketItemHook registers your hook function for all future operations.
func AddMarketItemHook(hookPoint boil.HookPoint, marketItemHook MarketItemHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		marketItemAfterSelectMu.Lock()
		marketItemAfterSelectHooks = append(marketItemAfterSelectHooks, marketItemHook)
		marketItemAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		marketItemBeforeInsertMu.Lock()
		marketItemBeforeInsertHooks = append(marketItemBeforeInsertHooks, marketItemHook)
		marketItemBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		marketItemAfterInsertMu.Lock()
		marketItemAfterInsertHooks = append(marketItemAfterInsertHooks, marketItemHook)
		marketItemAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		marketItemBeforeUpdateMu.Lock()
		marketItemBeforeUpdateHooks = append(marketItemBeforeUpdateHooks, marketItemHook)
		marketItemBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		marketItemAfterUpdateMu.Lock()
		marketItemAfterUpdateHooks = append(marketItemAfterUpdateHooks, marketItemHook)
		marketItemAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		marketItemBeforeDeleteMu.Lock()
		marketItemBeforeDeleteHooks = append(marketItemBeforeDeleteHooks, marketItemHook)
		marketItemBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		marketItemAfterDeleteMu.Lock()
		marketItemAfterDeleteHooks = append(marketItemAfterDeleteHooks, marketItemHook)
		marketItemAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		marketItemBeforeUpsertMu.Lock()
		marketItemBeforeUpsertHooks = append(marketItemBeforeUpsertHooks, marketItemHook)
		marketItemBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		marketItemAfterUpsertMu.Lock()
		marketItemAfterUpsertHooks = append(marketItemAfterUpsertHooks, marketItemHook)
		marketItemAfterUpsertMu.Unlock()
	}
}

// OneG returns a single marketItem record from the query using the global executor.
func (q marketItemQuery) OneG(ctx context.Context) (*MarketItem, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single marketItem record from the query.
func (q marketItemQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MarketItem, error) {
	o := &MarketItem{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for market_item")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all MarketItem records from the query using the global executor.
func (q marketItemQuery) AllG(ctx context.Context) (MarketItemSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all MarketItem records from the query.
func (q marketItemQuery) All(ctx context.Context, exec boil.ContextExecutor) (MarketItemSlice, error) {
	var o []*MarketItem

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to MarketItem slice")
	}

	if len(marketItemAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all MarketItem records in the query using the global executor
func (q marketItemQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all MarketItem records in the query.
func (q marketItemQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count market_item rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q marketItemQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q marketItemQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if market_item exists")
	}

	return count > 0, nil
}

// MarketItemCategory pointed to by the foreign key.
func (o *MarketItem) MarketItemCategory(mods ...qm.QueryMod) marketItemCategoryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MarketItemCategoryID),
	}

	queryMods = append(queryMods, mods...)

	return MarketItemCategories(queryMods...)
}

// MarketItemStats retrieves all the market_item_stat's MarketItemStats with an executor.
func (o *MarketItem) MarketItemStats(mods ...qm.QueryMod) marketItemStatQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"market_item_stat\".\"market_item_id\"=?", o.ID),
	)

	return MarketItemStats(queryMods...)
}

// LoadMarketItemCategory allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (marketItemL) LoadMarketItemCategory(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMarketItem interface{}, mods queries.Applicator) error {
	var slice []*MarketItem
	var object *MarketItem

	if singular {
		var ok bool
		object, ok = maybeMarketItem.(*MarketItem)
		if !ok {
			object = new(MarketItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMarketItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMarketItem))
			}
		}
	} else {
		s, ok := maybeMarketItem.(*[]*MarketItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMarketItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMarketItem))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &marketItemR{}
		}
		args[object.MarketItemCategoryID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &marketItemR{}
			}

			args[obj.MarketItemCategoryID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`market_item_category`),
		qm.WhereIn(`market_item_category.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MarketItemCategory")
	}

	var resultSlice []*MarketItemCategory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MarketItemCategory")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for market_item_category")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for market_item_category")
	}

	if len(marketItemCategoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MarketItemCategory = foreign
		if foreign.R == nil {
			foreign.R = &marketItemCategoryR{}
		}
		foreign.R.MarketItems = append(foreign.R.MarketItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MarketItemCategoryID == foreign.ID {
				local.R.MarketItemCategory = foreign
				if foreign.R == nil {
					foreign.R = &marketItemCategoryR{}
				}
				foreign.R.MarketItems = append(foreign.R.MarketItems, local)
				break
			}
		}
	}

	return nil
}

// LoadMarketItemStats allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (marketItemL) LoadMarketItemStats(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMarketItem interface{}, mods queries.Applicator) error {
	var slice []*MarketItem
	var object *MarketItem

	if singular {
		var ok bool
		object, ok = maybeMarketItem.(*MarketItem)
		if !ok {
			object = new(MarketItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMarketItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMarketItem))
			}
		}
	} else {
		s, ok := maybeMarketItem.(*[]*MarketItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMarketItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMarketItem))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &marketItemR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &marketItemR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`market_item_stat`),
		qm.WhereIn(`market_item_stat.market_item_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load market_item_stat")
	}

	var resultSlice []*MarketItemStat
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice market_item_stat")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on market_item_stat")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for market_item_stat")
	}

	if len(marketItemStatAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.MarketItemStats = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &marketItemStatR{}
			}
			foreign.R.MarketItem = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.MarketItemID {
				local.R.MarketItemStats = append(local.R.MarketItemStats, foreign)
				if foreign.R == nil {
					foreign.R = &marketItemStatR{}
				}
				foreign.R.MarketItem = local
				break
			}
		}
	}

	return nil
}

// SetMarketItemCategoryG of the marketItem to the related item.
// Sets o.R.MarketItemCategory to related.
// Adds o to related.R.MarketItems.
// Uses the global database handle.
func (o *MarketItem) SetMarketItemCategoryG(ctx context.Context, insert bool, related *MarketItemCategory) error {
	return o.SetMarketItemCategory(ctx, boil.GetContextDB(), insert, related)
}

// SetMarketItemCategory of the marketItem to the related item.
// Sets o.R.MarketItemCategory to related.
// Adds o to related.R.MarketItems.
func (o *MarketItem) SetMarketItemCategory(ctx context.Context, exec boil.ContextExecutor, insert bool, related *MarketItemCategory) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"market_item\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"market_item_category_id"}),
		strmangle.WhereClause("\"", "\"", 2, marketItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MarketItemCategoryID = related.ID
	if o.R == nil {
		o.R = &marketItemR{
			MarketItemCategory: related,
		}
	} else {
		o.R.MarketItemCategory = related
	}

	if related.R == nil {
		related.R = &marketItemCategoryR{
			MarketItems: MarketItemSlice{o},
		}
	} else {
		related.R.MarketItems = append(related.R.MarketItems, o)
	}

	return nil
}

// AddMarketItemStatsG adds the given related objects to the existing relationships
// of the market_item, optionally inserting them as new records.
// Appends related to o.R.MarketItemStats.
// Sets related.R.MarketItem appropriately.
// Uses the global database handle.
func (o *MarketItem) AddMarketItemStatsG(ctx context.Context, insert bool, related ...*MarketItemStat) error {
	return o.AddMarketItemStats(ctx, boil.GetContextDB(), insert, related...)
}

// AddMarketItemStats adds the given related objects to the existing relationships
// of the market_item, optionally inserting them as new records.
// Appends related to o.R.MarketItemStats.
// Sets related.R.MarketItem appropriately.
func (o *MarketItem) AddMarketItemStats(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*MarketItemStat) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.MarketItemID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"market_item_stat\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"market_item_id"}),
				strmangle.WhereClause("\"", "\"", 2, marketItemStatPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.MarketItemID = o.ID
		}
	}

	if o.R == nil {
		o.R = &marketItemR{
			MarketItemStats: related,
		}
	} else {
		o.R.MarketItemStats = append(o.R.MarketItemStats, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &marketItemStatR{
				MarketItem: o,
			}
		} else {
			rel.R.MarketItem = o
		}
	}
	return nil
}

// MarketItems retrieves all the records using an executor.
func MarketItems(mods ...qm.QueryMod) marketItemQuery {
	mods = append(mods, qm.From("\"market_item\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"market_item\".*"})
	}

	return marketItemQuery{q}
}

// FindMarketItemG retrieves a single record by ID.
func FindMarketItemG(ctx context.Context, iD int, selectCols ...string) (*MarketItem, error) {
	return FindMarketItem(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindMarketItem retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMarketItem(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*MarketItem, error) {
	marketItemObj := &MarketItem{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"market_item\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, marketItemObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from market_item")
	}

	if err = marketItemObj.doAfterSelectHooks(ctx, exec); err != nil {
		return marketItemObj, err
	}

	return marketItemObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *MarketItem) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MarketItem) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no market_item provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(marketItemColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	marketItemInsertCacheMut.RLock()
	cache, cached := marketItemInsertCache[key]
	marketItemInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			marketItemAllColumns,
			marketItemColumnsWithDefault,
			marketItemColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(marketItemType, marketItemMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(marketItemType, marketItemMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"market_item\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"market_item\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into market_item")
	}

	if !cached {
		marketItemInsertCacheMut.Lock()
		marketItemInsertCache[key] = cache
		marketItemInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single MarketItem record using the global executor.
// See Update for more documentation.
func (o *MarketItem) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the MarketItem.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MarketItem) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	marketItemUpdateCacheMut.RLock()
	cache, cached := marketItemUpdateCache[key]
	marketItemUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			marketItemAllColumns,
			marketItemPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update market_item, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"market_item\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, marketItemPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(marketItemType, marketItemMapping, append(wl, marketItemPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update market_item row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for market_item")
	}

	if !cached {
		marketItemUpdateCacheMut.Lock()
		marketItemUpdateCache[key] = cache
		marketItemUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q marketItemQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q marketItemQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for market_item")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for market_item")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o MarketItemSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MarketItemSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), marketItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"market_item\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, marketItemPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in marketItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all marketItem")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *MarketItem) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MarketItem) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no market_item provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(marketItemColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	marketItemUpsertCacheMut.RLock()
	cache, cached := marketItemUpsertCache[key]
	marketItemUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			marketItemAllColumns,
			marketItemColumnsWithDefault,
			marketItemColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			marketItemAllColumns,
			marketItemPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert market_item, could not build update column list")
		}

		ret := strmangle.SetComplement(marketItemAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(marketItemPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert market_item, could not build conflict column list")
			}

			conflict = make([]string, len(marketItemPrimaryKeyColumns))
			copy(conflict, marketItemPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"market_item\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(marketItemType, marketItemMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(marketItemType, marketItemMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert market_item")
	}

	if !cached {
		marketItemUpsertCacheMut.Lock()
		marketItemUpsertCache[key] = cache
		marketItemUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single MarketItem record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *MarketItem) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single MarketItem record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MarketItem) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MarketItem provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), marketItemPrimaryKeyMapping)
	sql := "DELETE FROM \"market_item\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from market_item")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for market_item")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q marketItemQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q marketItemQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no marketItemQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from market_item")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for market_item")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o MarketItemSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MarketItemSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(marketItemBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), marketItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"market_item\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, marketItemPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from marketItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for market_item")
	}

	if len(marketItemAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *MarketItem) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no MarketItem provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MarketItem) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMarketItem(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MarketItemSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty MarketItemSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MarketItemSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MarketItemSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), marketItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"market_item\".* FROM \"market_item\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, marketItemPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MarketItemSlice")
	}

	*o = slice

	return nil
}

// MarketItemExistsG checks if the MarketItem row exists.
func MarketItemExistsG(ctx context.Context, iD int) (bool, error) {
	return MarketItemExists(ctx, boil.GetContextDB(), iD)
}

// MarketItemExists checks if the MarketItem row exists.
func MarketItemExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"market_item\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if market_item exists")
	}

	return exists, nil
}

// Exists checks if the MarketItem row exists.
func (o *MarketItem) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return MarketItemExists(ctx, exec, o.ID)
}
