// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/sqlboiler/v4/types"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// UserItem is an object representing the database table.
type UserItem struct {
	ID        int           `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt time.Time     `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time     `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	Price     types.Decimal `boil:"price" json:"price" toml:"price" yaml:"price"`
	ItemID    int           `boil:"item_id" json:"item_id" toml:"item_id" yaml:"item_id"`
	UserID    int           `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`

	R *userItemR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userItemL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserItemColumns = struct {
	ID        string
	CreatedAt string
	UpdatedAt string
	Price     string
	ItemID    string
	UserID    string
}{
	ID:        "id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	Price:     "price",
	ItemID:    "item_id",
	UserID:    "user_id",
}

var UserItemTableColumns = struct {
	ID        string
	CreatedAt string
	UpdatedAt string
	Price     string
	ItemID    string
	UserID    string
}{
	ID:        "user_item.id",
	CreatedAt: "user_item.created_at",
	UpdatedAt: "user_item.updated_at",
	Price:     "user_item.price",
	ItemID:    "user_item.item_id",
	UserID:    "user_item.user_id",
}

// Generated where

var UserItemWhere = struct {
	ID        whereHelperint
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
	Price     whereHelpertypes_Decimal
	ItemID    whereHelperint
	UserID    whereHelperint
}{
	ID:        whereHelperint{field: "\"user_item\".\"id\""},
	CreatedAt: whereHelpertime_Time{field: "\"user_item\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"user_item\".\"updated_at\""},
	Price:     whereHelpertypes_Decimal{field: "\"user_item\".\"price\""},
	ItemID:    whereHelperint{field: "\"user_item\".\"item_id\""},
	UserID:    whereHelperint{field: "\"user_item\".\"user_id\""},
}

// UserItemRels is where relationship names are stored.
var UserItemRels = struct {
	Item string
	User string
}{
	Item: "Item",
	User: "User",
}

// userItemR is where relationships are stored.
type userItemR struct {
	Item *Item `boil:"Item" json:"Item" toml:"Item" yaml:"Item"`
	User *User `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*userItemR) NewStruct() *userItemR {
	return &userItemR{}
}

func (o *UserItem) GetItem() *Item {
	if o == nil {
		return nil
	}

	return o.R.GetItem()
}

func (r *userItemR) GetItem() *Item {
	if r == nil {
		return nil
	}

	return r.Item
}

func (o *UserItem) GetUser() *User {
	if o == nil {
		return nil
	}

	return o.R.GetUser()
}

func (r *userItemR) GetUser() *User {
	if r == nil {
		return nil
	}

	return r.User
}

// userItemL is where Load methods for each relationship are stored.
type userItemL struct{}

var (
	userItemAllColumns            = []string{"id", "created_at", "updated_at", "price", "item_id", "user_id"}
	userItemColumnsWithoutDefault = []string{"updated_at", "item_id", "user_id"}
	userItemColumnsWithDefault    = []string{"id", "created_at", "price"}
	userItemPrimaryKeyColumns     = []string{"id"}
	userItemGeneratedColumns      = []string{}
)

type (
	// UserItemSlice is an alias for a slice of pointers to UserItem.
	// This should almost always be used instead of []UserItem.
	UserItemSlice []*UserItem
	// UserItemHook is the signature for custom UserItem hook methods
	UserItemHook func(context.Context, boil.ContextExecutor, *UserItem) error

	userItemQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userItemType                 = reflect.TypeOf(&UserItem{})
	userItemMapping              = queries.MakeStructMapping(userItemType)
	userItemPrimaryKeyMapping, _ = queries.BindMapping(userItemType, userItemMapping, userItemPrimaryKeyColumns)
	userItemInsertCacheMut       sync.RWMutex
	userItemInsertCache          = make(map[string]insertCache)
	userItemUpdateCacheMut       sync.RWMutex
	userItemUpdateCache          = make(map[string]updateCache)
	userItemUpsertCacheMut       sync.RWMutex
	userItemUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userItemAfterSelectMu sync.Mutex
var userItemAfterSelectHooks []UserItemHook

var userItemBeforeInsertMu sync.Mutex
var userItemBeforeInsertHooks []UserItemHook
var userItemAfterInsertMu sync.Mutex
var userItemAfterInsertHooks []UserItemHook

var userItemBeforeUpdateMu sync.Mutex
var userItemBeforeUpdateHooks []UserItemHook
var userItemAfterUpdateMu sync.Mutex
var userItemAfterUpdateHooks []UserItemHook

var userItemBeforeDeleteMu sync.Mutex
var userItemBeforeDeleteHooks []UserItemHook
var userItemAfterDeleteMu sync.Mutex
var userItemAfterDeleteHooks []UserItemHook

var userItemBeforeUpsertMu sync.Mutex
var userItemBeforeUpsertHooks []UserItemHook
var userItemAfterUpsertMu sync.Mutex
var userItemAfterUpsertHooks []UserItemHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserItem) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userItemAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserItem) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userItemBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserItem) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userItemAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserItem) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userItemBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserItem) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userItemAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserItem) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userItemBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserItem) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userItemAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserItem) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userItemBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserItem) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userItemAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserItemHook registers your hook function for all future operations.
func AddUserItemHook(hookPoint boil.HookPoint, userItemHook UserItemHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		userItemAfterSelectMu.Lock()
		userItemAfterSelectHooks = append(userItemAfterSelectHooks, userItemHook)
		userItemAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		userItemBeforeInsertMu.Lock()
		userItemBeforeInsertHooks = append(userItemBeforeInsertHooks, userItemHook)
		userItemBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		userItemAfterInsertMu.Lock()
		userItemAfterInsertHooks = append(userItemAfterInsertHooks, userItemHook)
		userItemAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		userItemBeforeUpdateMu.Lock()
		userItemBeforeUpdateHooks = append(userItemBeforeUpdateHooks, userItemHook)
		userItemBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		userItemAfterUpdateMu.Lock()
		userItemAfterUpdateHooks = append(userItemAfterUpdateHooks, userItemHook)
		userItemAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		userItemBeforeDeleteMu.Lock()
		userItemBeforeDeleteHooks = append(userItemBeforeDeleteHooks, userItemHook)
		userItemBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		userItemAfterDeleteMu.Lock()
		userItemAfterDeleteHooks = append(userItemAfterDeleteHooks, userItemHook)
		userItemAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		userItemBeforeUpsertMu.Lock()
		userItemBeforeUpsertHooks = append(userItemBeforeUpsertHooks, userItemHook)
		userItemBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		userItemAfterUpsertMu.Lock()
		userItemAfterUpsertHooks = append(userItemAfterUpsertHooks, userItemHook)
		userItemAfterUpsertMu.Unlock()
	}
}

// OneG returns a single userItem record from the query using the global executor.
func (q userItemQuery) OneG(ctx context.Context) (*UserItem, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single userItem record from the query.
func (q userItemQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserItem, error) {
	o := &UserItem{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_item")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all UserItem records from the query using the global executor.
func (q userItemQuery) AllG(ctx context.Context) (UserItemSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all UserItem records from the query.
func (q userItemQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserItemSlice, error) {
	var o []*UserItem

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserItem slice")
	}

	if len(userItemAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all UserItem records in the query using the global executor
func (q userItemQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all UserItem records in the query.
func (q userItemQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_item rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q userItemQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q userItemQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_item exists")
	}

	return count > 0, nil
}

// Item pointed to by the foreign key.
func (o *UserItem) Item(mods ...qm.QueryMod) itemQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ItemID),
	}

	queryMods = append(queryMods, mods...)

	return Items(queryMods...)
}

// User pointed to by the foreign key.
func (o *UserItem) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadItem allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userItemL) LoadItem(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserItem interface{}, mods queries.Applicator) error {
	var slice []*UserItem
	var object *UserItem

	if singular {
		var ok bool
		object, ok = maybeUserItem.(*UserItem)
		if !ok {
			object = new(UserItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserItem))
			}
		}
	} else {
		s, ok := maybeUserItem.(*[]*UserItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserItem))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userItemR{}
		}
		args[object.ItemID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userItemR{}
			}

			args[obj.ItemID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`item`),
		qm.WhereIn(`item.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Item")
	}

	var resultSlice []*Item
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Item")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for item")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for item")
	}

	if len(itemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Item = foreign
		if foreign.R == nil {
			foreign.R = &itemR{}
		}
		foreign.R.UserItems = append(foreign.R.UserItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ItemID == foreign.ID {
				local.R.Item = foreign
				if foreign.R == nil {
					foreign.R = &itemR{}
				}
				foreign.R.UserItems = append(foreign.R.UserItems, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userItemL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserItem interface{}, mods queries.Applicator) error {
	var slice []*UserItem
	var object *UserItem

	if singular {
		var ok bool
		object, ok = maybeUserItem.(*UserItem)
		if !ok {
			object = new(UserItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserItem))
			}
		}
	} else {
		s, ok := maybeUserItem.(*[]*UserItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserItem))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userItemR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userItemR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`user`),
		qm.WhereIn(`user.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UserItems = append(foreign.R.UserItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UserItems = append(foreign.R.UserItems, local)
				break
			}
		}
	}

	return nil
}

// SetItemG of the userItem to the related item.
// Sets o.R.Item to related.
// Adds o to related.R.UserItems.
// Uses the global database handle.
func (o *UserItem) SetItemG(ctx context.Context, insert bool, related *Item) error {
	return o.SetItem(ctx, boil.GetContextDB(), insert, related)
}

// SetItem of the userItem to the related item.
// Sets o.R.Item to related.
// Adds o to related.R.UserItems.
func (o *UserItem) SetItem(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Item) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_item\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"item_id"}),
		strmangle.WhereClause("\"", "\"", 2, userItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ItemID = related.ID
	if o.R == nil {
		o.R = &userItemR{
			Item: related,
		}
	} else {
		o.R.Item = related
	}

	if related.R == nil {
		related.R = &itemR{
			UserItems: UserItemSlice{o},
		}
	} else {
		related.R.UserItems = append(related.R.UserItems, o)
	}

	return nil
}

// SetUserG of the userItem to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserItems.
// Uses the global database handle.
func (o *UserItem) SetUserG(ctx context.Context, insert bool, related *User) error {
	return o.SetUser(ctx, boil.GetContextDB(), insert, related)
}

// SetUser of the userItem to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserItems.
func (o *UserItem) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_item\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, userItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &userItemR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			UserItems: UserItemSlice{o},
		}
	} else {
		related.R.UserItems = append(related.R.UserItems, o)
	}

	return nil
}

// UserItems retrieves all the records using an executor.
func UserItems(mods ...qm.QueryMod) userItemQuery {
	mods = append(mods, qm.From("\"user_item\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"user_item\".*"})
	}

	return userItemQuery{q}
}

// FindUserItemG retrieves a single record by ID.
func FindUserItemG(ctx context.Context, iD int, selectCols ...string) (*UserItem, error) {
	return FindUserItem(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindUserItem retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserItem(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*UserItem, error) {
	userItemObj := &UserItem{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_item\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, userItemObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from user_item")
	}

	if err = userItemObj.doAfterSelectHooks(ctx, exec); err != nil {
		return userItemObj, err
	}

	return userItemObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *UserItem) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserItem) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_item provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userItemColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userItemInsertCacheMut.RLock()
	cache, cached := userItemInsertCache[key]
	userItemInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userItemAllColumns,
			userItemColumnsWithDefault,
			userItemColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userItemType, userItemMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userItemType, userItemMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_item\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_item\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into user_item")
	}

	if !cached {
		userItemInsertCacheMut.Lock()
		userItemInsertCache[key] = cache
		userItemInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single UserItem record using the global executor.
// See Update for more documentation.
func (o *UserItem) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the UserItem.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserItem) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userItemUpdateCacheMut.RLock()
	cache, cached := userItemUpdateCache[key]
	userItemUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userItemAllColumns,
			userItemPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update user_item, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_item\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userItemPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userItemType, userItemMapping, append(wl, userItemPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update user_item row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for user_item")
	}

	if !cached {
		userItemUpdateCacheMut.Lock()
		userItemUpdateCache[key] = cache
		userItemUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q userItemQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q userItemQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for user_item")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for user_item")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o UserItemSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserItemSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_item\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userItemPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in userItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all userItem")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *UserItem) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserItem) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no user_item provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userItemColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userItemUpsertCacheMut.RLock()
	cache, cached := userItemUpsertCache[key]
	userItemUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			userItemAllColumns,
			userItemColumnsWithDefault,
			userItemColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userItemAllColumns,
			userItemPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert user_item, could not build update column list")
		}

		ret := strmangle.SetComplement(userItemAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(userItemPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert user_item, could not build conflict column list")
			}

			conflict = make([]string, len(userItemPrimaryKeyColumns))
			copy(conflict, userItemPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"user_item\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(userItemType, userItemMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userItemType, userItemMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert user_item")
	}

	if !cached {
		userItemUpsertCacheMut.Lock()
		userItemUpsertCache[key] = cache
		userItemUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single UserItem record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *UserItem) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single UserItem record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserItem) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserItem provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userItemPrimaryKeyMapping)
	sql := "DELETE FROM \"user_item\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from user_item")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for user_item")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q userItemQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q userItemQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no userItemQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from user_item")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_item")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o UserItemSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserItemSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userItemBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_item\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userItemPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from userItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_item")
	}

	if len(userItemAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *UserItem) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no UserItem provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserItem) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserItem(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserItemSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty UserItemSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserItemSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserItemSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_item\".* FROM \"user_item\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userItemPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserItemSlice")
	}

	*o = slice

	return nil
}

// UserItemExistsG checks if the UserItem row exists.
func UserItemExistsG(ctx context.Context, iD int) (bool, error) {
	return UserItemExists(ctx, boil.GetContextDB(), iD)
}

// UserItemExists checks if the UserItem row exists.
func UserItemExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_item\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if user_item exists")
	}

	return exists, nil
}

// Exists checks if the UserItem row exists.
func (o *UserItem) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UserItemExists(ctx, exec, o.ID)
}
