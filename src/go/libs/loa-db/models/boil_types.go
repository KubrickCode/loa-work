// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"strconv"

	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// M type is for providing columns and column values to UpdateAll.
type M map[string]interface{}

// ErrSyncFail occurs during insert when the record could not be retrieved in
// order to populate default value information. This usually happens when LastInsertId
// fails or there was a primary key configuration that was not resolvable.
var ErrSyncFail = errors.New("models: failed to synchronize data after insert")

type insertCache struct {
	query        string
	retQuery     string
	valueMapping []uint64
	retMapping   []uint64
}

type updateCache struct {
	query        string
	valueMapping []uint64
}

func makeCacheKey(cols boil.Columns, nzDefaults []string) string {
	buf := strmangle.GetBuffer()

	buf.WriteString(strconv.Itoa(cols.Kind))
	for _, w := range cols.Cols {
		buf.WriteString(w)
	}

	if len(nzDefaults) != 0 {
		buf.WriteByte('.')
	}
	for _, nz := range nzDefaults {
		buf.WriteString(nz)
	}

	str := buf.String()
	strmangle.PutBuffer(buf)
	return str
}

type ContentStatus string

// Enum values for ContentStatus
const (
	ContentStatusACTIVE   ContentStatus = "ACTIVE"
	ContentStatusARCHIVED ContentStatus = "ARCHIVED"
)

func AllContentStatus() []ContentStatus {
	return []ContentStatus{
		ContentStatusACTIVE,
		ContentStatusARCHIVED,
	}
}

func (e ContentStatus) IsValid() error {
	switch e {
	case ContentStatusACTIVE, ContentStatusARCHIVED:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e ContentStatus) String() string {
	return string(e)
}

func (e ContentStatus) Ordinal() int {
	switch e {
	case ContentStatusACTIVE:
		return 0
	case ContentStatusARCHIVED:
		return 1

	default:
		panic(errors.New("enum is not valid"))
	}
}

type ItemKind string

// Enum values for ItemKind
const (
	ItemKindAUCTION ItemKind = "AUCTION"
	ItemKindMARKET  ItemKind = "MARKET"
	ItemKindEXTRA   ItemKind = "EXTRA"
)

func AllItemKind() []ItemKind {
	return []ItemKind{
		ItemKindAUCTION,
		ItemKindMARKET,
		ItemKindEXTRA,
	}
}

func (e ItemKind) IsValid() error {
	switch e {
	case ItemKindAUCTION, ItemKindMARKET, ItemKindEXTRA:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e ItemKind) String() string {
	return string(e)
}

func (e ItemKind) Ordinal() int {
	switch e {
	case ItemKindAUCTION:
		return 0
	case ItemKindMARKET:
		return 1
	case ItemKindEXTRA:
		return 2

	default:
		panic(errors.New("enum is not valid"))
	}
}

type AuthProvider string

// Enum values for AuthProvider
const (
	AuthProviderGOOGLE  AuthProvider = "GOOGLE"
	AuthProviderDISCORD AuthProvider = "DISCORD"
	AuthProviderKAKAO   AuthProvider = "KAKAO"
)

func AllAuthProvider() []AuthProvider {
	return []AuthProvider{
		AuthProviderGOOGLE,
		AuthProviderDISCORD,
		AuthProviderKAKAO,
	}
}

func (e AuthProvider) IsValid() error {
	switch e {
	case AuthProviderGOOGLE, AuthProviderDISCORD, AuthProviderKAKAO:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e AuthProvider) String() string {
	return string(e)
}

func (e AuthProvider) Ordinal() int {
	switch e {
	case AuthProviderGOOGLE:
		return 0
	case AuthProviderDISCORD:
		return 1
	case AuthProviderKAKAO:
		return 2

	default:
		panic(errors.New("enum is not valid"))
	}
}

type UserRole string

// Enum values for UserRole
const (
	UserRoleOWNER UserRole = "OWNER"
	UserRoleADMIN UserRole = "ADMIN"
	UserRoleUSER  UserRole = "USER"
)

func AllUserRole() []UserRole {
	return []UserRole{
		UserRoleOWNER,
		UserRoleADMIN,
		UserRoleUSER,
	}
}

func (e UserRole) IsValid() error {
	switch e {
	case UserRoleOWNER, UserRoleADMIN, UserRoleUSER:
		return nil
	default:
		return errors.New("enum is not valid")
	}
}

func (e UserRole) String() string {
	return string(e)
}

func (e UserRole) Ordinal() int {
	switch e {
	case UserRoleOWNER:
		return 0
	case UserRoleADMIN:
		return 1
	case UserRoleUSER:
		return 2

	default:
		panic(errors.New("enum is not valid"))
	}
}
