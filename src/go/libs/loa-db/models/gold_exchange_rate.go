// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// GoldExchangeRate is an object representing the database table.
type GoldExchangeRate struct {
	ID         int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt  time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt  time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	KRWAmount  int       `boil:"krw_amount" json:"krw_amount" toml:"krw_amount" yaml:"krw_amount"`
	GoldAmount int       `boil:"gold_amount" json:"gold_amount" toml:"gold_amount" yaml:"gold_amount"`

	R *goldExchangeRateR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L goldExchangeRateL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GoldExchangeRateColumns = struct {
	ID         string
	CreatedAt  string
	UpdatedAt  string
	KRWAmount  string
	GoldAmount string
}{
	ID:         "id",
	CreatedAt:  "created_at",
	UpdatedAt:  "updated_at",
	KRWAmount:  "krw_amount",
	GoldAmount: "gold_amount",
}

var GoldExchangeRateTableColumns = struct {
	ID         string
	CreatedAt  string
	UpdatedAt  string
	KRWAmount  string
	GoldAmount string
}{
	ID:         "gold_exchange_rate.id",
	CreatedAt:  "gold_exchange_rate.created_at",
	UpdatedAt:  "gold_exchange_rate.updated_at",
	KRWAmount:  "gold_exchange_rate.krw_amount",
	GoldAmount: "gold_exchange_rate.gold_amount",
}

// Generated where

var GoldExchangeRateWhere = struct {
	ID         whereHelperint
	CreatedAt  whereHelpertime_Time
	UpdatedAt  whereHelpertime_Time
	KRWAmount  whereHelperint
	GoldAmount whereHelperint
}{
	ID:         whereHelperint{field: "\"gold_exchange_rate\".\"id\""},
	CreatedAt:  whereHelpertime_Time{field: "\"gold_exchange_rate\".\"created_at\""},
	UpdatedAt:  whereHelpertime_Time{field: "\"gold_exchange_rate\".\"updated_at\""},
	KRWAmount:  whereHelperint{field: "\"gold_exchange_rate\".\"krw_amount\""},
	GoldAmount: whereHelperint{field: "\"gold_exchange_rate\".\"gold_amount\""},
}

// GoldExchangeRateRels is where relationship names are stored.
var GoldExchangeRateRels = struct {
}{}

// goldExchangeRateR is where relationships are stored.
type goldExchangeRateR struct {
}

// NewStruct creates a new relationship struct
func (*goldExchangeRateR) NewStruct() *goldExchangeRateR {
	return &goldExchangeRateR{}
}

// goldExchangeRateL is where Load methods for each relationship are stored.
type goldExchangeRateL struct{}

var (
	goldExchangeRateAllColumns            = []string{"id", "created_at", "updated_at", "krw_amount", "gold_amount"}
	goldExchangeRateColumnsWithoutDefault = []string{"updated_at", "krw_amount", "gold_amount"}
	goldExchangeRateColumnsWithDefault    = []string{"id", "created_at"}
	goldExchangeRatePrimaryKeyColumns     = []string{"id"}
	goldExchangeRateGeneratedColumns      = []string{}
)

type (
	// GoldExchangeRateSlice is an alias for a slice of pointers to GoldExchangeRate.
	// This should almost always be used instead of []GoldExchangeRate.
	GoldExchangeRateSlice []*GoldExchangeRate
	// GoldExchangeRateHook is the signature for custom GoldExchangeRate hook methods
	GoldExchangeRateHook func(context.Context, boil.ContextExecutor, *GoldExchangeRate) error

	goldExchangeRateQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	goldExchangeRateType                 = reflect.TypeOf(&GoldExchangeRate{})
	goldExchangeRateMapping              = queries.MakeStructMapping(goldExchangeRateType)
	goldExchangeRatePrimaryKeyMapping, _ = queries.BindMapping(goldExchangeRateType, goldExchangeRateMapping, goldExchangeRatePrimaryKeyColumns)
	goldExchangeRateInsertCacheMut       sync.RWMutex
	goldExchangeRateInsertCache          = make(map[string]insertCache)
	goldExchangeRateUpdateCacheMut       sync.RWMutex
	goldExchangeRateUpdateCache          = make(map[string]updateCache)
	goldExchangeRateUpsertCacheMut       sync.RWMutex
	goldExchangeRateUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var goldExchangeRateAfterSelectMu sync.Mutex
var goldExchangeRateAfterSelectHooks []GoldExchangeRateHook

var goldExchangeRateBeforeInsertMu sync.Mutex
var goldExchangeRateBeforeInsertHooks []GoldExchangeRateHook
var goldExchangeRateAfterInsertMu sync.Mutex
var goldExchangeRateAfterInsertHooks []GoldExchangeRateHook

var goldExchangeRateBeforeUpdateMu sync.Mutex
var goldExchangeRateBeforeUpdateHooks []GoldExchangeRateHook
var goldExchangeRateAfterUpdateMu sync.Mutex
var goldExchangeRateAfterUpdateHooks []GoldExchangeRateHook

var goldExchangeRateBeforeDeleteMu sync.Mutex
var goldExchangeRateBeforeDeleteHooks []GoldExchangeRateHook
var goldExchangeRateAfterDeleteMu sync.Mutex
var goldExchangeRateAfterDeleteHooks []GoldExchangeRateHook

var goldExchangeRateBeforeUpsertMu sync.Mutex
var goldExchangeRateBeforeUpsertHooks []GoldExchangeRateHook
var goldExchangeRateAfterUpsertMu sync.Mutex
var goldExchangeRateAfterUpsertHooks []GoldExchangeRateHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *GoldExchangeRate) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goldExchangeRateAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *GoldExchangeRate) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goldExchangeRateBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *GoldExchangeRate) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goldExchangeRateAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *GoldExchangeRate) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goldExchangeRateBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *GoldExchangeRate) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goldExchangeRateAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *GoldExchangeRate) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goldExchangeRateBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *GoldExchangeRate) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goldExchangeRateAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *GoldExchangeRate) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goldExchangeRateBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *GoldExchangeRate) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goldExchangeRateAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGoldExchangeRateHook registers your hook function for all future operations.
func AddGoldExchangeRateHook(hookPoint boil.HookPoint, goldExchangeRateHook GoldExchangeRateHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		goldExchangeRateAfterSelectMu.Lock()
		goldExchangeRateAfterSelectHooks = append(goldExchangeRateAfterSelectHooks, goldExchangeRateHook)
		goldExchangeRateAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		goldExchangeRateBeforeInsertMu.Lock()
		goldExchangeRateBeforeInsertHooks = append(goldExchangeRateBeforeInsertHooks, goldExchangeRateHook)
		goldExchangeRateBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		goldExchangeRateAfterInsertMu.Lock()
		goldExchangeRateAfterInsertHooks = append(goldExchangeRateAfterInsertHooks, goldExchangeRateHook)
		goldExchangeRateAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		goldExchangeRateBeforeUpdateMu.Lock()
		goldExchangeRateBeforeUpdateHooks = append(goldExchangeRateBeforeUpdateHooks, goldExchangeRateHook)
		goldExchangeRateBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		goldExchangeRateAfterUpdateMu.Lock()
		goldExchangeRateAfterUpdateHooks = append(goldExchangeRateAfterUpdateHooks, goldExchangeRateHook)
		goldExchangeRateAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		goldExchangeRateBeforeDeleteMu.Lock()
		goldExchangeRateBeforeDeleteHooks = append(goldExchangeRateBeforeDeleteHooks, goldExchangeRateHook)
		goldExchangeRateBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		goldExchangeRateAfterDeleteMu.Lock()
		goldExchangeRateAfterDeleteHooks = append(goldExchangeRateAfterDeleteHooks, goldExchangeRateHook)
		goldExchangeRateAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		goldExchangeRateBeforeUpsertMu.Lock()
		goldExchangeRateBeforeUpsertHooks = append(goldExchangeRateBeforeUpsertHooks, goldExchangeRateHook)
		goldExchangeRateBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		goldExchangeRateAfterUpsertMu.Lock()
		goldExchangeRateAfterUpsertHooks = append(goldExchangeRateAfterUpsertHooks, goldExchangeRateHook)
		goldExchangeRateAfterUpsertMu.Unlock()
	}
}

// OneG returns a single goldExchangeRate record from the query using the global executor.
func (q goldExchangeRateQuery) OneG(ctx context.Context) (*GoldExchangeRate, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single goldExchangeRate record from the query.
func (q goldExchangeRateQuery) One(ctx context.Context, exec boil.ContextExecutor) (*GoldExchangeRate, error) {
	o := &GoldExchangeRate{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for gold_exchange_rate")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all GoldExchangeRate records from the query using the global executor.
func (q goldExchangeRateQuery) AllG(ctx context.Context) (GoldExchangeRateSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all GoldExchangeRate records from the query.
func (q goldExchangeRateQuery) All(ctx context.Context, exec boil.ContextExecutor) (GoldExchangeRateSlice, error) {
	var o []*GoldExchangeRate

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to GoldExchangeRate slice")
	}

	if len(goldExchangeRateAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all GoldExchangeRate records in the query using the global executor
func (q goldExchangeRateQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all GoldExchangeRate records in the query.
func (q goldExchangeRateQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count gold_exchange_rate rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q goldExchangeRateQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q goldExchangeRateQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if gold_exchange_rate exists")
	}

	return count > 0, nil
}

// GoldExchangeRates retrieves all the records using an executor.
func GoldExchangeRates(mods ...qm.QueryMod) goldExchangeRateQuery {
	mods = append(mods, qm.From("\"gold_exchange_rate\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"gold_exchange_rate\".*"})
	}

	return goldExchangeRateQuery{q}
}

// FindGoldExchangeRateG retrieves a single record by ID.
func FindGoldExchangeRateG(ctx context.Context, iD int, selectCols ...string) (*GoldExchangeRate, error) {
	return FindGoldExchangeRate(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindGoldExchangeRate retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGoldExchangeRate(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*GoldExchangeRate, error) {
	goldExchangeRateObj := &GoldExchangeRate{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"gold_exchange_rate\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, goldExchangeRateObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from gold_exchange_rate")
	}

	if err = goldExchangeRateObj.doAfterSelectHooks(ctx, exec); err != nil {
		return goldExchangeRateObj, err
	}

	return goldExchangeRateObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *GoldExchangeRate) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *GoldExchangeRate) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no gold_exchange_rate provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(goldExchangeRateColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	goldExchangeRateInsertCacheMut.RLock()
	cache, cached := goldExchangeRateInsertCache[key]
	goldExchangeRateInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			goldExchangeRateAllColumns,
			goldExchangeRateColumnsWithDefault,
			goldExchangeRateColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(goldExchangeRateType, goldExchangeRateMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(goldExchangeRateType, goldExchangeRateMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"gold_exchange_rate\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"gold_exchange_rate\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into gold_exchange_rate")
	}

	if !cached {
		goldExchangeRateInsertCacheMut.Lock()
		goldExchangeRateInsertCache[key] = cache
		goldExchangeRateInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single GoldExchangeRate record using the global executor.
// See Update for more documentation.
func (o *GoldExchangeRate) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the GoldExchangeRate.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *GoldExchangeRate) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	goldExchangeRateUpdateCacheMut.RLock()
	cache, cached := goldExchangeRateUpdateCache[key]
	goldExchangeRateUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			goldExchangeRateAllColumns,
			goldExchangeRatePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update gold_exchange_rate, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"gold_exchange_rate\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, goldExchangeRatePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(goldExchangeRateType, goldExchangeRateMapping, append(wl, goldExchangeRatePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update gold_exchange_rate row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for gold_exchange_rate")
	}

	if !cached {
		goldExchangeRateUpdateCacheMut.Lock()
		goldExchangeRateUpdateCache[key] = cache
		goldExchangeRateUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q goldExchangeRateQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q goldExchangeRateQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for gold_exchange_rate")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for gold_exchange_rate")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o GoldExchangeRateSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GoldExchangeRateSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), goldExchangeRatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"gold_exchange_rate\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, goldExchangeRatePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in goldExchangeRate slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all goldExchangeRate")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *GoldExchangeRate) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *GoldExchangeRate) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no gold_exchange_rate provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(goldExchangeRateColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	goldExchangeRateUpsertCacheMut.RLock()
	cache, cached := goldExchangeRateUpsertCache[key]
	goldExchangeRateUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			goldExchangeRateAllColumns,
			goldExchangeRateColumnsWithDefault,
			goldExchangeRateColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			goldExchangeRateAllColumns,
			goldExchangeRatePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert gold_exchange_rate, could not build update column list")
		}

		ret := strmangle.SetComplement(goldExchangeRateAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(goldExchangeRatePrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert gold_exchange_rate, could not build conflict column list")
			}

			conflict = make([]string, len(goldExchangeRatePrimaryKeyColumns))
			copy(conflict, goldExchangeRatePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"gold_exchange_rate\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(goldExchangeRateType, goldExchangeRateMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(goldExchangeRateType, goldExchangeRateMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert gold_exchange_rate")
	}

	if !cached {
		goldExchangeRateUpsertCacheMut.Lock()
		goldExchangeRateUpsertCache[key] = cache
		goldExchangeRateUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single GoldExchangeRate record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *GoldExchangeRate) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single GoldExchangeRate record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *GoldExchangeRate) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no GoldExchangeRate provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), goldExchangeRatePrimaryKeyMapping)
	sql := "DELETE FROM \"gold_exchange_rate\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from gold_exchange_rate")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for gold_exchange_rate")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q goldExchangeRateQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q goldExchangeRateQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no goldExchangeRateQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from gold_exchange_rate")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for gold_exchange_rate")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o GoldExchangeRateSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GoldExchangeRateSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(goldExchangeRateBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), goldExchangeRatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"gold_exchange_rate\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, goldExchangeRatePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from goldExchangeRate slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for gold_exchange_rate")
	}

	if len(goldExchangeRateAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *GoldExchangeRate) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no GoldExchangeRate provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *GoldExchangeRate) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindGoldExchangeRate(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GoldExchangeRateSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty GoldExchangeRateSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GoldExchangeRateSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GoldExchangeRateSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), goldExchangeRatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"gold_exchange_rate\".* FROM \"gold_exchange_rate\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, goldExchangeRatePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in GoldExchangeRateSlice")
	}

	*o = slice

	return nil
}

// GoldExchangeRateExistsG checks if the GoldExchangeRate row exists.
func GoldExchangeRateExistsG(ctx context.Context, iD int) (bool, error) {
	return GoldExchangeRateExists(ctx, boil.GetContextDB(), iD)
}

// GoldExchangeRateExists checks if the GoldExchangeRate row exists.
func GoldExchangeRateExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"gold_exchange_rate\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if gold_exchange_rate exists")
	}

	return exists, nil
}

// Exists checks if the GoldExchangeRate row exists.
func (o *GoldExchangeRate) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return GoldExchangeRateExists(ctx, exec, o.ID)
}
