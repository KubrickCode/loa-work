// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// MarketItemCategory is an object representing the database table.
type MarketItemCategory struct {
	ID                   int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt            time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt            time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	Code                 int       `boil:"code" json:"code" toml:"code" yaml:"code"`
	Name                 string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	IsItemScraperEnabled bool      `boil:"is_item_scraper_enabled" json:"is_item_scraper_enabled" toml:"is_item_scraper_enabled" yaml:"is_item_scraper_enabled"`

	R *marketItemCategoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L marketItemCategoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MarketItemCategoryColumns = struct {
	ID                   string
	CreatedAt            string
	UpdatedAt            string
	Code                 string
	Name                 string
	IsItemScraperEnabled string
}{
	ID:                   "id",
	CreatedAt:            "created_at",
	UpdatedAt:            "updated_at",
	Code:                 "code",
	Name:                 "name",
	IsItemScraperEnabled: "is_item_scraper_enabled",
}

var MarketItemCategoryTableColumns = struct {
	ID                   string
	CreatedAt            string
	UpdatedAt            string
	Code                 string
	Name                 string
	IsItemScraperEnabled string
}{
	ID:                   "market_item_category.id",
	CreatedAt:            "market_item_category.created_at",
	UpdatedAt:            "market_item_category.updated_at",
	Code:                 "market_item_category.code",
	Name:                 "market_item_category.name",
	IsItemScraperEnabled: "market_item_category.is_item_scraper_enabled",
}

// Generated where

var MarketItemCategoryWhere = struct {
	ID                   whereHelperint
	CreatedAt            whereHelpertime_Time
	UpdatedAt            whereHelpertime_Time
	Code                 whereHelperint
	Name                 whereHelperstring
	IsItemScraperEnabled whereHelperbool
}{
	ID:                   whereHelperint{field: "\"market_item_category\".\"id\""},
	CreatedAt:            whereHelpertime_Time{field: "\"market_item_category\".\"created_at\""},
	UpdatedAt:            whereHelpertime_Time{field: "\"market_item_category\".\"updated_at\""},
	Code:                 whereHelperint{field: "\"market_item_category\".\"code\""},
	Name:                 whereHelperstring{field: "\"market_item_category\".\"name\""},
	IsItemScraperEnabled: whereHelperbool{field: "\"market_item_category\".\"is_item_scraper_enabled\""},
}

// MarketItemCategoryRels is where relationship names are stored.
var MarketItemCategoryRels = struct {
	MarketItems string
}{
	MarketItems: "MarketItems",
}

// marketItemCategoryR is where relationships are stored.
type marketItemCategoryR struct {
	MarketItems MarketItemSlice `boil:"MarketItems" json:"MarketItems" toml:"MarketItems" yaml:"MarketItems"`
}

// NewStruct creates a new relationship struct
func (*marketItemCategoryR) NewStruct() *marketItemCategoryR {
	return &marketItemCategoryR{}
}

func (o *MarketItemCategory) GetMarketItems() MarketItemSlice {
	if o == nil {
		return nil
	}

	return o.R.GetMarketItems()
}

func (r *marketItemCategoryR) GetMarketItems() MarketItemSlice {
	if r == nil {
		return nil
	}

	return r.MarketItems
}

// marketItemCategoryL is where Load methods for each relationship are stored.
type marketItemCategoryL struct{}

var (
	marketItemCategoryAllColumns            = []string{"id", "created_at", "updated_at", "code", "name", "is_item_scraper_enabled"}
	marketItemCategoryColumnsWithoutDefault = []string{"updated_at", "code", "name"}
	marketItemCategoryColumnsWithDefault    = []string{"id", "created_at", "is_item_scraper_enabled"}
	marketItemCategoryPrimaryKeyColumns     = []string{"id"}
	marketItemCategoryGeneratedColumns      = []string{}
)

type (
	// MarketItemCategorySlice is an alias for a slice of pointers to MarketItemCategory.
	// This should almost always be used instead of []MarketItemCategory.
	MarketItemCategorySlice []*MarketItemCategory
	// MarketItemCategoryHook is the signature for custom MarketItemCategory hook methods
	MarketItemCategoryHook func(context.Context, boil.ContextExecutor, *MarketItemCategory) error

	marketItemCategoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	marketItemCategoryType                 = reflect.TypeOf(&MarketItemCategory{})
	marketItemCategoryMapping              = queries.MakeStructMapping(marketItemCategoryType)
	marketItemCategoryPrimaryKeyMapping, _ = queries.BindMapping(marketItemCategoryType, marketItemCategoryMapping, marketItemCategoryPrimaryKeyColumns)
	marketItemCategoryInsertCacheMut       sync.RWMutex
	marketItemCategoryInsertCache          = make(map[string]insertCache)
	marketItemCategoryUpdateCacheMut       sync.RWMutex
	marketItemCategoryUpdateCache          = make(map[string]updateCache)
	marketItemCategoryUpsertCacheMut       sync.RWMutex
	marketItemCategoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var marketItemCategoryAfterSelectMu sync.Mutex
var marketItemCategoryAfterSelectHooks []MarketItemCategoryHook

var marketItemCategoryBeforeInsertMu sync.Mutex
var marketItemCategoryBeforeInsertHooks []MarketItemCategoryHook
var marketItemCategoryAfterInsertMu sync.Mutex
var marketItemCategoryAfterInsertHooks []MarketItemCategoryHook

var marketItemCategoryBeforeUpdateMu sync.Mutex
var marketItemCategoryBeforeUpdateHooks []MarketItemCategoryHook
var marketItemCategoryAfterUpdateMu sync.Mutex
var marketItemCategoryAfterUpdateHooks []MarketItemCategoryHook

var marketItemCategoryBeforeDeleteMu sync.Mutex
var marketItemCategoryBeforeDeleteHooks []MarketItemCategoryHook
var marketItemCategoryAfterDeleteMu sync.Mutex
var marketItemCategoryAfterDeleteHooks []MarketItemCategoryHook

var marketItemCategoryBeforeUpsertMu sync.Mutex
var marketItemCategoryBeforeUpsertHooks []MarketItemCategoryHook
var marketItemCategoryAfterUpsertMu sync.Mutex
var marketItemCategoryAfterUpsertHooks []MarketItemCategoryHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MarketItemCategory) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range marketItemCategoryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MarketItemCategory) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range marketItemCategoryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MarketItemCategory) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range marketItemCategoryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MarketItemCategory) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range marketItemCategoryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MarketItemCategory) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range marketItemCategoryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MarketItemCategory) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range marketItemCategoryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MarketItemCategory) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range marketItemCategoryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MarketItemCategory) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range marketItemCategoryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MarketItemCategory) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range marketItemCategoryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMarketItemCategoryHook registers your hook function for all future operations.
func AddMarketItemCategoryHook(hookPoint boil.HookPoint, marketItemCategoryHook MarketItemCategoryHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		marketItemCategoryAfterSelectMu.Lock()
		marketItemCategoryAfterSelectHooks = append(marketItemCategoryAfterSelectHooks, marketItemCategoryHook)
		marketItemCategoryAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		marketItemCategoryBeforeInsertMu.Lock()
		marketItemCategoryBeforeInsertHooks = append(marketItemCategoryBeforeInsertHooks, marketItemCategoryHook)
		marketItemCategoryBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		marketItemCategoryAfterInsertMu.Lock()
		marketItemCategoryAfterInsertHooks = append(marketItemCategoryAfterInsertHooks, marketItemCategoryHook)
		marketItemCategoryAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		marketItemCategoryBeforeUpdateMu.Lock()
		marketItemCategoryBeforeUpdateHooks = append(marketItemCategoryBeforeUpdateHooks, marketItemCategoryHook)
		marketItemCategoryBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		marketItemCategoryAfterUpdateMu.Lock()
		marketItemCategoryAfterUpdateHooks = append(marketItemCategoryAfterUpdateHooks, marketItemCategoryHook)
		marketItemCategoryAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		marketItemCategoryBeforeDeleteMu.Lock()
		marketItemCategoryBeforeDeleteHooks = append(marketItemCategoryBeforeDeleteHooks, marketItemCategoryHook)
		marketItemCategoryBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		marketItemCategoryAfterDeleteMu.Lock()
		marketItemCategoryAfterDeleteHooks = append(marketItemCategoryAfterDeleteHooks, marketItemCategoryHook)
		marketItemCategoryAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		marketItemCategoryBeforeUpsertMu.Lock()
		marketItemCategoryBeforeUpsertHooks = append(marketItemCategoryBeforeUpsertHooks, marketItemCategoryHook)
		marketItemCategoryBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		marketItemCategoryAfterUpsertMu.Lock()
		marketItemCategoryAfterUpsertHooks = append(marketItemCategoryAfterUpsertHooks, marketItemCategoryHook)
		marketItemCategoryAfterUpsertMu.Unlock()
	}
}

// OneG returns a single marketItemCategory record from the query using the global executor.
func (q marketItemCategoryQuery) OneG(ctx context.Context) (*MarketItemCategory, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single marketItemCategory record from the query.
func (q marketItemCategoryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MarketItemCategory, error) {
	o := &MarketItemCategory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for market_item_category")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all MarketItemCategory records from the query using the global executor.
func (q marketItemCategoryQuery) AllG(ctx context.Context) (MarketItemCategorySlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all MarketItemCategory records from the query.
func (q marketItemCategoryQuery) All(ctx context.Context, exec boil.ContextExecutor) (MarketItemCategorySlice, error) {
	var o []*MarketItemCategory

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to MarketItemCategory slice")
	}

	if len(marketItemCategoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all MarketItemCategory records in the query using the global executor
func (q marketItemCategoryQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all MarketItemCategory records in the query.
func (q marketItemCategoryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count market_item_category rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q marketItemCategoryQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q marketItemCategoryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if market_item_category exists")
	}

	return count > 0, nil
}

// MarketItems retrieves all the market_item's MarketItems with an executor.
func (o *MarketItemCategory) MarketItems(mods ...qm.QueryMod) marketItemQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"market_item\".\"market_item_category_id\"=?", o.ID),
	)

	return MarketItems(queryMods...)
}

// LoadMarketItems allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (marketItemCategoryL) LoadMarketItems(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMarketItemCategory interface{}, mods queries.Applicator) error {
	var slice []*MarketItemCategory
	var object *MarketItemCategory

	if singular {
		var ok bool
		object, ok = maybeMarketItemCategory.(*MarketItemCategory)
		if !ok {
			object = new(MarketItemCategory)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMarketItemCategory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMarketItemCategory))
			}
		}
	} else {
		s, ok := maybeMarketItemCategory.(*[]*MarketItemCategory)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMarketItemCategory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMarketItemCategory))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &marketItemCategoryR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &marketItemCategoryR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`market_item`),
		qm.WhereIn(`market_item.market_item_category_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load market_item")
	}

	var resultSlice []*MarketItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice market_item")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on market_item")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for market_item")
	}

	if len(marketItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.MarketItems = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &marketItemR{}
			}
			foreign.R.MarketItemCategory = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.MarketItemCategoryID {
				local.R.MarketItems = append(local.R.MarketItems, foreign)
				if foreign.R == nil {
					foreign.R = &marketItemR{}
				}
				foreign.R.MarketItemCategory = local
				break
			}
		}
	}

	return nil
}

// AddMarketItemsG adds the given related objects to the existing relationships
// of the market_item_category, optionally inserting them as new records.
// Appends related to o.R.MarketItems.
// Sets related.R.MarketItemCategory appropriately.
// Uses the global database handle.
func (o *MarketItemCategory) AddMarketItemsG(ctx context.Context, insert bool, related ...*MarketItem) error {
	return o.AddMarketItems(ctx, boil.GetContextDB(), insert, related...)
}

// AddMarketItems adds the given related objects to the existing relationships
// of the market_item_category, optionally inserting them as new records.
// Appends related to o.R.MarketItems.
// Sets related.R.MarketItemCategory appropriately.
func (o *MarketItemCategory) AddMarketItems(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*MarketItem) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.MarketItemCategoryID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"market_item\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"market_item_category_id"}),
				strmangle.WhereClause("\"", "\"", 2, marketItemPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.MarketItemCategoryID = o.ID
		}
	}

	if o.R == nil {
		o.R = &marketItemCategoryR{
			MarketItems: related,
		}
	} else {
		o.R.MarketItems = append(o.R.MarketItems, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &marketItemR{
				MarketItemCategory: o,
			}
		} else {
			rel.R.MarketItemCategory = o
		}
	}
	return nil
}

// MarketItemCategories retrieves all the records using an executor.
func MarketItemCategories(mods ...qm.QueryMod) marketItemCategoryQuery {
	mods = append(mods, qm.From("\"market_item_category\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"market_item_category\".*"})
	}

	return marketItemCategoryQuery{q}
}

// FindMarketItemCategoryG retrieves a single record by ID.
func FindMarketItemCategoryG(ctx context.Context, iD int, selectCols ...string) (*MarketItemCategory, error) {
	return FindMarketItemCategory(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindMarketItemCategory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMarketItemCategory(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*MarketItemCategory, error) {
	marketItemCategoryObj := &MarketItemCategory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"market_item_category\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, marketItemCategoryObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from market_item_category")
	}

	if err = marketItemCategoryObj.doAfterSelectHooks(ctx, exec); err != nil {
		return marketItemCategoryObj, err
	}

	return marketItemCategoryObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *MarketItemCategory) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MarketItemCategory) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no market_item_category provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(marketItemCategoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	marketItemCategoryInsertCacheMut.RLock()
	cache, cached := marketItemCategoryInsertCache[key]
	marketItemCategoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			marketItemCategoryAllColumns,
			marketItemCategoryColumnsWithDefault,
			marketItemCategoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(marketItemCategoryType, marketItemCategoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(marketItemCategoryType, marketItemCategoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"market_item_category\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"market_item_category\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into market_item_category")
	}

	if !cached {
		marketItemCategoryInsertCacheMut.Lock()
		marketItemCategoryInsertCache[key] = cache
		marketItemCategoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single MarketItemCategory record using the global executor.
// See Update for more documentation.
func (o *MarketItemCategory) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the MarketItemCategory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MarketItemCategory) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	marketItemCategoryUpdateCacheMut.RLock()
	cache, cached := marketItemCategoryUpdateCache[key]
	marketItemCategoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			marketItemCategoryAllColumns,
			marketItemCategoryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update market_item_category, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"market_item_category\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, marketItemCategoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(marketItemCategoryType, marketItemCategoryMapping, append(wl, marketItemCategoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update market_item_category row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for market_item_category")
	}

	if !cached {
		marketItemCategoryUpdateCacheMut.Lock()
		marketItemCategoryUpdateCache[key] = cache
		marketItemCategoryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q marketItemCategoryQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q marketItemCategoryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for market_item_category")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for market_item_category")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o MarketItemCategorySlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MarketItemCategorySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), marketItemCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"market_item_category\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, marketItemCategoryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in marketItemCategory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all marketItemCategory")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *MarketItemCategory) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MarketItemCategory) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no market_item_category provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(marketItemCategoryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	marketItemCategoryUpsertCacheMut.RLock()
	cache, cached := marketItemCategoryUpsertCache[key]
	marketItemCategoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			marketItemCategoryAllColumns,
			marketItemCategoryColumnsWithDefault,
			marketItemCategoryColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			marketItemCategoryAllColumns,
			marketItemCategoryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert market_item_category, could not build update column list")
		}

		ret := strmangle.SetComplement(marketItemCategoryAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(marketItemCategoryPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert market_item_category, could not build conflict column list")
			}

			conflict = make([]string, len(marketItemCategoryPrimaryKeyColumns))
			copy(conflict, marketItemCategoryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"market_item_category\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(marketItemCategoryType, marketItemCategoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(marketItemCategoryType, marketItemCategoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert market_item_category")
	}

	if !cached {
		marketItemCategoryUpsertCacheMut.Lock()
		marketItemCategoryUpsertCache[key] = cache
		marketItemCategoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single MarketItemCategory record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *MarketItemCategory) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single MarketItemCategory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MarketItemCategory) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MarketItemCategory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), marketItemCategoryPrimaryKeyMapping)
	sql := "DELETE FROM \"market_item_category\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from market_item_category")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for market_item_category")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q marketItemCategoryQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q marketItemCategoryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no marketItemCategoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from market_item_category")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for market_item_category")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o MarketItemCategorySlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MarketItemCategorySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(marketItemCategoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), marketItemCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"market_item_category\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, marketItemCategoryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from marketItemCategory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for market_item_category")
	}

	if len(marketItemCategoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *MarketItemCategory) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no MarketItemCategory provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MarketItemCategory) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMarketItemCategory(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MarketItemCategorySlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty MarketItemCategorySlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MarketItemCategorySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MarketItemCategorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), marketItemCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"market_item_category\".* FROM \"market_item_category\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, marketItemCategoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MarketItemCategorySlice")
	}

	*o = slice

	return nil
}

// MarketItemCategoryExistsG checks if the MarketItemCategory row exists.
func MarketItemCategoryExistsG(ctx context.Context, iD int) (bool, error) {
	return MarketItemCategoryExists(ctx, boil.GetContextDB(), iD)
}

// MarketItemCategoryExists checks if the MarketItemCategory row exists.
func MarketItemCategoryExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"market_item_category\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if market_item_category exists")
	}

	return exists, nil
}

// Exists checks if the MarketItemCategory row exists.
func (o *MarketItemCategory) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return MarketItemCategoryExists(ctx, exec, o.ID)
}
