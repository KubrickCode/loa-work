// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// Content is an object representing the database table.
type Content struct {
	ID                int           `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt         time.Time     `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt         time.Time     `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	Name              string        `boil:"name" json:"name" toml:"name" yaml:"name"`
	Level             int           `boil:"level" json:"level" toml:"level" yaml:"level"`
	Gate              null.Int      `boil:"gate" json:"gate,omitempty" toml:"gate" yaml:"gate,omitempty"`
	ContentCategoryID int           `boil:"content_category_id" json:"content_category_id" toml:"content_category_id" yaml:"content_category_id"`
	Status            ContentStatus `boil:"status" json:"status" toml:"status" yaml:"status"`

	R *contentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L contentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ContentColumns = struct {
	ID                string
	CreatedAt         string
	UpdatedAt         string
	Name              string
	Level             string
	Gate              string
	ContentCategoryID string
	Status            string
}{
	ID:                "id",
	CreatedAt:         "created_at",
	UpdatedAt:         "updated_at",
	Name:              "name",
	Level:             "level",
	Gate:              "gate",
	ContentCategoryID: "content_category_id",
	Status:            "status",
}

var ContentTableColumns = struct {
	ID                string
	CreatedAt         string
	UpdatedAt         string
	Name              string
	Level             string
	Gate              string
	ContentCategoryID string
	Status            string
}{
	ID:                "content.id",
	CreatedAt:         "content.created_at",
	UpdatedAt:         "content.updated_at",
	Name:              "content.name",
	Level:             "content.level",
	Gate:              "content.gate",
	ContentCategoryID: "content.content_category_id",
	Status:            "content.status",
}

// Generated where

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelperContentStatus struct{ field string }

func (w whereHelperContentStatus) EQ(x ContentStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperContentStatus) NEQ(x ContentStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperContentStatus) LT(x ContentStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperContentStatus) LTE(x ContentStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperContentStatus) GT(x ContentStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperContentStatus) GTE(x ContentStatus) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperContentStatus) IN(slice []ContentStatus) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperContentStatus) NIN(slice []ContentStatus) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var ContentWhere = struct {
	ID                whereHelperint
	CreatedAt         whereHelpertime_Time
	UpdatedAt         whereHelpertime_Time
	Name              whereHelperstring
	Level             whereHelperint
	Gate              whereHelpernull_Int
	ContentCategoryID whereHelperint
	Status            whereHelperContentStatus
}{
	ID:                whereHelperint{field: "\"content\".\"id\""},
	CreatedAt:         whereHelpertime_Time{field: "\"content\".\"created_at\""},
	UpdatedAt:         whereHelpertime_Time{field: "\"content\".\"updated_at\""},
	Name:              whereHelperstring{field: "\"content\".\"name\""},
	Level:             whereHelperint{field: "\"content\".\"level\""},
	Gate:              whereHelpernull_Int{field: "\"content\".\"gate\""},
	ContentCategoryID: whereHelperint{field: "\"content\".\"content_category_id\""},
	Status:            whereHelperContentStatus{field: "\"content\".\"status\""},
}

// ContentRels is where relationship names are stored.
var ContentRels = struct {
	ContentCategory           string
	ContentDuration           string
	ContentRewards            string
	ContentSeeMoreRewards     string
	UserContentDurations      string
	UserContentRewards        string
	UserContentSeeMoreRewards string
}{
	ContentCategory:           "ContentCategory",
	ContentDuration:           "ContentDuration",
	ContentRewards:            "ContentRewards",
	ContentSeeMoreRewards:     "ContentSeeMoreRewards",
	UserContentDurations:      "UserContentDurations",
	UserContentRewards:        "UserContentRewards",
	UserContentSeeMoreRewards: "UserContentSeeMoreRewards",
}

// contentR is where relationships are stored.
type contentR struct {
	ContentCategory           *ContentCategory              `boil:"ContentCategory" json:"ContentCategory" toml:"ContentCategory" yaml:"ContentCategory"`
	ContentDuration           *ContentDuration              `boil:"ContentDuration" json:"ContentDuration" toml:"ContentDuration" yaml:"ContentDuration"`
	ContentRewards            ContentRewardSlice            `boil:"ContentRewards" json:"ContentRewards" toml:"ContentRewards" yaml:"ContentRewards"`
	ContentSeeMoreRewards     ContentSeeMoreRewardSlice     `boil:"ContentSeeMoreRewards" json:"ContentSeeMoreRewards" toml:"ContentSeeMoreRewards" yaml:"ContentSeeMoreRewards"`
	UserContentDurations      UserContentDurationSlice      `boil:"UserContentDurations" json:"UserContentDurations" toml:"UserContentDurations" yaml:"UserContentDurations"`
	UserContentRewards        UserContentRewardSlice        `boil:"UserContentRewards" json:"UserContentRewards" toml:"UserContentRewards" yaml:"UserContentRewards"`
	UserContentSeeMoreRewards UserContentSeeMoreRewardSlice `boil:"UserContentSeeMoreRewards" json:"UserContentSeeMoreRewards" toml:"UserContentSeeMoreRewards" yaml:"UserContentSeeMoreRewards"`
}

// NewStruct creates a new relationship struct
func (*contentR) NewStruct() *contentR {
	return &contentR{}
}

func (o *Content) GetContentCategory() *ContentCategory {
	if o == nil {
		return nil
	}

	return o.R.GetContentCategory()
}

func (r *contentR) GetContentCategory() *ContentCategory {
	if r == nil {
		return nil
	}

	return r.ContentCategory
}

func (o *Content) GetContentDuration() *ContentDuration {
	if o == nil {
		return nil
	}

	return o.R.GetContentDuration()
}

func (r *contentR) GetContentDuration() *ContentDuration {
	if r == nil {
		return nil
	}

	return r.ContentDuration
}

func (o *Content) GetContentRewards() ContentRewardSlice {
	if o == nil {
		return nil
	}

	return o.R.GetContentRewards()
}

func (r *contentR) GetContentRewards() ContentRewardSlice {
	if r == nil {
		return nil
	}

	return r.ContentRewards
}

func (o *Content) GetContentSeeMoreRewards() ContentSeeMoreRewardSlice {
	if o == nil {
		return nil
	}

	return o.R.GetContentSeeMoreRewards()
}

func (r *contentR) GetContentSeeMoreRewards() ContentSeeMoreRewardSlice {
	if r == nil {
		return nil
	}

	return r.ContentSeeMoreRewards
}

func (o *Content) GetUserContentDurations() UserContentDurationSlice {
	if o == nil {
		return nil
	}

	return o.R.GetUserContentDurations()
}

func (r *contentR) GetUserContentDurations() UserContentDurationSlice {
	if r == nil {
		return nil
	}

	return r.UserContentDurations
}

func (o *Content) GetUserContentRewards() UserContentRewardSlice {
	if o == nil {
		return nil
	}

	return o.R.GetUserContentRewards()
}

func (r *contentR) GetUserContentRewards() UserContentRewardSlice {
	if r == nil {
		return nil
	}

	return r.UserContentRewards
}

func (o *Content) GetUserContentSeeMoreRewards() UserContentSeeMoreRewardSlice {
	if o == nil {
		return nil
	}

	return o.R.GetUserContentSeeMoreRewards()
}

func (r *contentR) GetUserContentSeeMoreRewards() UserContentSeeMoreRewardSlice {
	if r == nil {
		return nil
	}

	return r.UserContentSeeMoreRewards
}

// contentL is where Load methods for each relationship are stored.
type contentL struct{}

var (
	contentAllColumns            = []string{"id", "created_at", "updated_at", "name", "level", "gate", "content_category_id", "status"}
	contentColumnsWithoutDefault = []string{"updated_at", "name", "level", "content_category_id"}
	contentColumnsWithDefault    = []string{"id", "created_at", "gate", "status"}
	contentPrimaryKeyColumns     = []string{"id"}
	contentGeneratedColumns      = []string{}
)

type (
	// ContentSlice is an alias for a slice of pointers to Content.
	// This should almost always be used instead of []Content.
	ContentSlice []*Content
	// ContentHook is the signature for custom Content hook methods
	ContentHook func(context.Context, boil.ContextExecutor, *Content) error

	contentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	contentType                 = reflect.TypeOf(&Content{})
	contentMapping              = queries.MakeStructMapping(contentType)
	contentPrimaryKeyMapping, _ = queries.BindMapping(contentType, contentMapping, contentPrimaryKeyColumns)
	contentInsertCacheMut       sync.RWMutex
	contentInsertCache          = make(map[string]insertCache)
	contentUpdateCacheMut       sync.RWMutex
	contentUpdateCache          = make(map[string]updateCache)
	contentUpsertCacheMut       sync.RWMutex
	contentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var contentAfterSelectMu sync.Mutex
var contentAfterSelectHooks []ContentHook

var contentBeforeInsertMu sync.Mutex
var contentBeforeInsertHooks []ContentHook
var contentAfterInsertMu sync.Mutex
var contentAfterInsertHooks []ContentHook

var contentBeforeUpdateMu sync.Mutex
var contentBeforeUpdateHooks []ContentHook
var contentAfterUpdateMu sync.Mutex
var contentAfterUpdateHooks []ContentHook

var contentBeforeDeleteMu sync.Mutex
var contentBeforeDeleteHooks []ContentHook
var contentAfterDeleteMu sync.Mutex
var contentAfterDeleteHooks []ContentHook

var contentBeforeUpsertMu sync.Mutex
var contentBeforeUpsertHooks []ContentHook
var contentAfterUpsertMu sync.Mutex
var contentAfterUpsertHooks []ContentHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Content) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contentAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Content) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contentBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Content) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contentAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Content) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contentBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Content) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contentAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Content) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contentBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Content) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contentAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Content) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contentBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Content) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contentAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddContentHook registers your hook function for all future operations.
func AddContentHook(hookPoint boil.HookPoint, contentHook ContentHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		contentAfterSelectMu.Lock()
		contentAfterSelectHooks = append(contentAfterSelectHooks, contentHook)
		contentAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		contentBeforeInsertMu.Lock()
		contentBeforeInsertHooks = append(contentBeforeInsertHooks, contentHook)
		contentBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		contentAfterInsertMu.Lock()
		contentAfterInsertHooks = append(contentAfterInsertHooks, contentHook)
		contentAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		contentBeforeUpdateMu.Lock()
		contentBeforeUpdateHooks = append(contentBeforeUpdateHooks, contentHook)
		contentBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		contentAfterUpdateMu.Lock()
		contentAfterUpdateHooks = append(contentAfterUpdateHooks, contentHook)
		contentAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		contentBeforeDeleteMu.Lock()
		contentBeforeDeleteHooks = append(contentBeforeDeleteHooks, contentHook)
		contentBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		contentAfterDeleteMu.Lock()
		contentAfterDeleteHooks = append(contentAfterDeleteHooks, contentHook)
		contentAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		contentBeforeUpsertMu.Lock()
		contentBeforeUpsertHooks = append(contentBeforeUpsertHooks, contentHook)
		contentBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		contentAfterUpsertMu.Lock()
		contentAfterUpsertHooks = append(contentAfterUpsertHooks, contentHook)
		contentAfterUpsertMu.Unlock()
	}
}

// OneG returns a single content record from the query using the global executor.
func (q contentQuery) OneG(ctx context.Context) (*Content, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single content record from the query.
func (q contentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Content, error) {
	o := &Content{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for content")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Content records from the query using the global executor.
func (q contentQuery) AllG(ctx context.Context) (ContentSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Content records from the query.
func (q contentQuery) All(ctx context.Context, exec boil.ContextExecutor) (ContentSlice, error) {
	var o []*Content

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Content slice")
	}

	if len(contentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Content records in the query using the global executor
func (q contentQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Content records in the query.
func (q contentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count content rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q contentQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q contentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if content exists")
	}

	return count > 0, nil
}

// ContentCategory pointed to by the foreign key.
func (o *Content) ContentCategory(mods ...qm.QueryMod) contentCategoryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ContentCategoryID),
	}

	queryMods = append(queryMods, mods...)

	return ContentCategories(queryMods...)
}

// ContentDuration pointed to by the foreign key.
func (o *Content) ContentDuration(mods ...qm.QueryMod) contentDurationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"content_id\" = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	return ContentDurations(queryMods...)
}

// ContentRewards retrieves all the content_reward's ContentRewards with an executor.
func (o *Content) ContentRewards(mods ...qm.QueryMod) contentRewardQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"content_reward\".\"content_id\"=?", o.ID),
	)

	return ContentRewards(queryMods...)
}

// ContentSeeMoreRewards retrieves all the content_see_more_reward's ContentSeeMoreRewards with an executor.
func (o *Content) ContentSeeMoreRewards(mods ...qm.QueryMod) contentSeeMoreRewardQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"content_see_more_reward\".\"content_id\"=?", o.ID),
	)

	return ContentSeeMoreRewards(queryMods...)
}

// UserContentDurations retrieves all the user_content_duration's UserContentDurations with an executor.
func (o *Content) UserContentDurations(mods ...qm.QueryMod) userContentDurationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_content_duration\".\"content_id\"=?", o.ID),
	)

	return UserContentDurations(queryMods...)
}

// UserContentRewards retrieves all the user_content_reward's UserContentRewards with an executor.
func (o *Content) UserContentRewards(mods ...qm.QueryMod) userContentRewardQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_content_reward\".\"content_id\"=?", o.ID),
	)

	return UserContentRewards(queryMods...)
}

// UserContentSeeMoreRewards retrieves all the user_content_see_more_reward's UserContentSeeMoreRewards with an executor.
func (o *Content) UserContentSeeMoreRewards(mods ...qm.QueryMod) userContentSeeMoreRewardQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"user_content_see_more_reward\".\"content_id\"=?", o.ID),
	)

	return UserContentSeeMoreRewards(queryMods...)
}

// LoadContentCategory allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (contentL) LoadContentCategory(ctx context.Context, e boil.ContextExecutor, singular bool, maybeContent interface{}, mods queries.Applicator) error {
	var slice []*Content
	var object *Content

	if singular {
		var ok bool
		object, ok = maybeContent.(*Content)
		if !ok {
			object = new(Content)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeContent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeContent))
			}
		}
	} else {
		s, ok := maybeContent.(*[]*Content)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeContent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeContent))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &contentR{}
		}
		args[object.ContentCategoryID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &contentR{}
			}

			args[obj.ContentCategoryID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`content_category`),
		qm.WhereIn(`content_category.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ContentCategory")
	}

	var resultSlice []*ContentCategory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ContentCategory")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for content_category")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for content_category")
	}

	if len(contentCategoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ContentCategory = foreign
		if foreign.R == nil {
			foreign.R = &contentCategoryR{}
		}
		foreign.R.Contents = append(foreign.R.Contents, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ContentCategoryID == foreign.ID {
				local.R.ContentCategory = foreign
				if foreign.R == nil {
					foreign.R = &contentCategoryR{}
				}
				foreign.R.Contents = append(foreign.R.Contents, local)
				break
			}
		}
	}

	return nil
}

// LoadContentDuration allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (contentL) LoadContentDuration(ctx context.Context, e boil.ContextExecutor, singular bool, maybeContent interface{}, mods queries.Applicator) error {
	var slice []*Content
	var object *Content

	if singular {
		var ok bool
		object, ok = maybeContent.(*Content)
		if !ok {
			object = new(Content)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeContent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeContent))
			}
		}
	} else {
		s, ok := maybeContent.(*[]*Content)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeContent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeContent))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &contentR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &contentR{}
			}

			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`content_duration`),
		qm.WhereIn(`content_duration.content_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ContentDuration")
	}

	var resultSlice []*ContentDuration
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ContentDuration")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for content_duration")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for content_duration")
	}

	if len(contentDurationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ContentDuration = foreign
		if foreign.R == nil {
			foreign.R = &contentDurationR{}
		}
		foreign.R.Content = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.ContentID {
				local.R.ContentDuration = foreign
				if foreign.R == nil {
					foreign.R = &contentDurationR{}
				}
				foreign.R.Content = local
				break
			}
		}
	}

	return nil
}

// LoadContentRewards allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (contentL) LoadContentRewards(ctx context.Context, e boil.ContextExecutor, singular bool, maybeContent interface{}, mods queries.Applicator) error {
	var slice []*Content
	var object *Content

	if singular {
		var ok bool
		object, ok = maybeContent.(*Content)
		if !ok {
			object = new(Content)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeContent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeContent))
			}
		}
	} else {
		s, ok := maybeContent.(*[]*Content)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeContent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeContent))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &contentR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &contentR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`content_reward`),
		qm.WhereIn(`content_reward.content_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load content_reward")
	}

	var resultSlice []*ContentReward
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice content_reward")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on content_reward")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for content_reward")
	}

	if len(contentRewardAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ContentRewards = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &contentRewardR{}
			}
			foreign.R.Content = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ContentID {
				local.R.ContentRewards = append(local.R.ContentRewards, foreign)
				if foreign.R == nil {
					foreign.R = &contentRewardR{}
				}
				foreign.R.Content = local
				break
			}
		}
	}

	return nil
}

// LoadContentSeeMoreRewards allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (contentL) LoadContentSeeMoreRewards(ctx context.Context, e boil.ContextExecutor, singular bool, maybeContent interface{}, mods queries.Applicator) error {
	var slice []*Content
	var object *Content

	if singular {
		var ok bool
		object, ok = maybeContent.(*Content)
		if !ok {
			object = new(Content)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeContent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeContent))
			}
		}
	} else {
		s, ok := maybeContent.(*[]*Content)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeContent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeContent))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &contentR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &contentR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`content_see_more_reward`),
		qm.WhereIn(`content_see_more_reward.content_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load content_see_more_reward")
	}

	var resultSlice []*ContentSeeMoreReward
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice content_see_more_reward")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on content_see_more_reward")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for content_see_more_reward")
	}

	if len(contentSeeMoreRewardAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ContentSeeMoreRewards = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &contentSeeMoreRewardR{}
			}
			foreign.R.Content = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ContentID {
				local.R.ContentSeeMoreRewards = append(local.R.ContentSeeMoreRewards, foreign)
				if foreign.R == nil {
					foreign.R = &contentSeeMoreRewardR{}
				}
				foreign.R.Content = local
				break
			}
		}
	}

	return nil
}

// LoadUserContentDurations allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (contentL) LoadUserContentDurations(ctx context.Context, e boil.ContextExecutor, singular bool, maybeContent interface{}, mods queries.Applicator) error {
	var slice []*Content
	var object *Content

	if singular {
		var ok bool
		object, ok = maybeContent.(*Content)
		if !ok {
			object = new(Content)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeContent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeContent))
			}
		}
	} else {
		s, ok := maybeContent.(*[]*Content)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeContent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeContent))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &contentR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &contentR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`user_content_duration`),
		qm.WhereIn(`user_content_duration.content_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_content_duration")
	}

	var resultSlice []*UserContentDuration
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_content_duration")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_content_duration")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_content_duration")
	}

	if len(userContentDurationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserContentDurations = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userContentDurationR{}
			}
			foreign.R.Content = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ContentID {
				local.R.UserContentDurations = append(local.R.UserContentDurations, foreign)
				if foreign.R == nil {
					foreign.R = &userContentDurationR{}
				}
				foreign.R.Content = local
				break
			}
		}
	}

	return nil
}

// LoadUserContentRewards allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (contentL) LoadUserContentRewards(ctx context.Context, e boil.ContextExecutor, singular bool, maybeContent interface{}, mods queries.Applicator) error {
	var slice []*Content
	var object *Content

	if singular {
		var ok bool
		object, ok = maybeContent.(*Content)
		if !ok {
			object = new(Content)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeContent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeContent))
			}
		}
	} else {
		s, ok := maybeContent.(*[]*Content)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeContent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeContent))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &contentR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &contentR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`user_content_reward`),
		qm.WhereIn(`user_content_reward.content_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_content_reward")
	}

	var resultSlice []*UserContentReward
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_content_reward")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_content_reward")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_content_reward")
	}

	if len(userContentRewardAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserContentRewards = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userContentRewardR{}
			}
			foreign.R.Content = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ContentID {
				local.R.UserContentRewards = append(local.R.UserContentRewards, foreign)
				if foreign.R == nil {
					foreign.R = &userContentRewardR{}
				}
				foreign.R.Content = local
				break
			}
		}
	}

	return nil
}

// LoadUserContentSeeMoreRewards allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (contentL) LoadUserContentSeeMoreRewards(ctx context.Context, e boil.ContextExecutor, singular bool, maybeContent interface{}, mods queries.Applicator) error {
	var slice []*Content
	var object *Content

	if singular {
		var ok bool
		object, ok = maybeContent.(*Content)
		if !ok {
			object = new(Content)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeContent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeContent))
			}
		}
	} else {
		s, ok := maybeContent.(*[]*Content)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeContent)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeContent))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &contentR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &contentR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`user_content_see_more_reward`),
		qm.WhereIn(`user_content_see_more_reward.content_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user_content_see_more_reward")
	}

	var resultSlice []*UserContentSeeMoreReward
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user_content_see_more_reward")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user_content_see_more_reward")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_content_see_more_reward")
	}

	if len(userContentSeeMoreRewardAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserContentSeeMoreRewards = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userContentSeeMoreRewardR{}
			}
			foreign.R.Content = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ContentID {
				local.R.UserContentSeeMoreRewards = append(local.R.UserContentSeeMoreRewards, foreign)
				if foreign.R == nil {
					foreign.R = &userContentSeeMoreRewardR{}
				}
				foreign.R.Content = local
				break
			}
		}
	}

	return nil
}

// SetContentCategoryG of the content to the related item.
// Sets o.R.ContentCategory to related.
// Adds o to related.R.Contents.
// Uses the global database handle.
func (o *Content) SetContentCategoryG(ctx context.Context, insert bool, related *ContentCategory) error {
	return o.SetContentCategory(ctx, boil.GetContextDB(), insert, related)
}

// SetContentCategory of the content to the related item.
// Sets o.R.ContentCategory to related.
// Adds o to related.R.Contents.
func (o *Content) SetContentCategory(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ContentCategory) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"content\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"content_category_id"}),
		strmangle.WhereClause("\"", "\"", 2, contentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ContentCategoryID = related.ID
	if o.R == nil {
		o.R = &contentR{
			ContentCategory: related,
		}
	} else {
		o.R.ContentCategory = related
	}

	if related.R == nil {
		related.R = &contentCategoryR{
			Contents: ContentSlice{o},
		}
	} else {
		related.R.Contents = append(related.R.Contents, o)
	}

	return nil
}

// SetContentDurationG of the content to the related item.
// Sets o.R.ContentDuration to related.
// Adds o to related.R.Content.
// Uses the global database handle.
func (o *Content) SetContentDurationG(ctx context.Context, insert bool, related *ContentDuration) error {
	return o.SetContentDuration(ctx, boil.GetContextDB(), insert, related)
}

// SetContentDuration of the content to the related item.
// Sets o.R.ContentDuration to related.
// Adds o to related.R.Content.
func (o *Content) SetContentDuration(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ContentDuration) error {
	var err error

	if insert {
		related.ContentID = o.ID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"content_duration\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"content_id"}),
			strmangle.WhereClause("\"", "\"", 2, contentDurationPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.ContentID = o.ID
	}

	if o.R == nil {
		o.R = &contentR{
			ContentDuration: related,
		}
	} else {
		o.R.ContentDuration = related
	}

	if related.R == nil {
		related.R = &contentDurationR{
			Content: o,
		}
	} else {
		related.R.Content = o
	}
	return nil
}

// AddContentRewardsG adds the given related objects to the existing relationships
// of the content, optionally inserting them as new records.
// Appends related to o.R.ContentRewards.
// Sets related.R.Content appropriately.
// Uses the global database handle.
func (o *Content) AddContentRewardsG(ctx context.Context, insert bool, related ...*ContentReward) error {
	return o.AddContentRewards(ctx, boil.GetContextDB(), insert, related...)
}

// AddContentRewards adds the given related objects to the existing relationships
// of the content, optionally inserting them as new records.
// Appends related to o.R.ContentRewards.
// Sets related.R.Content appropriately.
func (o *Content) AddContentRewards(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ContentReward) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ContentID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"content_reward\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"content_id"}),
				strmangle.WhereClause("\"", "\"", 2, contentRewardPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ContentID = o.ID
		}
	}

	if o.R == nil {
		o.R = &contentR{
			ContentRewards: related,
		}
	} else {
		o.R.ContentRewards = append(o.R.ContentRewards, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &contentRewardR{
				Content: o,
			}
		} else {
			rel.R.Content = o
		}
	}
	return nil
}

// AddContentSeeMoreRewardsG adds the given related objects to the existing relationships
// of the content, optionally inserting them as new records.
// Appends related to o.R.ContentSeeMoreRewards.
// Sets related.R.Content appropriately.
// Uses the global database handle.
func (o *Content) AddContentSeeMoreRewardsG(ctx context.Context, insert bool, related ...*ContentSeeMoreReward) error {
	return o.AddContentSeeMoreRewards(ctx, boil.GetContextDB(), insert, related...)
}

// AddContentSeeMoreRewards adds the given related objects to the existing relationships
// of the content, optionally inserting them as new records.
// Appends related to o.R.ContentSeeMoreRewards.
// Sets related.R.Content appropriately.
func (o *Content) AddContentSeeMoreRewards(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ContentSeeMoreReward) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ContentID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"content_see_more_reward\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"content_id"}),
				strmangle.WhereClause("\"", "\"", 2, contentSeeMoreRewardPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ContentID = o.ID
		}
	}

	if o.R == nil {
		o.R = &contentR{
			ContentSeeMoreRewards: related,
		}
	} else {
		o.R.ContentSeeMoreRewards = append(o.R.ContentSeeMoreRewards, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &contentSeeMoreRewardR{
				Content: o,
			}
		} else {
			rel.R.Content = o
		}
	}
	return nil
}

// AddUserContentDurationsG adds the given related objects to the existing relationships
// of the content, optionally inserting them as new records.
// Appends related to o.R.UserContentDurations.
// Sets related.R.Content appropriately.
// Uses the global database handle.
func (o *Content) AddUserContentDurationsG(ctx context.Context, insert bool, related ...*UserContentDuration) error {
	return o.AddUserContentDurations(ctx, boil.GetContextDB(), insert, related...)
}

// AddUserContentDurations adds the given related objects to the existing relationships
// of the content, optionally inserting them as new records.
// Appends related to o.R.UserContentDurations.
// Sets related.R.Content appropriately.
func (o *Content) AddUserContentDurations(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserContentDuration) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ContentID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_content_duration\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"content_id"}),
				strmangle.WhereClause("\"", "\"", 2, userContentDurationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ContentID = o.ID
		}
	}

	if o.R == nil {
		o.R = &contentR{
			UserContentDurations: related,
		}
	} else {
		o.R.UserContentDurations = append(o.R.UserContentDurations, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userContentDurationR{
				Content: o,
			}
		} else {
			rel.R.Content = o
		}
	}
	return nil
}

// AddUserContentRewardsG adds the given related objects to the existing relationships
// of the content, optionally inserting them as new records.
// Appends related to o.R.UserContentRewards.
// Sets related.R.Content appropriately.
// Uses the global database handle.
func (o *Content) AddUserContentRewardsG(ctx context.Context, insert bool, related ...*UserContentReward) error {
	return o.AddUserContentRewards(ctx, boil.GetContextDB(), insert, related...)
}

// AddUserContentRewards adds the given related objects to the existing relationships
// of the content, optionally inserting them as new records.
// Appends related to o.R.UserContentRewards.
// Sets related.R.Content appropriately.
func (o *Content) AddUserContentRewards(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserContentReward) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ContentID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_content_reward\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"content_id"}),
				strmangle.WhereClause("\"", "\"", 2, userContentRewardPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ContentID = o.ID
		}
	}

	if o.R == nil {
		o.R = &contentR{
			UserContentRewards: related,
		}
	} else {
		o.R.UserContentRewards = append(o.R.UserContentRewards, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userContentRewardR{
				Content: o,
			}
		} else {
			rel.R.Content = o
		}
	}
	return nil
}

// AddUserContentSeeMoreRewardsG adds the given related objects to the existing relationships
// of the content, optionally inserting them as new records.
// Appends related to o.R.UserContentSeeMoreRewards.
// Sets related.R.Content appropriately.
// Uses the global database handle.
func (o *Content) AddUserContentSeeMoreRewardsG(ctx context.Context, insert bool, related ...*UserContentSeeMoreReward) error {
	return o.AddUserContentSeeMoreRewards(ctx, boil.GetContextDB(), insert, related...)
}

// AddUserContentSeeMoreRewards adds the given related objects to the existing relationships
// of the content, optionally inserting them as new records.
// Appends related to o.R.UserContentSeeMoreRewards.
// Sets related.R.Content appropriately.
func (o *Content) AddUserContentSeeMoreRewards(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UserContentSeeMoreReward) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ContentID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"user_content_see_more_reward\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"content_id"}),
				strmangle.WhereClause("\"", "\"", 2, userContentSeeMoreRewardPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ContentID = o.ID
		}
	}

	if o.R == nil {
		o.R = &contentR{
			UserContentSeeMoreRewards: related,
		}
	} else {
		o.R.UserContentSeeMoreRewards = append(o.R.UserContentSeeMoreRewards, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userContentSeeMoreRewardR{
				Content: o,
			}
		} else {
			rel.R.Content = o
		}
	}
	return nil
}

// Contents retrieves all the records using an executor.
func Contents(mods ...qm.QueryMod) contentQuery {
	mods = append(mods, qm.From("\"content\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"content\".*"})
	}

	return contentQuery{q}
}

// FindContentG retrieves a single record by ID.
func FindContentG(ctx context.Context, iD int, selectCols ...string) (*Content, error) {
	return FindContent(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindContent retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindContent(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Content, error) {
	contentObj := &Content{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"content\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, contentObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from content")
	}

	if err = contentObj.doAfterSelectHooks(ctx, exec); err != nil {
		return contentObj, err
	}

	return contentObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Content) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Content) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no content provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(contentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	contentInsertCacheMut.RLock()
	cache, cached := contentInsertCache[key]
	contentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			contentAllColumns,
			contentColumnsWithDefault,
			contentColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(contentType, contentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(contentType, contentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"content\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"content\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into content")
	}

	if !cached {
		contentInsertCacheMut.Lock()
		contentInsertCache[key] = cache
		contentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Content record using the global executor.
// See Update for more documentation.
func (o *Content) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Content.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Content) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	contentUpdateCacheMut.RLock()
	cache, cached := contentUpdateCache[key]
	contentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			contentAllColumns,
			contentPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update content, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"content\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, contentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(contentType, contentMapping, append(wl, contentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update content row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for content")
	}

	if !cached {
		contentUpdateCacheMut.Lock()
		contentUpdateCache[key] = cache
		contentUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q contentQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q contentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for content")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for content")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ContentSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ContentSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), contentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"content\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, contentPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in content slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all content")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Content) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Content) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no content provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(contentColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	contentUpsertCacheMut.RLock()
	cache, cached := contentUpsertCache[key]
	contentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			contentAllColumns,
			contentColumnsWithDefault,
			contentColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			contentAllColumns,
			contentPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert content, could not build update column list")
		}

		ret := strmangle.SetComplement(contentAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(contentPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert content, could not build conflict column list")
			}

			conflict = make([]string, len(contentPrimaryKeyColumns))
			copy(conflict, contentPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"content\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(contentType, contentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(contentType, contentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert content")
	}

	if !cached {
		contentUpsertCacheMut.Lock()
		contentUpsertCache[key] = cache
		contentUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Content record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Content) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Content record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Content) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Content provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), contentPrimaryKeyMapping)
	sql := "DELETE FROM \"content\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from content")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for content")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q contentQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q contentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no contentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from content")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for content")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ContentSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ContentSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(contentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), contentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"content\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, contentPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from content slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for content")
	}

	if len(contentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Content) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no Content provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Content) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindContent(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ContentSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty ContentSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ContentSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ContentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), contentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"content\".* FROM \"content\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, contentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ContentSlice")
	}

	*o = slice

	return nil
}

// ContentExistsG checks if the Content row exists.
func ContentExistsG(ctx context.Context, iD int) (bool, error) {
	return ContentExists(ctx, boil.GetContextDB(), iD)
}

// ContentExists checks if the Content row exists.
func ContentExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"content\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if content exists")
	}

	return exists, nil
}

// Exists checks if the Content row exists.
func (o *Content) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ContentExists(ctx, exec, o.ID)
}
