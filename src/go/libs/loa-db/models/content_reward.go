// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/sqlboiler/v4/types"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// ContentReward is an object representing the database table.
type ContentReward struct {
	ID              int           `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt       time.Time     `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt       time.Time     `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	IsSellable      bool          `boil:"is_sellable" json:"is_sellable" toml:"is_sellable" yaml:"is_sellable"`
	ContentID       int           `boil:"content_id" json:"content_id" toml:"content_id" yaml:"content_id"`
	AverageQuantity types.Decimal `boil:"average_quantity" json:"average_quantity" toml:"average_quantity" yaml:"average_quantity"`
	ItemID          int           `boil:"item_id" json:"item_id" toml:"item_id" yaml:"item_id"`

	R *contentRewardR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L contentRewardL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ContentRewardColumns = struct {
	ID              string
	CreatedAt       string
	UpdatedAt       string
	IsSellable      string
	ContentID       string
	AverageQuantity string
	ItemID          string
}{
	ID:              "id",
	CreatedAt:       "created_at",
	UpdatedAt:       "updated_at",
	IsSellable:      "is_sellable",
	ContentID:       "content_id",
	AverageQuantity: "average_quantity",
	ItemID:          "item_id",
}

var ContentRewardTableColumns = struct {
	ID              string
	CreatedAt       string
	UpdatedAt       string
	IsSellable      string
	ContentID       string
	AverageQuantity string
	ItemID          string
}{
	ID:              "content_reward.id",
	CreatedAt:       "content_reward.created_at",
	UpdatedAt:       "content_reward.updated_at",
	IsSellable:      "content_reward.is_sellable",
	ContentID:       "content_reward.content_id",
	AverageQuantity: "content_reward.average_quantity",
	ItemID:          "content_reward.item_id",
}

// Generated where

var ContentRewardWhere = struct {
	ID              whereHelperint
	CreatedAt       whereHelpertime_Time
	UpdatedAt       whereHelpertime_Time
	IsSellable      whereHelperbool
	ContentID       whereHelperint
	AverageQuantity whereHelpertypes_Decimal
	ItemID          whereHelperint
}{
	ID:              whereHelperint{field: "\"content_reward\".\"id\""},
	CreatedAt:       whereHelpertime_Time{field: "\"content_reward\".\"created_at\""},
	UpdatedAt:       whereHelpertime_Time{field: "\"content_reward\".\"updated_at\""},
	IsSellable:      whereHelperbool{field: "\"content_reward\".\"is_sellable\""},
	ContentID:       whereHelperint{field: "\"content_reward\".\"content_id\""},
	AverageQuantity: whereHelpertypes_Decimal{field: "\"content_reward\".\"average_quantity\""},
	ItemID:          whereHelperint{field: "\"content_reward\".\"item_id\""},
}

// ContentRewardRels is where relationship names are stored.
var ContentRewardRels = struct {
	Content                string
	Item                   string
	ReportedContentRewards string
}{
	Content:                "Content",
	Item:                   "Item",
	ReportedContentRewards: "ReportedContentRewards",
}

// contentRewardR is where relationships are stored.
type contentRewardR struct {
	Content                *Content                   `boil:"Content" json:"Content" toml:"Content" yaml:"Content"`
	Item                   *Item                      `boil:"Item" json:"Item" toml:"Item" yaml:"Item"`
	ReportedContentRewards ReportedContentRewardSlice `boil:"ReportedContentRewards" json:"ReportedContentRewards" toml:"ReportedContentRewards" yaml:"ReportedContentRewards"`
}

// NewStruct creates a new relationship struct
func (*contentRewardR) NewStruct() *contentRewardR {
	return &contentRewardR{}
}

func (o *ContentReward) GetContent() *Content {
	if o == nil {
		return nil
	}

	return o.R.GetContent()
}

func (r *contentRewardR) GetContent() *Content {
	if r == nil {
		return nil
	}

	return r.Content
}

func (o *ContentReward) GetItem() *Item {
	if o == nil {
		return nil
	}

	return o.R.GetItem()
}

func (r *contentRewardR) GetItem() *Item {
	if r == nil {
		return nil
	}

	return r.Item
}

func (o *ContentReward) GetReportedContentRewards() ReportedContentRewardSlice {
	if o == nil {
		return nil
	}

	return o.R.GetReportedContentRewards()
}

func (r *contentRewardR) GetReportedContentRewards() ReportedContentRewardSlice {
	if r == nil {
		return nil
	}

	return r.ReportedContentRewards
}

// contentRewardL is where Load methods for each relationship are stored.
type contentRewardL struct{}

var (
	contentRewardAllColumns            = []string{"id", "created_at", "updated_at", "is_sellable", "content_id", "average_quantity", "item_id"}
	contentRewardColumnsWithoutDefault = []string{"updated_at", "content_id", "item_id"}
	contentRewardColumnsWithDefault    = []string{"id", "created_at", "is_sellable", "average_quantity"}
	contentRewardPrimaryKeyColumns     = []string{"id"}
	contentRewardGeneratedColumns      = []string{}
)

type (
	// ContentRewardSlice is an alias for a slice of pointers to ContentReward.
	// This should almost always be used instead of []ContentReward.
	ContentRewardSlice []*ContentReward
	// ContentRewardHook is the signature for custom ContentReward hook methods
	ContentRewardHook func(context.Context, boil.ContextExecutor, *ContentReward) error

	contentRewardQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	contentRewardType                 = reflect.TypeOf(&ContentReward{})
	contentRewardMapping              = queries.MakeStructMapping(contentRewardType)
	contentRewardPrimaryKeyMapping, _ = queries.BindMapping(contentRewardType, contentRewardMapping, contentRewardPrimaryKeyColumns)
	contentRewardInsertCacheMut       sync.RWMutex
	contentRewardInsertCache          = make(map[string]insertCache)
	contentRewardUpdateCacheMut       sync.RWMutex
	contentRewardUpdateCache          = make(map[string]updateCache)
	contentRewardUpsertCacheMut       sync.RWMutex
	contentRewardUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var contentRewardAfterSelectMu sync.Mutex
var contentRewardAfterSelectHooks []ContentRewardHook

var contentRewardBeforeInsertMu sync.Mutex
var contentRewardBeforeInsertHooks []ContentRewardHook
var contentRewardAfterInsertMu sync.Mutex
var contentRewardAfterInsertHooks []ContentRewardHook

var contentRewardBeforeUpdateMu sync.Mutex
var contentRewardBeforeUpdateHooks []ContentRewardHook
var contentRewardAfterUpdateMu sync.Mutex
var contentRewardAfterUpdateHooks []ContentRewardHook

var contentRewardBeforeDeleteMu sync.Mutex
var contentRewardBeforeDeleteHooks []ContentRewardHook
var contentRewardAfterDeleteMu sync.Mutex
var contentRewardAfterDeleteHooks []ContentRewardHook

var contentRewardBeforeUpsertMu sync.Mutex
var contentRewardBeforeUpsertHooks []ContentRewardHook
var contentRewardAfterUpsertMu sync.Mutex
var contentRewardAfterUpsertHooks []ContentRewardHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ContentReward) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contentRewardAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ContentReward) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contentRewardBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ContentReward) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contentRewardAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ContentReward) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contentRewardBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ContentReward) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contentRewardAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ContentReward) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contentRewardBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ContentReward) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contentRewardAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ContentReward) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contentRewardBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ContentReward) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range contentRewardAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddContentRewardHook registers your hook function for all future operations.
func AddContentRewardHook(hookPoint boil.HookPoint, contentRewardHook ContentRewardHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		contentRewardAfterSelectMu.Lock()
		contentRewardAfterSelectHooks = append(contentRewardAfterSelectHooks, contentRewardHook)
		contentRewardAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		contentRewardBeforeInsertMu.Lock()
		contentRewardBeforeInsertHooks = append(contentRewardBeforeInsertHooks, contentRewardHook)
		contentRewardBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		contentRewardAfterInsertMu.Lock()
		contentRewardAfterInsertHooks = append(contentRewardAfterInsertHooks, contentRewardHook)
		contentRewardAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		contentRewardBeforeUpdateMu.Lock()
		contentRewardBeforeUpdateHooks = append(contentRewardBeforeUpdateHooks, contentRewardHook)
		contentRewardBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		contentRewardAfterUpdateMu.Lock()
		contentRewardAfterUpdateHooks = append(contentRewardAfterUpdateHooks, contentRewardHook)
		contentRewardAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		contentRewardBeforeDeleteMu.Lock()
		contentRewardBeforeDeleteHooks = append(contentRewardBeforeDeleteHooks, contentRewardHook)
		contentRewardBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		contentRewardAfterDeleteMu.Lock()
		contentRewardAfterDeleteHooks = append(contentRewardAfterDeleteHooks, contentRewardHook)
		contentRewardAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		contentRewardBeforeUpsertMu.Lock()
		contentRewardBeforeUpsertHooks = append(contentRewardBeforeUpsertHooks, contentRewardHook)
		contentRewardBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		contentRewardAfterUpsertMu.Lock()
		contentRewardAfterUpsertHooks = append(contentRewardAfterUpsertHooks, contentRewardHook)
		contentRewardAfterUpsertMu.Unlock()
	}
}

// OneG returns a single contentReward record from the query using the global executor.
func (q contentRewardQuery) OneG(ctx context.Context) (*ContentReward, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single contentReward record from the query.
func (q contentRewardQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ContentReward, error) {
	o := &ContentReward{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for content_reward")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all ContentReward records from the query using the global executor.
func (q contentRewardQuery) AllG(ctx context.Context) (ContentRewardSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all ContentReward records from the query.
func (q contentRewardQuery) All(ctx context.Context, exec boil.ContextExecutor) (ContentRewardSlice, error) {
	var o []*ContentReward

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ContentReward slice")
	}

	if len(contentRewardAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all ContentReward records in the query using the global executor
func (q contentRewardQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all ContentReward records in the query.
func (q contentRewardQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count content_reward rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q contentRewardQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q contentRewardQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if content_reward exists")
	}

	return count > 0, nil
}

// Content pointed to by the foreign key.
func (o *ContentReward) Content(mods ...qm.QueryMod) contentQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ContentID),
	}

	queryMods = append(queryMods, mods...)

	return Contents(queryMods...)
}

// Item pointed to by the foreign key.
func (o *ContentReward) Item(mods ...qm.QueryMod) itemQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ItemID),
	}

	queryMods = append(queryMods, mods...)

	return Items(queryMods...)
}

// ReportedContentRewards retrieves all the reported_content_reward's ReportedContentRewards with an executor.
func (o *ContentReward) ReportedContentRewards(mods ...qm.QueryMod) reportedContentRewardQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"reported_content_reward\".\"content_reward_id\"=?", o.ID),
	)

	return ReportedContentRewards(queryMods...)
}

// LoadContent allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (contentRewardL) LoadContent(ctx context.Context, e boil.ContextExecutor, singular bool, maybeContentReward interface{}, mods queries.Applicator) error {
	var slice []*ContentReward
	var object *ContentReward

	if singular {
		var ok bool
		object, ok = maybeContentReward.(*ContentReward)
		if !ok {
			object = new(ContentReward)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeContentReward)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeContentReward))
			}
		}
	} else {
		s, ok := maybeContentReward.(*[]*ContentReward)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeContentReward)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeContentReward))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &contentRewardR{}
		}
		args[object.ContentID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &contentRewardR{}
			}

			args[obj.ContentID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`content`),
		qm.WhereIn(`content.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Content")
	}

	var resultSlice []*Content
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Content")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for content")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for content")
	}

	if len(contentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Content = foreign
		if foreign.R == nil {
			foreign.R = &contentR{}
		}
		foreign.R.ContentRewards = append(foreign.R.ContentRewards, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ContentID == foreign.ID {
				local.R.Content = foreign
				if foreign.R == nil {
					foreign.R = &contentR{}
				}
				foreign.R.ContentRewards = append(foreign.R.ContentRewards, local)
				break
			}
		}
	}

	return nil
}

// LoadItem allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (contentRewardL) LoadItem(ctx context.Context, e boil.ContextExecutor, singular bool, maybeContentReward interface{}, mods queries.Applicator) error {
	var slice []*ContentReward
	var object *ContentReward

	if singular {
		var ok bool
		object, ok = maybeContentReward.(*ContentReward)
		if !ok {
			object = new(ContentReward)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeContentReward)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeContentReward))
			}
		}
	} else {
		s, ok := maybeContentReward.(*[]*ContentReward)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeContentReward)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeContentReward))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &contentRewardR{}
		}
		args[object.ItemID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &contentRewardR{}
			}

			args[obj.ItemID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`item`),
		qm.WhereIn(`item.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Item")
	}

	var resultSlice []*Item
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Item")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for item")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for item")
	}

	if len(itemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Item = foreign
		if foreign.R == nil {
			foreign.R = &itemR{}
		}
		foreign.R.ContentRewards = append(foreign.R.ContentRewards, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ItemID == foreign.ID {
				local.R.Item = foreign
				if foreign.R == nil {
					foreign.R = &itemR{}
				}
				foreign.R.ContentRewards = append(foreign.R.ContentRewards, local)
				break
			}
		}
	}

	return nil
}

// LoadReportedContentRewards allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (contentRewardL) LoadReportedContentRewards(ctx context.Context, e boil.ContextExecutor, singular bool, maybeContentReward interface{}, mods queries.Applicator) error {
	var slice []*ContentReward
	var object *ContentReward

	if singular {
		var ok bool
		object, ok = maybeContentReward.(*ContentReward)
		if !ok {
			object = new(ContentReward)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeContentReward)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeContentReward))
			}
		}
	} else {
		s, ok := maybeContentReward.(*[]*ContentReward)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeContentReward)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeContentReward))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &contentRewardR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &contentRewardR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`reported_content_reward`),
		qm.WhereIn(`reported_content_reward.content_reward_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load reported_content_reward")
	}

	var resultSlice []*ReportedContentReward
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice reported_content_reward")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on reported_content_reward")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for reported_content_reward")
	}

	if len(reportedContentRewardAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ReportedContentRewards = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &reportedContentRewardR{}
			}
			foreign.R.ContentReward = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ContentRewardID {
				local.R.ReportedContentRewards = append(local.R.ReportedContentRewards, foreign)
				if foreign.R == nil {
					foreign.R = &reportedContentRewardR{}
				}
				foreign.R.ContentReward = local
				break
			}
		}
	}

	return nil
}

// SetContentG of the contentReward to the related item.
// Sets o.R.Content to related.
// Adds o to related.R.ContentRewards.
// Uses the global database handle.
func (o *ContentReward) SetContentG(ctx context.Context, insert bool, related *Content) error {
	return o.SetContent(ctx, boil.GetContextDB(), insert, related)
}

// SetContent of the contentReward to the related item.
// Sets o.R.Content to related.
// Adds o to related.R.ContentRewards.
func (o *ContentReward) SetContent(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Content) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"content_reward\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"content_id"}),
		strmangle.WhereClause("\"", "\"", 2, contentRewardPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ContentID = related.ID
	if o.R == nil {
		o.R = &contentRewardR{
			Content: related,
		}
	} else {
		o.R.Content = related
	}

	if related.R == nil {
		related.R = &contentR{
			ContentRewards: ContentRewardSlice{o},
		}
	} else {
		related.R.ContentRewards = append(related.R.ContentRewards, o)
	}

	return nil
}

// SetItemG of the contentReward to the related item.
// Sets o.R.Item to related.
// Adds o to related.R.ContentRewards.
// Uses the global database handle.
func (o *ContentReward) SetItemG(ctx context.Context, insert bool, related *Item) error {
	return o.SetItem(ctx, boil.GetContextDB(), insert, related)
}

// SetItem of the contentReward to the related item.
// Sets o.R.Item to related.
// Adds o to related.R.ContentRewards.
func (o *ContentReward) SetItem(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Item) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"content_reward\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"item_id"}),
		strmangle.WhereClause("\"", "\"", 2, contentRewardPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ItemID = related.ID
	if o.R == nil {
		o.R = &contentRewardR{
			Item: related,
		}
	} else {
		o.R.Item = related
	}

	if related.R == nil {
		related.R = &itemR{
			ContentRewards: ContentRewardSlice{o},
		}
	} else {
		related.R.ContentRewards = append(related.R.ContentRewards, o)
	}

	return nil
}

// AddReportedContentRewardsG adds the given related objects to the existing relationships
// of the content_reward, optionally inserting them as new records.
// Appends related to o.R.ReportedContentRewards.
// Sets related.R.ContentReward appropriately.
// Uses the global database handle.
func (o *ContentReward) AddReportedContentRewardsG(ctx context.Context, insert bool, related ...*ReportedContentReward) error {
	return o.AddReportedContentRewards(ctx, boil.GetContextDB(), insert, related...)
}

// AddReportedContentRewards adds the given related objects to the existing relationships
// of the content_reward, optionally inserting them as new records.
// Appends related to o.R.ReportedContentRewards.
// Sets related.R.ContentReward appropriately.
func (o *ContentReward) AddReportedContentRewards(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ReportedContentReward) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ContentRewardID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"reported_content_reward\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"content_reward_id"}),
				strmangle.WhereClause("\"", "\"", 2, reportedContentRewardPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ContentRewardID = o.ID
		}
	}

	if o.R == nil {
		o.R = &contentRewardR{
			ReportedContentRewards: related,
		}
	} else {
		o.R.ReportedContentRewards = append(o.R.ReportedContentRewards, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &reportedContentRewardR{
				ContentReward: o,
			}
		} else {
			rel.R.ContentReward = o
		}
	}
	return nil
}

// ContentRewards retrieves all the records using an executor.
func ContentRewards(mods ...qm.QueryMod) contentRewardQuery {
	mods = append(mods, qm.From("\"content_reward\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"content_reward\".*"})
	}

	return contentRewardQuery{q}
}

// FindContentRewardG retrieves a single record by ID.
func FindContentRewardG(ctx context.Context, iD int, selectCols ...string) (*ContentReward, error) {
	return FindContentReward(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindContentReward retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindContentReward(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ContentReward, error) {
	contentRewardObj := &ContentReward{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"content_reward\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, contentRewardObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from content_reward")
	}

	if err = contentRewardObj.doAfterSelectHooks(ctx, exec); err != nil {
		return contentRewardObj, err
	}

	return contentRewardObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *ContentReward) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ContentReward) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no content_reward provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(contentRewardColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	contentRewardInsertCacheMut.RLock()
	cache, cached := contentRewardInsertCache[key]
	contentRewardInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			contentRewardAllColumns,
			contentRewardColumnsWithDefault,
			contentRewardColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(contentRewardType, contentRewardMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(contentRewardType, contentRewardMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"content_reward\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"content_reward\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into content_reward")
	}

	if !cached {
		contentRewardInsertCacheMut.Lock()
		contentRewardInsertCache[key] = cache
		contentRewardInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single ContentReward record using the global executor.
// See Update for more documentation.
func (o *ContentReward) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the ContentReward.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ContentReward) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	contentRewardUpdateCacheMut.RLock()
	cache, cached := contentRewardUpdateCache[key]
	contentRewardUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			contentRewardAllColumns,
			contentRewardPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update content_reward, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"content_reward\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, contentRewardPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(contentRewardType, contentRewardMapping, append(wl, contentRewardPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update content_reward row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for content_reward")
	}

	if !cached {
		contentRewardUpdateCacheMut.Lock()
		contentRewardUpdateCache[key] = cache
		contentRewardUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q contentRewardQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q contentRewardQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for content_reward")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for content_reward")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ContentRewardSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ContentRewardSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), contentRewardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"content_reward\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, contentRewardPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in contentReward slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all contentReward")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *ContentReward) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ContentReward) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no content_reward provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(contentRewardColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	contentRewardUpsertCacheMut.RLock()
	cache, cached := contentRewardUpsertCache[key]
	contentRewardUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			contentRewardAllColumns,
			contentRewardColumnsWithDefault,
			contentRewardColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			contentRewardAllColumns,
			contentRewardPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert content_reward, could not build update column list")
		}

		ret := strmangle.SetComplement(contentRewardAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(contentRewardPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert content_reward, could not build conflict column list")
			}

			conflict = make([]string, len(contentRewardPrimaryKeyColumns))
			copy(conflict, contentRewardPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"content_reward\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(contentRewardType, contentRewardMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(contentRewardType, contentRewardMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert content_reward")
	}

	if !cached {
		contentRewardUpsertCacheMut.Lock()
		contentRewardUpsertCache[key] = cache
		contentRewardUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single ContentReward record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *ContentReward) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single ContentReward record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ContentReward) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ContentReward provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), contentRewardPrimaryKeyMapping)
	sql := "DELETE FROM \"content_reward\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from content_reward")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for content_reward")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q contentRewardQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q contentRewardQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no contentRewardQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from content_reward")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for content_reward")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ContentRewardSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ContentRewardSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(contentRewardBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), contentRewardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"content_reward\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, contentRewardPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from contentReward slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for content_reward")
	}

	if len(contentRewardAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *ContentReward) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no ContentReward provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ContentReward) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindContentReward(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ContentRewardSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty ContentRewardSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ContentRewardSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ContentRewardSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), contentRewardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"content_reward\".* FROM \"content_reward\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, contentRewardPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ContentRewardSlice")
	}

	*o = slice

	return nil
}

// ContentRewardExistsG checks if the ContentReward row exists.
func ContentRewardExistsG(ctx context.Context, iD int) (bool, error) {
	return ContentRewardExists(ctx, boil.GetContextDB(), iD)
}

// ContentRewardExists checks if the ContentReward row exists.
func ContentRewardExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"content_reward\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if content_reward exists")
	}

	return exists, nil
}

// Exists checks if the ContentReward row exists.
func (o *ContentReward) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ContentRewardExists(ctx, exec, o.ID)
}
