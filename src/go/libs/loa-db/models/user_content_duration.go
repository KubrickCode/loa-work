// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// UserContentDuration is an object representing the database table.
type UserContentDuration struct {
	ID        int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	Value     int       `boil:"value" json:"value" toml:"value" yaml:"value"`
	UserID    int       `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	ContentID int       `boil:"content_id" json:"content_id" toml:"content_id" yaml:"content_id"`

	R *userContentDurationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userContentDurationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserContentDurationColumns = struct {
	ID        string
	CreatedAt string
	UpdatedAt string
	Value     string
	UserID    string
	ContentID string
}{
	ID:        "id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	Value:     "value",
	UserID:    "user_id",
	ContentID: "content_id",
}

var UserContentDurationTableColumns = struct {
	ID        string
	CreatedAt string
	UpdatedAt string
	Value     string
	UserID    string
	ContentID string
}{
	ID:        "user_content_duration.id",
	CreatedAt: "user_content_duration.created_at",
	UpdatedAt: "user_content_duration.updated_at",
	Value:     "user_content_duration.value",
	UserID:    "user_content_duration.user_id",
	ContentID: "user_content_duration.content_id",
}

// Generated where

var UserContentDurationWhere = struct {
	ID        whereHelperint
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
	Value     whereHelperint
	UserID    whereHelperint
	ContentID whereHelperint
}{
	ID:        whereHelperint{field: "\"user_content_duration\".\"id\""},
	CreatedAt: whereHelpertime_Time{field: "\"user_content_duration\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"user_content_duration\".\"updated_at\""},
	Value:     whereHelperint{field: "\"user_content_duration\".\"value\""},
	UserID:    whereHelperint{field: "\"user_content_duration\".\"user_id\""},
	ContentID: whereHelperint{field: "\"user_content_duration\".\"content_id\""},
}

// UserContentDurationRels is where relationship names are stored.
var UserContentDurationRels = struct {
	Content string
	User    string
}{
	Content: "Content",
	User:    "User",
}

// userContentDurationR is where relationships are stored.
type userContentDurationR struct {
	Content *Content `boil:"Content" json:"Content" toml:"Content" yaml:"Content"`
	User    *User    `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*userContentDurationR) NewStruct() *userContentDurationR {
	return &userContentDurationR{}
}

func (o *UserContentDuration) GetContent() *Content {
	if o == nil {
		return nil
	}

	return o.R.GetContent()
}

func (r *userContentDurationR) GetContent() *Content {
	if r == nil {
		return nil
	}

	return r.Content
}

func (o *UserContentDuration) GetUser() *User {
	if o == nil {
		return nil
	}

	return o.R.GetUser()
}

func (r *userContentDurationR) GetUser() *User {
	if r == nil {
		return nil
	}

	return r.User
}

// userContentDurationL is where Load methods for each relationship are stored.
type userContentDurationL struct{}

var (
	userContentDurationAllColumns            = []string{"id", "created_at", "updated_at", "value", "user_id", "content_id"}
	userContentDurationColumnsWithoutDefault = []string{"updated_at", "value", "user_id", "content_id"}
	userContentDurationColumnsWithDefault    = []string{"id", "created_at"}
	userContentDurationPrimaryKeyColumns     = []string{"id"}
	userContentDurationGeneratedColumns      = []string{}
)

type (
	// UserContentDurationSlice is an alias for a slice of pointers to UserContentDuration.
	// This should almost always be used instead of []UserContentDuration.
	UserContentDurationSlice []*UserContentDuration
	// UserContentDurationHook is the signature for custom UserContentDuration hook methods
	UserContentDurationHook func(context.Context, boil.ContextExecutor, *UserContentDuration) error

	userContentDurationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userContentDurationType                 = reflect.TypeOf(&UserContentDuration{})
	userContentDurationMapping              = queries.MakeStructMapping(userContentDurationType)
	userContentDurationPrimaryKeyMapping, _ = queries.BindMapping(userContentDurationType, userContentDurationMapping, userContentDurationPrimaryKeyColumns)
	userContentDurationInsertCacheMut       sync.RWMutex
	userContentDurationInsertCache          = make(map[string]insertCache)
	userContentDurationUpdateCacheMut       sync.RWMutex
	userContentDurationUpdateCache          = make(map[string]updateCache)
	userContentDurationUpsertCacheMut       sync.RWMutex
	userContentDurationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userContentDurationAfterSelectMu sync.Mutex
var userContentDurationAfterSelectHooks []UserContentDurationHook

var userContentDurationBeforeInsertMu sync.Mutex
var userContentDurationBeforeInsertHooks []UserContentDurationHook
var userContentDurationAfterInsertMu sync.Mutex
var userContentDurationAfterInsertHooks []UserContentDurationHook

var userContentDurationBeforeUpdateMu sync.Mutex
var userContentDurationBeforeUpdateHooks []UserContentDurationHook
var userContentDurationAfterUpdateMu sync.Mutex
var userContentDurationAfterUpdateHooks []UserContentDurationHook

var userContentDurationBeforeDeleteMu sync.Mutex
var userContentDurationBeforeDeleteHooks []UserContentDurationHook
var userContentDurationAfterDeleteMu sync.Mutex
var userContentDurationAfterDeleteHooks []UserContentDurationHook

var userContentDurationBeforeUpsertMu sync.Mutex
var userContentDurationBeforeUpsertHooks []UserContentDurationHook
var userContentDurationAfterUpsertMu sync.Mutex
var userContentDurationAfterUpsertHooks []UserContentDurationHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserContentDuration) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userContentDurationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserContentDuration) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userContentDurationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserContentDuration) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userContentDurationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserContentDuration) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userContentDurationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserContentDuration) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userContentDurationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserContentDuration) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userContentDurationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserContentDuration) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userContentDurationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserContentDuration) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userContentDurationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserContentDuration) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userContentDurationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserContentDurationHook registers your hook function for all future operations.
func AddUserContentDurationHook(hookPoint boil.HookPoint, userContentDurationHook UserContentDurationHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		userContentDurationAfterSelectMu.Lock()
		userContentDurationAfterSelectHooks = append(userContentDurationAfterSelectHooks, userContentDurationHook)
		userContentDurationAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		userContentDurationBeforeInsertMu.Lock()
		userContentDurationBeforeInsertHooks = append(userContentDurationBeforeInsertHooks, userContentDurationHook)
		userContentDurationBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		userContentDurationAfterInsertMu.Lock()
		userContentDurationAfterInsertHooks = append(userContentDurationAfterInsertHooks, userContentDurationHook)
		userContentDurationAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		userContentDurationBeforeUpdateMu.Lock()
		userContentDurationBeforeUpdateHooks = append(userContentDurationBeforeUpdateHooks, userContentDurationHook)
		userContentDurationBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		userContentDurationAfterUpdateMu.Lock()
		userContentDurationAfterUpdateHooks = append(userContentDurationAfterUpdateHooks, userContentDurationHook)
		userContentDurationAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		userContentDurationBeforeDeleteMu.Lock()
		userContentDurationBeforeDeleteHooks = append(userContentDurationBeforeDeleteHooks, userContentDurationHook)
		userContentDurationBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		userContentDurationAfterDeleteMu.Lock()
		userContentDurationAfterDeleteHooks = append(userContentDurationAfterDeleteHooks, userContentDurationHook)
		userContentDurationAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		userContentDurationBeforeUpsertMu.Lock()
		userContentDurationBeforeUpsertHooks = append(userContentDurationBeforeUpsertHooks, userContentDurationHook)
		userContentDurationBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		userContentDurationAfterUpsertMu.Lock()
		userContentDurationAfterUpsertHooks = append(userContentDurationAfterUpsertHooks, userContentDurationHook)
		userContentDurationAfterUpsertMu.Unlock()
	}
}

// OneG returns a single userContentDuration record from the query using the global executor.
func (q userContentDurationQuery) OneG(ctx context.Context) (*UserContentDuration, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single userContentDuration record from the query.
func (q userContentDurationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserContentDuration, error) {
	o := &UserContentDuration{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_content_duration")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all UserContentDuration records from the query using the global executor.
func (q userContentDurationQuery) AllG(ctx context.Context) (UserContentDurationSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all UserContentDuration records from the query.
func (q userContentDurationQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserContentDurationSlice, error) {
	var o []*UserContentDuration

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserContentDuration slice")
	}

	if len(userContentDurationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all UserContentDuration records in the query using the global executor
func (q userContentDurationQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all UserContentDuration records in the query.
func (q userContentDurationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_content_duration rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q userContentDurationQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q userContentDurationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_content_duration exists")
	}

	return count > 0, nil
}

// Content pointed to by the foreign key.
func (o *UserContentDuration) Content(mods ...qm.QueryMod) contentQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ContentID),
	}

	queryMods = append(queryMods, mods...)

	return Contents(queryMods...)
}

// User pointed to by the foreign key.
func (o *UserContentDuration) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadContent allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userContentDurationL) LoadContent(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserContentDuration interface{}, mods queries.Applicator) error {
	var slice []*UserContentDuration
	var object *UserContentDuration

	if singular {
		var ok bool
		object, ok = maybeUserContentDuration.(*UserContentDuration)
		if !ok {
			object = new(UserContentDuration)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserContentDuration)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserContentDuration))
			}
		}
	} else {
		s, ok := maybeUserContentDuration.(*[]*UserContentDuration)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserContentDuration)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserContentDuration))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userContentDurationR{}
		}
		args[object.ContentID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userContentDurationR{}
			}

			args[obj.ContentID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`content`),
		qm.WhereIn(`content.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Content")
	}

	var resultSlice []*Content
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Content")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for content")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for content")
	}

	if len(contentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Content = foreign
		if foreign.R == nil {
			foreign.R = &contentR{}
		}
		foreign.R.UserContentDurations = append(foreign.R.UserContentDurations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ContentID == foreign.ID {
				local.R.Content = foreign
				if foreign.R == nil {
					foreign.R = &contentR{}
				}
				foreign.R.UserContentDurations = append(foreign.R.UserContentDurations, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userContentDurationL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserContentDuration interface{}, mods queries.Applicator) error {
	var slice []*UserContentDuration
	var object *UserContentDuration

	if singular {
		var ok bool
		object, ok = maybeUserContentDuration.(*UserContentDuration)
		if !ok {
			object = new(UserContentDuration)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserContentDuration)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserContentDuration))
			}
		}
	} else {
		s, ok := maybeUserContentDuration.(*[]*UserContentDuration)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserContentDuration)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserContentDuration))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userContentDurationR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userContentDurationR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`user`),
		qm.WhereIn(`user.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UserContentDurations = append(foreign.R.UserContentDurations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UserContentDurations = append(foreign.R.UserContentDurations, local)
				break
			}
		}
	}

	return nil
}

// SetContentG of the userContentDuration to the related item.
// Sets o.R.Content to related.
// Adds o to related.R.UserContentDurations.
// Uses the global database handle.
func (o *UserContentDuration) SetContentG(ctx context.Context, insert bool, related *Content) error {
	return o.SetContent(ctx, boil.GetContextDB(), insert, related)
}

// SetContent of the userContentDuration to the related item.
// Sets o.R.Content to related.
// Adds o to related.R.UserContentDurations.
func (o *UserContentDuration) SetContent(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Content) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_content_duration\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"content_id"}),
		strmangle.WhereClause("\"", "\"", 2, userContentDurationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ContentID = related.ID
	if o.R == nil {
		o.R = &userContentDurationR{
			Content: related,
		}
	} else {
		o.R.Content = related
	}

	if related.R == nil {
		related.R = &contentR{
			UserContentDurations: UserContentDurationSlice{o},
		}
	} else {
		related.R.UserContentDurations = append(related.R.UserContentDurations, o)
	}

	return nil
}

// SetUserG of the userContentDuration to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserContentDurations.
// Uses the global database handle.
func (o *UserContentDuration) SetUserG(ctx context.Context, insert bool, related *User) error {
	return o.SetUser(ctx, boil.GetContextDB(), insert, related)
}

// SetUser of the userContentDuration to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserContentDurations.
func (o *UserContentDuration) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_content_duration\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, userContentDurationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &userContentDurationR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			UserContentDurations: UserContentDurationSlice{o},
		}
	} else {
		related.R.UserContentDurations = append(related.R.UserContentDurations, o)
	}

	return nil
}

// UserContentDurations retrieves all the records using an executor.
func UserContentDurations(mods ...qm.QueryMod) userContentDurationQuery {
	mods = append(mods, qm.From("\"user_content_duration\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"user_content_duration\".*"})
	}

	return userContentDurationQuery{q}
}

// FindUserContentDurationG retrieves a single record by ID.
func FindUserContentDurationG(ctx context.Context, iD int, selectCols ...string) (*UserContentDuration, error) {
	return FindUserContentDuration(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindUserContentDuration retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserContentDuration(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*UserContentDuration, error) {
	userContentDurationObj := &UserContentDuration{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_content_duration\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, userContentDurationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from user_content_duration")
	}

	if err = userContentDurationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return userContentDurationObj, err
	}

	return userContentDurationObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *UserContentDuration) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserContentDuration) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_content_duration provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userContentDurationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userContentDurationInsertCacheMut.RLock()
	cache, cached := userContentDurationInsertCache[key]
	userContentDurationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userContentDurationAllColumns,
			userContentDurationColumnsWithDefault,
			userContentDurationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userContentDurationType, userContentDurationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userContentDurationType, userContentDurationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_content_duration\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_content_duration\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into user_content_duration")
	}

	if !cached {
		userContentDurationInsertCacheMut.Lock()
		userContentDurationInsertCache[key] = cache
		userContentDurationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single UserContentDuration record using the global executor.
// See Update for more documentation.
func (o *UserContentDuration) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the UserContentDuration.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserContentDuration) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userContentDurationUpdateCacheMut.RLock()
	cache, cached := userContentDurationUpdateCache[key]
	userContentDurationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userContentDurationAllColumns,
			userContentDurationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update user_content_duration, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_content_duration\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userContentDurationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userContentDurationType, userContentDurationMapping, append(wl, userContentDurationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update user_content_duration row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for user_content_duration")
	}

	if !cached {
		userContentDurationUpdateCacheMut.Lock()
		userContentDurationUpdateCache[key] = cache
		userContentDurationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q userContentDurationQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q userContentDurationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for user_content_duration")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for user_content_duration")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o UserContentDurationSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserContentDurationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userContentDurationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_content_duration\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userContentDurationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in userContentDuration slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all userContentDuration")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *UserContentDuration) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserContentDuration) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no user_content_duration provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userContentDurationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userContentDurationUpsertCacheMut.RLock()
	cache, cached := userContentDurationUpsertCache[key]
	userContentDurationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			userContentDurationAllColumns,
			userContentDurationColumnsWithDefault,
			userContentDurationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userContentDurationAllColumns,
			userContentDurationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert user_content_duration, could not build update column list")
		}

		ret := strmangle.SetComplement(userContentDurationAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(userContentDurationPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert user_content_duration, could not build conflict column list")
			}

			conflict = make([]string, len(userContentDurationPrimaryKeyColumns))
			copy(conflict, userContentDurationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"user_content_duration\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(userContentDurationType, userContentDurationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userContentDurationType, userContentDurationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert user_content_duration")
	}

	if !cached {
		userContentDurationUpsertCacheMut.Lock()
		userContentDurationUpsertCache[key] = cache
		userContentDurationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single UserContentDuration record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *UserContentDuration) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single UserContentDuration record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserContentDuration) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserContentDuration provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userContentDurationPrimaryKeyMapping)
	sql := "DELETE FROM \"user_content_duration\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from user_content_duration")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for user_content_duration")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q userContentDurationQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q userContentDurationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no userContentDurationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from user_content_duration")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_content_duration")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o UserContentDurationSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserContentDurationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userContentDurationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userContentDurationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_content_duration\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userContentDurationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from userContentDuration slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_content_duration")
	}

	if len(userContentDurationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *UserContentDuration) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no UserContentDuration provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserContentDuration) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserContentDuration(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserContentDurationSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty UserContentDurationSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserContentDurationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserContentDurationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userContentDurationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_content_duration\".* FROM \"user_content_duration\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userContentDurationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserContentDurationSlice")
	}

	*o = slice

	return nil
}

// UserContentDurationExistsG checks if the UserContentDuration row exists.
func UserContentDurationExistsG(ctx context.Context, iD int) (bool, error) {
	return UserContentDurationExists(ctx, boil.GetContextDB(), iD)
}

// UserContentDurationExists checks if the UserContentDuration row exists.
func UserContentDurationExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_content_duration\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if user_content_duration exists")
	}

	return exists, nil
}

// Exists checks if the UserContentDuration row exists.
func (o *UserContentDuration) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UserContentDurationExists(ctx, exec, o.ID)
}
