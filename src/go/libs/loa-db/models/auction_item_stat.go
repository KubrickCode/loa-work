// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// AuctionItemStat is an object representing the database table.
type AuctionItemStat struct {
	ID            int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt     time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	BuyPrice      int       `boil:"buy_price" json:"buy_price" toml:"buy_price" yaml:"buy_price"`
	BidPrice      int       `boil:"bid_price" json:"bid_price" toml:"bid_price" yaml:"bid_price"`
	BidStartPrice int       `boil:"bid_start_price" json:"bid_start_price" toml:"bid_start_price" yaml:"bid_start_price"`
	StartPrice    int       `boil:"start_price" json:"start_price" toml:"start_price" yaml:"start_price"`
	IsCompetitive bool      `boil:"is_competitive" json:"is_competitive" toml:"is_competitive" yaml:"is_competitive"`
	EndDate       time.Time `boil:"end_date" json:"end_date" toml:"end_date" yaml:"end_date"`
	AuctionItemID int       `boil:"auction_item_id" json:"auction_item_id" toml:"auction_item_id" yaml:"auction_item_id"`

	R *auctionItemStatR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L auctionItemStatL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AuctionItemStatColumns = struct {
	ID            string
	CreatedAt     string
	BuyPrice      string
	BidPrice      string
	BidStartPrice string
	StartPrice    string
	IsCompetitive string
	EndDate       string
	AuctionItemID string
}{
	ID:            "id",
	CreatedAt:     "created_at",
	BuyPrice:      "buy_price",
	BidPrice:      "bid_price",
	BidStartPrice: "bid_start_price",
	StartPrice:    "start_price",
	IsCompetitive: "is_competitive",
	EndDate:       "end_date",
	AuctionItemID: "auction_item_id",
}

var AuctionItemStatTableColumns = struct {
	ID            string
	CreatedAt     string
	BuyPrice      string
	BidPrice      string
	BidStartPrice string
	StartPrice    string
	IsCompetitive string
	EndDate       string
	AuctionItemID string
}{
	ID:            "auction_item_stat.id",
	CreatedAt:     "auction_item_stat.created_at",
	BuyPrice:      "auction_item_stat.buy_price",
	BidPrice:      "auction_item_stat.bid_price",
	BidStartPrice: "auction_item_stat.bid_start_price",
	StartPrice:    "auction_item_stat.start_price",
	IsCompetitive: "auction_item_stat.is_competitive",
	EndDate:       "auction_item_stat.end_date",
	AuctionItemID: "auction_item_stat.auction_item_id",
}

// Generated where

var AuctionItemStatWhere = struct {
	ID            whereHelperint
	CreatedAt     whereHelpertime_Time
	BuyPrice      whereHelperint
	BidPrice      whereHelperint
	BidStartPrice whereHelperint
	StartPrice    whereHelperint
	IsCompetitive whereHelperbool
	EndDate       whereHelpertime_Time
	AuctionItemID whereHelperint
}{
	ID:            whereHelperint{field: "\"auction_item_stat\".\"id\""},
	CreatedAt:     whereHelpertime_Time{field: "\"auction_item_stat\".\"created_at\""},
	BuyPrice:      whereHelperint{field: "\"auction_item_stat\".\"buy_price\""},
	BidPrice:      whereHelperint{field: "\"auction_item_stat\".\"bid_price\""},
	BidStartPrice: whereHelperint{field: "\"auction_item_stat\".\"bid_start_price\""},
	StartPrice:    whereHelperint{field: "\"auction_item_stat\".\"start_price\""},
	IsCompetitive: whereHelperbool{field: "\"auction_item_stat\".\"is_competitive\""},
	EndDate:       whereHelpertime_Time{field: "\"auction_item_stat\".\"end_date\""},
	AuctionItemID: whereHelperint{field: "\"auction_item_stat\".\"auction_item_id\""},
}

// AuctionItemStatRels is where relationship names are stored.
var AuctionItemStatRels = struct {
	AuctionItem string
}{
	AuctionItem: "AuctionItem",
}

// auctionItemStatR is where relationships are stored.
type auctionItemStatR struct {
	AuctionItem *AuctionItem `boil:"AuctionItem" json:"AuctionItem" toml:"AuctionItem" yaml:"AuctionItem"`
}

// NewStruct creates a new relationship struct
func (*auctionItemStatR) NewStruct() *auctionItemStatR {
	return &auctionItemStatR{}
}

func (o *AuctionItemStat) GetAuctionItem() *AuctionItem {
	if o == nil {
		return nil
	}

	return o.R.GetAuctionItem()
}

func (r *auctionItemStatR) GetAuctionItem() *AuctionItem {
	if r == nil {
		return nil
	}

	return r.AuctionItem
}

// auctionItemStatL is where Load methods for each relationship are stored.
type auctionItemStatL struct{}

var (
	auctionItemStatAllColumns            = []string{"id", "created_at", "buy_price", "bid_price", "bid_start_price", "start_price", "is_competitive", "end_date", "auction_item_id"}
	auctionItemStatColumnsWithoutDefault = []string{"buy_price", "bid_price", "bid_start_price", "start_price", "end_date", "auction_item_id"}
	auctionItemStatColumnsWithDefault    = []string{"id", "created_at", "is_competitive"}
	auctionItemStatPrimaryKeyColumns     = []string{"id"}
	auctionItemStatGeneratedColumns      = []string{}
)

type (
	// AuctionItemStatSlice is an alias for a slice of pointers to AuctionItemStat.
	// This should almost always be used instead of []AuctionItemStat.
	AuctionItemStatSlice []*AuctionItemStat
	// AuctionItemStatHook is the signature for custom AuctionItemStat hook methods
	AuctionItemStatHook func(context.Context, boil.ContextExecutor, *AuctionItemStat) error

	auctionItemStatQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	auctionItemStatType                 = reflect.TypeOf(&AuctionItemStat{})
	auctionItemStatMapping              = queries.MakeStructMapping(auctionItemStatType)
	auctionItemStatPrimaryKeyMapping, _ = queries.BindMapping(auctionItemStatType, auctionItemStatMapping, auctionItemStatPrimaryKeyColumns)
	auctionItemStatInsertCacheMut       sync.RWMutex
	auctionItemStatInsertCache          = make(map[string]insertCache)
	auctionItemStatUpdateCacheMut       sync.RWMutex
	auctionItemStatUpdateCache          = make(map[string]updateCache)
	auctionItemStatUpsertCacheMut       sync.RWMutex
	auctionItemStatUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var auctionItemStatAfterSelectMu sync.Mutex
var auctionItemStatAfterSelectHooks []AuctionItemStatHook

var auctionItemStatBeforeInsertMu sync.Mutex
var auctionItemStatBeforeInsertHooks []AuctionItemStatHook
var auctionItemStatAfterInsertMu sync.Mutex
var auctionItemStatAfterInsertHooks []AuctionItemStatHook

var auctionItemStatBeforeUpdateMu sync.Mutex
var auctionItemStatBeforeUpdateHooks []AuctionItemStatHook
var auctionItemStatAfterUpdateMu sync.Mutex
var auctionItemStatAfterUpdateHooks []AuctionItemStatHook

var auctionItemStatBeforeDeleteMu sync.Mutex
var auctionItemStatBeforeDeleteHooks []AuctionItemStatHook
var auctionItemStatAfterDeleteMu sync.Mutex
var auctionItemStatAfterDeleteHooks []AuctionItemStatHook

var auctionItemStatBeforeUpsertMu sync.Mutex
var auctionItemStatBeforeUpsertHooks []AuctionItemStatHook
var auctionItemStatAfterUpsertMu sync.Mutex
var auctionItemStatAfterUpsertHooks []AuctionItemStatHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AuctionItemStat) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range auctionItemStatAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AuctionItemStat) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range auctionItemStatBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AuctionItemStat) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range auctionItemStatAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AuctionItemStat) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range auctionItemStatBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AuctionItemStat) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range auctionItemStatAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AuctionItemStat) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range auctionItemStatBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AuctionItemStat) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range auctionItemStatAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AuctionItemStat) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range auctionItemStatBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AuctionItemStat) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range auctionItemStatAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAuctionItemStatHook registers your hook function for all future operations.
func AddAuctionItemStatHook(hookPoint boil.HookPoint, auctionItemStatHook AuctionItemStatHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		auctionItemStatAfterSelectMu.Lock()
		auctionItemStatAfterSelectHooks = append(auctionItemStatAfterSelectHooks, auctionItemStatHook)
		auctionItemStatAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		auctionItemStatBeforeInsertMu.Lock()
		auctionItemStatBeforeInsertHooks = append(auctionItemStatBeforeInsertHooks, auctionItemStatHook)
		auctionItemStatBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		auctionItemStatAfterInsertMu.Lock()
		auctionItemStatAfterInsertHooks = append(auctionItemStatAfterInsertHooks, auctionItemStatHook)
		auctionItemStatAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		auctionItemStatBeforeUpdateMu.Lock()
		auctionItemStatBeforeUpdateHooks = append(auctionItemStatBeforeUpdateHooks, auctionItemStatHook)
		auctionItemStatBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		auctionItemStatAfterUpdateMu.Lock()
		auctionItemStatAfterUpdateHooks = append(auctionItemStatAfterUpdateHooks, auctionItemStatHook)
		auctionItemStatAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		auctionItemStatBeforeDeleteMu.Lock()
		auctionItemStatBeforeDeleteHooks = append(auctionItemStatBeforeDeleteHooks, auctionItemStatHook)
		auctionItemStatBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		auctionItemStatAfterDeleteMu.Lock()
		auctionItemStatAfterDeleteHooks = append(auctionItemStatAfterDeleteHooks, auctionItemStatHook)
		auctionItemStatAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		auctionItemStatBeforeUpsertMu.Lock()
		auctionItemStatBeforeUpsertHooks = append(auctionItemStatBeforeUpsertHooks, auctionItemStatHook)
		auctionItemStatBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		auctionItemStatAfterUpsertMu.Lock()
		auctionItemStatAfterUpsertHooks = append(auctionItemStatAfterUpsertHooks, auctionItemStatHook)
		auctionItemStatAfterUpsertMu.Unlock()
	}
}

// OneG returns a single auctionItemStat record from the query using the global executor.
func (q auctionItemStatQuery) OneG(ctx context.Context) (*AuctionItemStat, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single auctionItemStat record from the query.
func (q auctionItemStatQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AuctionItemStat, error) {
	o := &AuctionItemStat{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for auction_item_stat")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all AuctionItemStat records from the query using the global executor.
func (q auctionItemStatQuery) AllG(ctx context.Context) (AuctionItemStatSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all AuctionItemStat records from the query.
func (q auctionItemStatQuery) All(ctx context.Context, exec boil.ContextExecutor) (AuctionItemStatSlice, error) {
	var o []*AuctionItemStat

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AuctionItemStat slice")
	}

	if len(auctionItemStatAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all AuctionItemStat records in the query using the global executor
func (q auctionItemStatQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all AuctionItemStat records in the query.
func (q auctionItemStatQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count auction_item_stat rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q auctionItemStatQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q auctionItemStatQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if auction_item_stat exists")
	}

	return count > 0, nil
}

// AuctionItem pointed to by the foreign key.
func (o *AuctionItemStat) AuctionItem(mods ...qm.QueryMod) auctionItemQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AuctionItemID),
	}

	queryMods = append(queryMods, mods...)

	return AuctionItems(queryMods...)
}

// LoadAuctionItem allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (auctionItemStatL) LoadAuctionItem(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAuctionItemStat interface{}, mods queries.Applicator) error {
	var slice []*AuctionItemStat
	var object *AuctionItemStat

	if singular {
		var ok bool
		object, ok = maybeAuctionItemStat.(*AuctionItemStat)
		if !ok {
			object = new(AuctionItemStat)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAuctionItemStat)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAuctionItemStat))
			}
		}
	} else {
		s, ok := maybeAuctionItemStat.(*[]*AuctionItemStat)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAuctionItemStat)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAuctionItemStat))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &auctionItemStatR{}
		}
		args[object.AuctionItemID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &auctionItemStatR{}
			}

			args[obj.AuctionItemID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`auction_item`),
		qm.WhereIn(`auction_item.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load AuctionItem")
	}

	var resultSlice []*AuctionItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice AuctionItem")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for auction_item")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for auction_item")
	}

	if len(auctionItemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.AuctionItem = foreign
		if foreign.R == nil {
			foreign.R = &auctionItemR{}
		}
		foreign.R.AuctionItemStats = append(foreign.R.AuctionItemStats, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AuctionItemID == foreign.ID {
				local.R.AuctionItem = foreign
				if foreign.R == nil {
					foreign.R = &auctionItemR{}
				}
				foreign.R.AuctionItemStats = append(foreign.R.AuctionItemStats, local)
				break
			}
		}
	}

	return nil
}

// SetAuctionItemG of the auctionItemStat to the related item.
// Sets o.R.AuctionItem to related.
// Adds o to related.R.AuctionItemStats.
// Uses the global database handle.
func (o *AuctionItemStat) SetAuctionItemG(ctx context.Context, insert bool, related *AuctionItem) error {
	return o.SetAuctionItem(ctx, boil.GetContextDB(), insert, related)
}

// SetAuctionItem of the auctionItemStat to the related item.
// Sets o.R.AuctionItem to related.
// Adds o to related.R.AuctionItemStats.
func (o *AuctionItemStat) SetAuctionItem(ctx context.Context, exec boil.ContextExecutor, insert bool, related *AuctionItem) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"auction_item_stat\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"auction_item_id"}),
		strmangle.WhereClause("\"", "\"", 2, auctionItemStatPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AuctionItemID = related.ID
	if o.R == nil {
		o.R = &auctionItemStatR{
			AuctionItem: related,
		}
	} else {
		o.R.AuctionItem = related
	}

	if related.R == nil {
		related.R = &auctionItemR{
			AuctionItemStats: AuctionItemStatSlice{o},
		}
	} else {
		related.R.AuctionItemStats = append(related.R.AuctionItemStats, o)
	}

	return nil
}

// AuctionItemStats retrieves all the records using an executor.
func AuctionItemStats(mods ...qm.QueryMod) auctionItemStatQuery {
	mods = append(mods, qm.From("\"auction_item_stat\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"auction_item_stat\".*"})
	}

	return auctionItemStatQuery{q}
}

// FindAuctionItemStatG retrieves a single record by ID.
func FindAuctionItemStatG(ctx context.Context, iD int, selectCols ...string) (*AuctionItemStat, error) {
	return FindAuctionItemStat(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindAuctionItemStat retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAuctionItemStat(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*AuctionItemStat, error) {
	auctionItemStatObj := &AuctionItemStat{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"auction_item_stat\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, auctionItemStatObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from auction_item_stat")
	}

	if err = auctionItemStatObj.doAfterSelectHooks(ctx, exec); err != nil {
		return auctionItemStatObj, err
	}

	return auctionItemStatObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *AuctionItemStat) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AuctionItemStat) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no auction_item_stat provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(auctionItemStatColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	auctionItemStatInsertCacheMut.RLock()
	cache, cached := auctionItemStatInsertCache[key]
	auctionItemStatInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			auctionItemStatAllColumns,
			auctionItemStatColumnsWithDefault,
			auctionItemStatColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(auctionItemStatType, auctionItemStatMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(auctionItemStatType, auctionItemStatMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"auction_item_stat\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"auction_item_stat\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into auction_item_stat")
	}

	if !cached {
		auctionItemStatInsertCacheMut.Lock()
		auctionItemStatInsertCache[key] = cache
		auctionItemStatInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single AuctionItemStat record using the global executor.
// See Update for more documentation.
func (o *AuctionItemStat) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the AuctionItemStat.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AuctionItemStat) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	auctionItemStatUpdateCacheMut.RLock()
	cache, cached := auctionItemStatUpdateCache[key]
	auctionItemStatUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			auctionItemStatAllColumns,
			auctionItemStatPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update auction_item_stat, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"auction_item_stat\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, auctionItemStatPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(auctionItemStatType, auctionItemStatMapping, append(wl, auctionItemStatPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update auction_item_stat row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for auction_item_stat")
	}

	if !cached {
		auctionItemStatUpdateCacheMut.Lock()
		auctionItemStatUpdateCache[key] = cache
		auctionItemStatUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q auctionItemStatQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q auctionItemStatQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for auction_item_stat")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for auction_item_stat")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o AuctionItemStatSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AuctionItemStatSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), auctionItemStatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"auction_item_stat\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, auctionItemStatPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in auctionItemStat slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all auctionItemStat")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *AuctionItemStat) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AuctionItemStat) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no auction_item_stat provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(auctionItemStatColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	auctionItemStatUpsertCacheMut.RLock()
	cache, cached := auctionItemStatUpsertCache[key]
	auctionItemStatUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			auctionItemStatAllColumns,
			auctionItemStatColumnsWithDefault,
			auctionItemStatColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			auctionItemStatAllColumns,
			auctionItemStatPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert auction_item_stat, could not build update column list")
		}

		ret := strmangle.SetComplement(auctionItemStatAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(auctionItemStatPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert auction_item_stat, could not build conflict column list")
			}

			conflict = make([]string, len(auctionItemStatPrimaryKeyColumns))
			copy(conflict, auctionItemStatPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"auction_item_stat\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(auctionItemStatType, auctionItemStatMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(auctionItemStatType, auctionItemStatMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert auction_item_stat")
	}

	if !cached {
		auctionItemStatUpsertCacheMut.Lock()
		auctionItemStatUpsertCache[key] = cache
		auctionItemStatUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single AuctionItemStat record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *AuctionItemStat) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single AuctionItemStat record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AuctionItemStat) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AuctionItemStat provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), auctionItemStatPrimaryKeyMapping)
	sql := "DELETE FROM \"auction_item_stat\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from auction_item_stat")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for auction_item_stat")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q auctionItemStatQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q auctionItemStatQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no auctionItemStatQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from auction_item_stat")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for auction_item_stat")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o AuctionItemStatSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AuctionItemStatSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(auctionItemStatBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), auctionItemStatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"auction_item_stat\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, auctionItemStatPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from auctionItemStat slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for auction_item_stat")
	}

	if len(auctionItemStatAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *AuctionItemStat) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no AuctionItemStat provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AuctionItemStat) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAuctionItemStat(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AuctionItemStatSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty AuctionItemStatSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AuctionItemStatSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AuctionItemStatSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), auctionItemStatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"auction_item_stat\".* FROM \"auction_item_stat\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, auctionItemStatPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AuctionItemStatSlice")
	}

	*o = slice

	return nil
}

// AuctionItemStatExistsG checks if the AuctionItemStat row exists.
func AuctionItemStatExistsG(ctx context.Context, iD int) (bool, error) {
	return AuctionItemStatExists(ctx, boil.GetContextDB(), iD)
}

// AuctionItemStatExists checks if the AuctionItemStat row exists.
func AuctionItemStatExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"auction_item_stat\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if auction_item_stat exists")
	}

	return exists, nil
}

// Exists checks if the AuctionItemStat row exists.
func (o *AuctionItemStat) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AuctionItemStatExists(ctx, exec, o.ID)
}
