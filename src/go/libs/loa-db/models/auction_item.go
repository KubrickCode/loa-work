// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/sqlboiler/v4/types"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// AuctionItem is an object representing the database table.
type AuctionItem struct {
	ID                    int           `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt             time.Time     `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt             time.Time     `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	Name                  string        `boil:"name" json:"name" toml:"name" yaml:"name"`
	IsStatScraperEnabled  bool          `boil:"is_stat_scraper_enabled" json:"is_stat_scraper_enabled" toml:"is_stat_scraper_enabled" yaml:"is_stat_scraper_enabled"`
	AuctionItemCategoryID int           `boil:"auction_item_category_id" json:"auction_item_category_id" toml:"auction_item_category_id" yaml:"auction_item_category_id"`
	ImageURL              string        `boil:"image_url" json:"image_url" toml:"image_url" yaml:"image_url"`
	AvgBuyPrice           types.Decimal `boil:"avg_buy_price" json:"avg_buy_price" toml:"avg_buy_price" yaml:"avg_buy_price"`

	R *auctionItemR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L auctionItemL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AuctionItemColumns = struct {
	ID                    string
	CreatedAt             string
	UpdatedAt             string
	Name                  string
	IsStatScraperEnabled  string
	AuctionItemCategoryID string
	ImageURL              string
	AvgBuyPrice           string
}{
	ID:                    "id",
	CreatedAt:             "created_at",
	UpdatedAt:             "updated_at",
	Name:                  "name",
	IsStatScraperEnabled:  "is_stat_scraper_enabled",
	AuctionItemCategoryID: "auction_item_category_id",
	ImageURL:              "image_url",
	AvgBuyPrice:           "avg_buy_price",
}

var AuctionItemTableColumns = struct {
	ID                    string
	CreatedAt             string
	UpdatedAt             string
	Name                  string
	IsStatScraperEnabled  string
	AuctionItemCategoryID string
	ImageURL              string
	AvgBuyPrice           string
}{
	ID:                    "auction_item.id",
	CreatedAt:             "auction_item.created_at",
	UpdatedAt:             "auction_item.updated_at",
	Name:                  "auction_item.name",
	IsStatScraperEnabled:  "auction_item.is_stat_scraper_enabled",
	AuctionItemCategoryID: "auction_item.auction_item_category_id",
	ImageURL:              "auction_item.image_url",
	AvgBuyPrice:           "auction_item.avg_buy_price",
}

// Generated where

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelpertypes_Decimal struct{ field string }

func (w whereHelpertypes_Decimal) EQ(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_Decimal) NEQ(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_Decimal) LT(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_Decimal) LTE(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_Decimal) GT(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_Decimal) GTE(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var AuctionItemWhere = struct {
	ID                    whereHelperint
	CreatedAt             whereHelpertime_Time
	UpdatedAt             whereHelpertime_Time
	Name                  whereHelperstring
	IsStatScraperEnabled  whereHelperbool
	AuctionItemCategoryID whereHelperint
	ImageURL              whereHelperstring
	AvgBuyPrice           whereHelpertypes_Decimal
}{
	ID:                    whereHelperint{field: "\"auction_item\".\"id\""},
	CreatedAt:             whereHelpertime_Time{field: "\"auction_item\".\"created_at\""},
	UpdatedAt:             whereHelpertime_Time{field: "\"auction_item\".\"updated_at\""},
	Name:                  whereHelperstring{field: "\"auction_item\".\"name\""},
	IsStatScraperEnabled:  whereHelperbool{field: "\"auction_item\".\"is_stat_scraper_enabled\""},
	AuctionItemCategoryID: whereHelperint{field: "\"auction_item\".\"auction_item_category_id\""},
	ImageURL:              whereHelperstring{field: "\"auction_item\".\"image_url\""},
	AvgBuyPrice:           whereHelpertypes_Decimal{field: "\"auction_item\".\"avg_buy_price\""},
}

// AuctionItemRels is where relationship names are stored.
var AuctionItemRels = struct {
	AuctionItemCategory string
	AuctionItemStats    string
}{
	AuctionItemCategory: "AuctionItemCategory",
	AuctionItemStats:    "AuctionItemStats",
}

// auctionItemR is where relationships are stored.
type auctionItemR struct {
	AuctionItemCategory *AuctionItemCategory `boil:"AuctionItemCategory" json:"AuctionItemCategory" toml:"AuctionItemCategory" yaml:"AuctionItemCategory"`
	AuctionItemStats    AuctionItemStatSlice `boil:"AuctionItemStats" json:"AuctionItemStats" toml:"AuctionItemStats" yaml:"AuctionItemStats"`
}

// NewStruct creates a new relationship struct
func (*auctionItemR) NewStruct() *auctionItemR {
	return &auctionItemR{}
}

func (o *AuctionItem) GetAuctionItemCategory() *AuctionItemCategory {
	if o == nil {
		return nil
	}

	return o.R.GetAuctionItemCategory()
}

func (r *auctionItemR) GetAuctionItemCategory() *AuctionItemCategory {
	if r == nil {
		return nil
	}

	return r.AuctionItemCategory
}

func (o *AuctionItem) GetAuctionItemStats() AuctionItemStatSlice {
	if o == nil {
		return nil
	}

	return o.R.GetAuctionItemStats()
}

func (r *auctionItemR) GetAuctionItemStats() AuctionItemStatSlice {
	if r == nil {
		return nil
	}

	return r.AuctionItemStats
}

// auctionItemL is where Load methods for each relationship are stored.
type auctionItemL struct{}

var (
	auctionItemAllColumns            = []string{"id", "created_at", "updated_at", "name", "is_stat_scraper_enabled", "auction_item_category_id", "image_url", "avg_buy_price"}
	auctionItemColumnsWithoutDefault = []string{"updated_at", "name", "auction_item_category_id", "image_url"}
	auctionItemColumnsWithDefault    = []string{"id", "created_at", "is_stat_scraper_enabled", "avg_buy_price"}
	auctionItemPrimaryKeyColumns     = []string{"id"}
	auctionItemGeneratedColumns      = []string{}
)

type (
	// AuctionItemSlice is an alias for a slice of pointers to AuctionItem.
	// This should almost always be used instead of []AuctionItem.
	AuctionItemSlice []*AuctionItem
	// AuctionItemHook is the signature for custom AuctionItem hook methods
	AuctionItemHook func(context.Context, boil.ContextExecutor, *AuctionItem) error

	auctionItemQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	auctionItemType                 = reflect.TypeOf(&AuctionItem{})
	auctionItemMapping              = queries.MakeStructMapping(auctionItemType)
	auctionItemPrimaryKeyMapping, _ = queries.BindMapping(auctionItemType, auctionItemMapping, auctionItemPrimaryKeyColumns)
	auctionItemInsertCacheMut       sync.RWMutex
	auctionItemInsertCache          = make(map[string]insertCache)
	auctionItemUpdateCacheMut       sync.RWMutex
	auctionItemUpdateCache          = make(map[string]updateCache)
	auctionItemUpsertCacheMut       sync.RWMutex
	auctionItemUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var auctionItemAfterSelectMu sync.Mutex
var auctionItemAfterSelectHooks []AuctionItemHook

var auctionItemBeforeInsertMu sync.Mutex
var auctionItemBeforeInsertHooks []AuctionItemHook
var auctionItemAfterInsertMu sync.Mutex
var auctionItemAfterInsertHooks []AuctionItemHook

var auctionItemBeforeUpdateMu sync.Mutex
var auctionItemBeforeUpdateHooks []AuctionItemHook
var auctionItemAfterUpdateMu sync.Mutex
var auctionItemAfterUpdateHooks []AuctionItemHook

var auctionItemBeforeDeleteMu sync.Mutex
var auctionItemBeforeDeleteHooks []AuctionItemHook
var auctionItemAfterDeleteMu sync.Mutex
var auctionItemAfterDeleteHooks []AuctionItemHook

var auctionItemBeforeUpsertMu sync.Mutex
var auctionItemBeforeUpsertHooks []AuctionItemHook
var auctionItemAfterUpsertMu sync.Mutex
var auctionItemAfterUpsertHooks []AuctionItemHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AuctionItem) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range auctionItemAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AuctionItem) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range auctionItemBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AuctionItem) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range auctionItemAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AuctionItem) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range auctionItemBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AuctionItem) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range auctionItemAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AuctionItem) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range auctionItemBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AuctionItem) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range auctionItemAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AuctionItem) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range auctionItemBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AuctionItem) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range auctionItemAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAuctionItemHook registers your hook function for all future operations.
func AddAuctionItemHook(hookPoint boil.HookPoint, auctionItemHook AuctionItemHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		auctionItemAfterSelectMu.Lock()
		auctionItemAfterSelectHooks = append(auctionItemAfterSelectHooks, auctionItemHook)
		auctionItemAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		auctionItemBeforeInsertMu.Lock()
		auctionItemBeforeInsertHooks = append(auctionItemBeforeInsertHooks, auctionItemHook)
		auctionItemBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		auctionItemAfterInsertMu.Lock()
		auctionItemAfterInsertHooks = append(auctionItemAfterInsertHooks, auctionItemHook)
		auctionItemAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		auctionItemBeforeUpdateMu.Lock()
		auctionItemBeforeUpdateHooks = append(auctionItemBeforeUpdateHooks, auctionItemHook)
		auctionItemBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		auctionItemAfterUpdateMu.Lock()
		auctionItemAfterUpdateHooks = append(auctionItemAfterUpdateHooks, auctionItemHook)
		auctionItemAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		auctionItemBeforeDeleteMu.Lock()
		auctionItemBeforeDeleteHooks = append(auctionItemBeforeDeleteHooks, auctionItemHook)
		auctionItemBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		auctionItemAfterDeleteMu.Lock()
		auctionItemAfterDeleteHooks = append(auctionItemAfterDeleteHooks, auctionItemHook)
		auctionItemAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		auctionItemBeforeUpsertMu.Lock()
		auctionItemBeforeUpsertHooks = append(auctionItemBeforeUpsertHooks, auctionItemHook)
		auctionItemBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		auctionItemAfterUpsertMu.Lock()
		auctionItemAfterUpsertHooks = append(auctionItemAfterUpsertHooks, auctionItemHook)
		auctionItemAfterUpsertMu.Unlock()
	}
}

// OneG returns a single auctionItem record from the query using the global executor.
func (q auctionItemQuery) OneG(ctx context.Context) (*AuctionItem, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single auctionItem record from the query.
func (q auctionItemQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AuctionItem, error) {
	o := &AuctionItem{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for auction_item")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all AuctionItem records from the query using the global executor.
func (q auctionItemQuery) AllG(ctx context.Context) (AuctionItemSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all AuctionItem records from the query.
func (q auctionItemQuery) All(ctx context.Context, exec boil.ContextExecutor) (AuctionItemSlice, error) {
	var o []*AuctionItem

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AuctionItem slice")
	}

	if len(auctionItemAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all AuctionItem records in the query using the global executor
func (q auctionItemQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all AuctionItem records in the query.
func (q auctionItemQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count auction_item rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q auctionItemQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q auctionItemQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if auction_item exists")
	}

	return count > 0, nil
}

// AuctionItemCategory pointed to by the foreign key.
func (o *AuctionItem) AuctionItemCategory(mods ...qm.QueryMod) auctionItemCategoryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AuctionItemCategoryID),
	}

	queryMods = append(queryMods, mods...)

	return AuctionItemCategories(queryMods...)
}

// AuctionItemStats retrieves all the auction_item_stat's AuctionItemStats with an executor.
func (o *AuctionItem) AuctionItemStats(mods ...qm.QueryMod) auctionItemStatQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"auction_item_stat\".\"auction_item_id\"=?", o.ID),
	)

	return AuctionItemStats(queryMods...)
}

// LoadAuctionItemCategory allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (auctionItemL) LoadAuctionItemCategory(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAuctionItem interface{}, mods queries.Applicator) error {
	var slice []*AuctionItem
	var object *AuctionItem

	if singular {
		var ok bool
		object, ok = maybeAuctionItem.(*AuctionItem)
		if !ok {
			object = new(AuctionItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAuctionItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAuctionItem))
			}
		}
	} else {
		s, ok := maybeAuctionItem.(*[]*AuctionItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAuctionItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAuctionItem))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &auctionItemR{}
		}
		args[object.AuctionItemCategoryID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &auctionItemR{}
			}

			args[obj.AuctionItemCategoryID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`auction_item_category`),
		qm.WhereIn(`auction_item_category.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load AuctionItemCategory")
	}

	var resultSlice []*AuctionItemCategory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice AuctionItemCategory")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for auction_item_category")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for auction_item_category")
	}

	if len(auctionItemCategoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.AuctionItemCategory = foreign
		if foreign.R == nil {
			foreign.R = &auctionItemCategoryR{}
		}
		foreign.R.AuctionItems = append(foreign.R.AuctionItems, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AuctionItemCategoryID == foreign.ID {
				local.R.AuctionItemCategory = foreign
				if foreign.R == nil {
					foreign.R = &auctionItemCategoryR{}
				}
				foreign.R.AuctionItems = append(foreign.R.AuctionItems, local)
				break
			}
		}
	}

	return nil
}

// LoadAuctionItemStats allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (auctionItemL) LoadAuctionItemStats(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAuctionItem interface{}, mods queries.Applicator) error {
	var slice []*AuctionItem
	var object *AuctionItem

	if singular {
		var ok bool
		object, ok = maybeAuctionItem.(*AuctionItem)
		if !ok {
			object = new(AuctionItem)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAuctionItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAuctionItem))
			}
		}
	} else {
		s, ok := maybeAuctionItem.(*[]*AuctionItem)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAuctionItem)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAuctionItem))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &auctionItemR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &auctionItemR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`auction_item_stat`),
		qm.WhereIn(`auction_item_stat.auction_item_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load auction_item_stat")
	}

	var resultSlice []*AuctionItemStat
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice auction_item_stat")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on auction_item_stat")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for auction_item_stat")
	}

	if len(auctionItemStatAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AuctionItemStats = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &auctionItemStatR{}
			}
			foreign.R.AuctionItem = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.AuctionItemID {
				local.R.AuctionItemStats = append(local.R.AuctionItemStats, foreign)
				if foreign.R == nil {
					foreign.R = &auctionItemStatR{}
				}
				foreign.R.AuctionItem = local
				break
			}
		}
	}

	return nil
}

// SetAuctionItemCategoryG of the auctionItem to the related item.
// Sets o.R.AuctionItemCategory to related.
// Adds o to related.R.AuctionItems.
// Uses the global database handle.
func (o *AuctionItem) SetAuctionItemCategoryG(ctx context.Context, insert bool, related *AuctionItemCategory) error {
	return o.SetAuctionItemCategory(ctx, boil.GetContextDB(), insert, related)
}

// SetAuctionItemCategory of the auctionItem to the related item.
// Sets o.R.AuctionItemCategory to related.
// Adds o to related.R.AuctionItems.
func (o *AuctionItem) SetAuctionItemCategory(ctx context.Context, exec boil.ContextExecutor, insert bool, related *AuctionItemCategory) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"auction_item\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"auction_item_category_id"}),
		strmangle.WhereClause("\"", "\"", 2, auctionItemPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AuctionItemCategoryID = related.ID
	if o.R == nil {
		o.R = &auctionItemR{
			AuctionItemCategory: related,
		}
	} else {
		o.R.AuctionItemCategory = related
	}

	if related.R == nil {
		related.R = &auctionItemCategoryR{
			AuctionItems: AuctionItemSlice{o},
		}
	} else {
		related.R.AuctionItems = append(related.R.AuctionItems, o)
	}

	return nil
}

// AddAuctionItemStatsG adds the given related objects to the existing relationships
// of the auction_item, optionally inserting them as new records.
// Appends related to o.R.AuctionItemStats.
// Sets related.R.AuctionItem appropriately.
// Uses the global database handle.
func (o *AuctionItem) AddAuctionItemStatsG(ctx context.Context, insert bool, related ...*AuctionItemStat) error {
	return o.AddAuctionItemStats(ctx, boil.GetContextDB(), insert, related...)
}

// AddAuctionItemStats adds the given related objects to the existing relationships
// of the auction_item, optionally inserting them as new records.
// Appends related to o.R.AuctionItemStats.
// Sets related.R.AuctionItem appropriately.
func (o *AuctionItem) AddAuctionItemStats(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AuctionItemStat) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.AuctionItemID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"auction_item_stat\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"auction_item_id"}),
				strmangle.WhereClause("\"", "\"", 2, auctionItemStatPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.AuctionItemID = o.ID
		}
	}

	if o.R == nil {
		o.R = &auctionItemR{
			AuctionItemStats: related,
		}
	} else {
		o.R.AuctionItemStats = append(o.R.AuctionItemStats, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &auctionItemStatR{
				AuctionItem: o,
			}
		} else {
			rel.R.AuctionItem = o
		}
	}
	return nil
}

// AuctionItems retrieves all the records using an executor.
func AuctionItems(mods ...qm.QueryMod) auctionItemQuery {
	mods = append(mods, qm.From("\"auction_item\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"auction_item\".*"})
	}

	return auctionItemQuery{q}
}

// FindAuctionItemG retrieves a single record by ID.
func FindAuctionItemG(ctx context.Context, iD int, selectCols ...string) (*AuctionItem, error) {
	return FindAuctionItem(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindAuctionItem retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAuctionItem(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*AuctionItem, error) {
	auctionItemObj := &AuctionItem{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"auction_item\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, auctionItemObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from auction_item")
	}

	if err = auctionItemObj.doAfterSelectHooks(ctx, exec); err != nil {
		return auctionItemObj, err
	}

	return auctionItemObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *AuctionItem) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AuctionItem) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no auction_item provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(auctionItemColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	auctionItemInsertCacheMut.RLock()
	cache, cached := auctionItemInsertCache[key]
	auctionItemInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			auctionItemAllColumns,
			auctionItemColumnsWithDefault,
			auctionItemColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(auctionItemType, auctionItemMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(auctionItemType, auctionItemMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"auction_item\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"auction_item\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into auction_item")
	}

	if !cached {
		auctionItemInsertCacheMut.Lock()
		auctionItemInsertCache[key] = cache
		auctionItemInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single AuctionItem record using the global executor.
// See Update for more documentation.
func (o *AuctionItem) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the AuctionItem.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AuctionItem) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	auctionItemUpdateCacheMut.RLock()
	cache, cached := auctionItemUpdateCache[key]
	auctionItemUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			auctionItemAllColumns,
			auctionItemPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update auction_item, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"auction_item\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, auctionItemPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(auctionItemType, auctionItemMapping, append(wl, auctionItemPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update auction_item row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for auction_item")
	}

	if !cached {
		auctionItemUpdateCacheMut.Lock()
		auctionItemUpdateCache[key] = cache
		auctionItemUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q auctionItemQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q auctionItemQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for auction_item")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for auction_item")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o AuctionItemSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AuctionItemSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), auctionItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"auction_item\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, auctionItemPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in auctionItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all auctionItem")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *AuctionItem) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AuctionItem) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no auction_item provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(auctionItemColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	auctionItemUpsertCacheMut.RLock()
	cache, cached := auctionItemUpsertCache[key]
	auctionItemUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			auctionItemAllColumns,
			auctionItemColumnsWithDefault,
			auctionItemColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			auctionItemAllColumns,
			auctionItemPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert auction_item, could not build update column list")
		}

		ret := strmangle.SetComplement(auctionItemAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(auctionItemPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert auction_item, could not build conflict column list")
			}

			conflict = make([]string, len(auctionItemPrimaryKeyColumns))
			copy(conflict, auctionItemPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"auction_item\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(auctionItemType, auctionItemMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(auctionItemType, auctionItemMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert auction_item")
	}

	if !cached {
		auctionItemUpsertCacheMut.Lock()
		auctionItemUpsertCache[key] = cache
		auctionItemUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single AuctionItem record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *AuctionItem) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single AuctionItem record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AuctionItem) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AuctionItem provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), auctionItemPrimaryKeyMapping)
	sql := "DELETE FROM \"auction_item\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from auction_item")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for auction_item")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q auctionItemQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q auctionItemQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no auctionItemQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from auction_item")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for auction_item")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o AuctionItemSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AuctionItemSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(auctionItemBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), auctionItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"auction_item\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, auctionItemPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from auctionItem slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for auction_item")
	}

	if len(auctionItemAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *AuctionItem) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no AuctionItem provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AuctionItem) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAuctionItem(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AuctionItemSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty AuctionItemSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AuctionItemSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AuctionItemSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), auctionItemPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"auction_item\".* FROM \"auction_item\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, auctionItemPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AuctionItemSlice")
	}

	*o = slice

	return nil
}

// AuctionItemExistsG checks if the AuctionItem row exists.
func AuctionItemExistsG(ctx context.Context, iD int) (bool, error) {
	return AuctionItemExists(ctx, boil.GetContextDB(), iD)
}

// AuctionItemExists checks if the AuctionItem row exists.
func AuctionItemExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"auction_item\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if auction_item exists")
	}

	return exists, nil
}

// Exists checks if the AuctionItem row exists.
func (o *AuctionItem) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AuctionItemExists(ctx, exec, o.ID)
}
