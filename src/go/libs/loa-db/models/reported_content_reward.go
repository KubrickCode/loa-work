// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/sqlboiler/v4/types"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// ReportedContentReward is an object representing the database table.
type ReportedContentReward struct {
	ID              int           `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt       time.Time     `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	AverageQuantity types.Decimal `boil:"average_quantity" json:"average_quantity" toml:"average_quantity" yaml:"average_quantity"`
	ContentRewardID int           `boil:"content_reward_id" json:"content_reward_id" toml:"content_reward_id" yaml:"content_reward_id"`
	UserID          int           `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`

	R *reportedContentRewardR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L reportedContentRewardL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ReportedContentRewardColumns = struct {
	ID              string
	CreatedAt       string
	AverageQuantity string
	ContentRewardID string
	UserID          string
}{
	ID:              "id",
	CreatedAt:       "created_at",
	AverageQuantity: "average_quantity",
	ContentRewardID: "content_reward_id",
	UserID:          "user_id",
}

var ReportedContentRewardTableColumns = struct {
	ID              string
	CreatedAt       string
	AverageQuantity string
	ContentRewardID string
	UserID          string
}{
	ID:              "reported_content_reward.id",
	CreatedAt:       "reported_content_reward.created_at",
	AverageQuantity: "reported_content_reward.average_quantity",
	ContentRewardID: "reported_content_reward.content_reward_id",
	UserID:          "reported_content_reward.user_id",
}

// Generated where

var ReportedContentRewardWhere = struct {
	ID              whereHelperint
	CreatedAt       whereHelpertime_Time
	AverageQuantity whereHelpertypes_Decimal
	ContentRewardID whereHelperint
	UserID          whereHelperint
}{
	ID:              whereHelperint{field: "\"reported_content_reward\".\"id\""},
	CreatedAt:       whereHelpertime_Time{field: "\"reported_content_reward\".\"created_at\""},
	AverageQuantity: whereHelpertypes_Decimal{field: "\"reported_content_reward\".\"average_quantity\""},
	ContentRewardID: whereHelperint{field: "\"reported_content_reward\".\"content_reward_id\""},
	UserID:          whereHelperint{field: "\"reported_content_reward\".\"user_id\""},
}

// ReportedContentRewardRels is where relationship names are stored.
var ReportedContentRewardRels = struct {
	ContentReward string
	User          string
}{
	ContentReward: "ContentReward",
	User:          "User",
}

// reportedContentRewardR is where relationships are stored.
type reportedContentRewardR struct {
	ContentReward *ContentReward `boil:"ContentReward" json:"ContentReward" toml:"ContentReward" yaml:"ContentReward"`
	User          *User          `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*reportedContentRewardR) NewStruct() *reportedContentRewardR {
	return &reportedContentRewardR{}
}

func (o *ReportedContentReward) GetContentReward() *ContentReward {
	if o == nil {
		return nil
	}

	return o.R.GetContentReward()
}

func (r *reportedContentRewardR) GetContentReward() *ContentReward {
	if r == nil {
		return nil
	}

	return r.ContentReward
}

func (o *ReportedContentReward) GetUser() *User {
	if o == nil {
		return nil
	}

	return o.R.GetUser()
}

func (r *reportedContentRewardR) GetUser() *User {
	if r == nil {
		return nil
	}

	return r.User
}

// reportedContentRewardL is where Load methods for each relationship are stored.
type reportedContentRewardL struct{}

var (
	reportedContentRewardAllColumns            = []string{"id", "created_at", "average_quantity", "content_reward_id", "user_id"}
	reportedContentRewardColumnsWithoutDefault = []string{"average_quantity", "content_reward_id", "user_id"}
	reportedContentRewardColumnsWithDefault    = []string{"id", "created_at"}
	reportedContentRewardPrimaryKeyColumns     = []string{"id"}
	reportedContentRewardGeneratedColumns      = []string{}
)

type (
	// ReportedContentRewardSlice is an alias for a slice of pointers to ReportedContentReward.
	// This should almost always be used instead of []ReportedContentReward.
	ReportedContentRewardSlice []*ReportedContentReward
	// ReportedContentRewardHook is the signature for custom ReportedContentReward hook methods
	ReportedContentRewardHook func(context.Context, boil.ContextExecutor, *ReportedContentReward) error

	reportedContentRewardQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	reportedContentRewardType                 = reflect.TypeOf(&ReportedContentReward{})
	reportedContentRewardMapping              = queries.MakeStructMapping(reportedContentRewardType)
	reportedContentRewardPrimaryKeyMapping, _ = queries.BindMapping(reportedContentRewardType, reportedContentRewardMapping, reportedContentRewardPrimaryKeyColumns)
	reportedContentRewardInsertCacheMut       sync.RWMutex
	reportedContentRewardInsertCache          = make(map[string]insertCache)
	reportedContentRewardUpdateCacheMut       sync.RWMutex
	reportedContentRewardUpdateCache          = make(map[string]updateCache)
	reportedContentRewardUpsertCacheMut       sync.RWMutex
	reportedContentRewardUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var reportedContentRewardAfterSelectMu sync.Mutex
var reportedContentRewardAfterSelectHooks []ReportedContentRewardHook

var reportedContentRewardBeforeInsertMu sync.Mutex
var reportedContentRewardBeforeInsertHooks []ReportedContentRewardHook
var reportedContentRewardAfterInsertMu sync.Mutex
var reportedContentRewardAfterInsertHooks []ReportedContentRewardHook

var reportedContentRewardBeforeUpdateMu sync.Mutex
var reportedContentRewardBeforeUpdateHooks []ReportedContentRewardHook
var reportedContentRewardAfterUpdateMu sync.Mutex
var reportedContentRewardAfterUpdateHooks []ReportedContentRewardHook

var reportedContentRewardBeforeDeleteMu sync.Mutex
var reportedContentRewardBeforeDeleteHooks []ReportedContentRewardHook
var reportedContentRewardAfterDeleteMu sync.Mutex
var reportedContentRewardAfterDeleteHooks []ReportedContentRewardHook

var reportedContentRewardBeforeUpsertMu sync.Mutex
var reportedContentRewardBeforeUpsertHooks []ReportedContentRewardHook
var reportedContentRewardAfterUpsertMu sync.Mutex
var reportedContentRewardAfterUpsertHooks []ReportedContentRewardHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ReportedContentReward) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reportedContentRewardAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ReportedContentReward) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reportedContentRewardBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ReportedContentReward) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reportedContentRewardAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ReportedContentReward) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reportedContentRewardBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ReportedContentReward) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reportedContentRewardAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ReportedContentReward) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reportedContentRewardBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ReportedContentReward) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reportedContentRewardAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ReportedContentReward) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reportedContentRewardBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ReportedContentReward) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range reportedContentRewardAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddReportedContentRewardHook registers your hook function for all future operations.
func AddReportedContentRewardHook(hookPoint boil.HookPoint, reportedContentRewardHook ReportedContentRewardHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		reportedContentRewardAfterSelectMu.Lock()
		reportedContentRewardAfterSelectHooks = append(reportedContentRewardAfterSelectHooks, reportedContentRewardHook)
		reportedContentRewardAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		reportedContentRewardBeforeInsertMu.Lock()
		reportedContentRewardBeforeInsertHooks = append(reportedContentRewardBeforeInsertHooks, reportedContentRewardHook)
		reportedContentRewardBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		reportedContentRewardAfterInsertMu.Lock()
		reportedContentRewardAfterInsertHooks = append(reportedContentRewardAfterInsertHooks, reportedContentRewardHook)
		reportedContentRewardAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		reportedContentRewardBeforeUpdateMu.Lock()
		reportedContentRewardBeforeUpdateHooks = append(reportedContentRewardBeforeUpdateHooks, reportedContentRewardHook)
		reportedContentRewardBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		reportedContentRewardAfterUpdateMu.Lock()
		reportedContentRewardAfterUpdateHooks = append(reportedContentRewardAfterUpdateHooks, reportedContentRewardHook)
		reportedContentRewardAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		reportedContentRewardBeforeDeleteMu.Lock()
		reportedContentRewardBeforeDeleteHooks = append(reportedContentRewardBeforeDeleteHooks, reportedContentRewardHook)
		reportedContentRewardBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		reportedContentRewardAfterDeleteMu.Lock()
		reportedContentRewardAfterDeleteHooks = append(reportedContentRewardAfterDeleteHooks, reportedContentRewardHook)
		reportedContentRewardAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		reportedContentRewardBeforeUpsertMu.Lock()
		reportedContentRewardBeforeUpsertHooks = append(reportedContentRewardBeforeUpsertHooks, reportedContentRewardHook)
		reportedContentRewardBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		reportedContentRewardAfterUpsertMu.Lock()
		reportedContentRewardAfterUpsertHooks = append(reportedContentRewardAfterUpsertHooks, reportedContentRewardHook)
		reportedContentRewardAfterUpsertMu.Unlock()
	}
}

// OneG returns a single reportedContentReward record from the query using the global executor.
func (q reportedContentRewardQuery) OneG(ctx context.Context) (*ReportedContentReward, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single reportedContentReward record from the query.
func (q reportedContentRewardQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ReportedContentReward, error) {
	o := &ReportedContentReward{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for reported_content_reward")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all ReportedContentReward records from the query using the global executor.
func (q reportedContentRewardQuery) AllG(ctx context.Context) (ReportedContentRewardSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all ReportedContentReward records from the query.
func (q reportedContentRewardQuery) All(ctx context.Context, exec boil.ContextExecutor) (ReportedContentRewardSlice, error) {
	var o []*ReportedContentReward

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ReportedContentReward slice")
	}

	if len(reportedContentRewardAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all ReportedContentReward records in the query using the global executor
func (q reportedContentRewardQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all ReportedContentReward records in the query.
func (q reportedContentRewardQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count reported_content_reward rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q reportedContentRewardQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q reportedContentRewardQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if reported_content_reward exists")
	}

	return count > 0, nil
}

// ContentReward pointed to by the foreign key.
func (o *ReportedContentReward) ContentReward(mods ...qm.QueryMod) contentRewardQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ContentRewardID),
	}

	queryMods = append(queryMods, mods...)

	return ContentRewards(queryMods...)
}

// User pointed to by the foreign key.
func (o *ReportedContentReward) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadContentReward allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (reportedContentRewardL) LoadContentReward(ctx context.Context, e boil.ContextExecutor, singular bool, maybeReportedContentReward interface{}, mods queries.Applicator) error {
	var slice []*ReportedContentReward
	var object *ReportedContentReward

	if singular {
		var ok bool
		object, ok = maybeReportedContentReward.(*ReportedContentReward)
		if !ok {
			object = new(ReportedContentReward)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeReportedContentReward)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeReportedContentReward))
			}
		}
	} else {
		s, ok := maybeReportedContentReward.(*[]*ReportedContentReward)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeReportedContentReward)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeReportedContentReward))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &reportedContentRewardR{}
		}
		args[object.ContentRewardID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &reportedContentRewardR{}
			}

			args[obj.ContentRewardID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`content_reward`),
		qm.WhereIn(`content_reward.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ContentReward")
	}

	var resultSlice []*ContentReward
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ContentReward")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for content_reward")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for content_reward")
	}

	if len(contentRewardAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ContentReward = foreign
		if foreign.R == nil {
			foreign.R = &contentRewardR{}
		}
		foreign.R.ReportedContentRewards = append(foreign.R.ReportedContentRewards, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ContentRewardID == foreign.ID {
				local.R.ContentReward = foreign
				if foreign.R == nil {
					foreign.R = &contentRewardR{}
				}
				foreign.R.ReportedContentRewards = append(foreign.R.ReportedContentRewards, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (reportedContentRewardL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeReportedContentReward interface{}, mods queries.Applicator) error {
	var slice []*ReportedContentReward
	var object *ReportedContentReward

	if singular {
		var ok bool
		object, ok = maybeReportedContentReward.(*ReportedContentReward)
		if !ok {
			object = new(ReportedContentReward)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeReportedContentReward)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeReportedContentReward))
			}
		}
	} else {
		s, ok := maybeReportedContentReward.(*[]*ReportedContentReward)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeReportedContentReward)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeReportedContentReward))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &reportedContentRewardR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &reportedContentRewardR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`user`),
		qm.WhereIn(`user.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.ReportedContentRewards = append(foreign.R.ReportedContentRewards, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.ReportedContentRewards = append(foreign.R.ReportedContentRewards, local)
				break
			}
		}
	}

	return nil
}

// SetContentRewardG of the reportedContentReward to the related item.
// Sets o.R.ContentReward to related.
// Adds o to related.R.ReportedContentRewards.
// Uses the global database handle.
func (o *ReportedContentReward) SetContentRewardG(ctx context.Context, insert bool, related *ContentReward) error {
	return o.SetContentReward(ctx, boil.GetContextDB(), insert, related)
}

// SetContentReward of the reportedContentReward to the related item.
// Sets o.R.ContentReward to related.
// Adds o to related.R.ReportedContentRewards.
func (o *ReportedContentReward) SetContentReward(ctx context.Context, exec boil.ContextExecutor, insert bool, related *ContentReward) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"reported_content_reward\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"content_reward_id"}),
		strmangle.WhereClause("\"", "\"", 2, reportedContentRewardPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ContentRewardID = related.ID
	if o.R == nil {
		o.R = &reportedContentRewardR{
			ContentReward: related,
		}
	} else {
		o.R.ContentReward = related
	}

	if related.R == nil {
		related.R = &contentRewardR{
			ReportedContentRewards: ReportedContentRewardSlice{o},
		}
	} else {
		related.R.ReportedContentRewards = append(related.R.ReportedContentRewards, o)
	}

	return nil
}

// SetUserG of the reportedContentReward to the related item.
// Sets o.R.User to related.
// Adds o to related.R.ReportedContentRewards.
// Uses the global database handle.
func (o *ReportedContentReward) SetUserG(ctx context.Context, insert bool, related *User) error {
	return o.SetUser(ctx, boil.GetContextDB(), insert, related)
}

// SetUser of the reportedContentReward to the related item.
// Sets o.R.User to related.
// Adds o to related.R.ReportedContentRewards.
func (o *ReportedContentReward) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"reported_content_reward\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, reportedContentRewardPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &reportedContentRewardR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			ReportedContentRewards: ReportedContentRewardSlice{o},
		}
	} else {
		related.R.ReportedContentRewards = append(related.R.ReportedContentRewards, o)
	}

	return nil
}

// ReportedContentRewards retrieves all the records using an executor.
func ReportedContentRewards(mods ...qm.QueryMod) reportedContentRewardQuery {
	mods = append(mods, qm.From("\"reported_content_reward\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"reported_content_reward\".*"})
	}

	return reportedContentRewardQuery{q}
}

// FindReportedContentRewardG retrieves a single record by ID.
func FindReportedContentRewardG(ctx context.Context, iD int, selectCols ...string) (*ReportedContentReward, error) {
	return FindReportedContentReward(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindReportedContentReward retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindReportedContentReward(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ReportedContentReward, error) {
	reportedContentRewardObj := &ReportedContentReward{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"reported_content_reward\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, reportedContentRewardObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from reported_content_reward")
	}

	if err = reportedContentRewardObj.doAfterSelectHooks(ctx, exec); err != nil {
		return reportedContentRewardObj, err
	}

	return reportedContentRewardObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *ReportedContentReward) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ReportedContentReward) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no reported_content_reward provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(reportedContentRewardColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	reportedContentRewardInsertCacheMut.RLock()
	cache, cached := reportedContentRewardInsertCache[key]
	reportedContentRewardInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			reportedContentRewardAllColumns,
			reportedContentRewardColumnsWithDefault,
			reportedContentRewardColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(reportedContentRewardType, reportedContentRewardMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(reportedContentRewardType, reportedContentRewardMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"reported_content_reward\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"reported_content_reward\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into reported_content_reward")
	}

	if !cached {
		reportedContentRewardInsertCacheMut.Lock()
		reportedContentRewardInsertCache[key] = cache
		reportedContentRewardInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single ReportedContentReward record using the global executor.
// See Update for more documentation.
func (o *ReportedContentReward) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the ReportedContentReward.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ReportedContentReward) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	reportedContentRewardUpdateCacheMut.RLock()
	cache, cached := reportedContentRewardUpdateCache[key]
	reportedContentRewardUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			reportedContentRewardAllColumns,
			reportedContentRewardPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update reported_content_reward, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"reported_content_reward\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, reportedContentRewardPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(reportedContentRewardType, reportedContentRewardMapping, append(wl, reportedContentRewardPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update reported_content_reward row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for reported_content_reward")
	}

	if !cached {
		reportedContentRewardUpdateCacheMut.Lock()
		reportedContentRewardUpdateCache[key] = cache
		reportedContentRewardUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q reportedContentRewardQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q reportedContentRewardQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for reported_content_reward")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for reported_content_reward")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ReportedContentRewardSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ReportedContentRewardSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), reportedContentRewardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"reported_content_reward\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, reportedContentRewardPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in reportedContentReward slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all reportedContentReward")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *ReportedContentReward) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ReportedContentReward) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no reported_content_reward provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(reportedContentRewardColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	reportedContentRewardUpsertCacheMut.RLock()
	cache, cached := reportedContentRewardUpsertCache[key]
	reportedContentRewardUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			reportedContentRewardAllColumns,
			reportedContentRewardColumnsWithDefault,
			reportedContentRewardColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			reportedContentRewardAllColumns,
			reportedContentRewardPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert reported_content_reward, could not build update column list")
		}

		ret := strmangle.SetComplement(reportedContentRewardAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(reportedContentRewardPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert reported_content_reward, could not build conflict column list")
			}

			conflict = make([]string, len(reportedContentRewardPrimaryKeyColumns))
			copy(conflict, reportedContentRewardPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"reported_content_reward\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(reportedContentRewardType, reportedContentRewardMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(reportedContentRewardType, reportedContentRewardMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert reported_content_reward")
	}

	if !cached {
		reportedContentRewardUpsertCacheMut.Lock()
		reportedContentRewardUpsertCache[key] = cache
		reportedContentRewardUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single ReportedContentReward record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *ReportedContentReward) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single ReportedContentReward record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ReportedContentReward) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ReportedContentReward provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), reportedContentRewardPrimaryKeyMapping)
	sql := "DELETE FROM \"reported_content_reward\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from reported_content_reward")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for reported_content_reward")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q reportedContentRewardQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q reportedContentRewardQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no reportedContentRewardQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from reported_content_reward")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for reported_content_reward")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ReportedContentRewardSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ReportedContentRewardSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(reportedContentRewardBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), reportedContentRewardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"reported_content_reward\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, reportedContentRewardPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from reportedContentReward slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for reported_content_reward")
	}

	if len(reportedContentRewardAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *ReportedContentReward) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no ReportedContentReward provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ReportedContentReward) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindReportedContentReward(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ReportedContentRewardSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty ReportedContentRewardSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ReportedContentRewardSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ReportedContentRewardSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), reportedContentRewardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"reported_content_reward\".* FROM \"reported_content_reward\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, reportedContentRewardPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ReportedContentRewardSlice")
	}

	*o = slice

	return nil
}

// ReportedContentRewardExistsG checks if the ReportedContentReward row exists.
func ReportedContentRewardExistsG(ctx context.Context, iD int) (bool, error) {
	return ReportedContentRewardExists(ctx, boil.GetContextDB(), iD)
}

// ReportedContentRewardExists checks if the ReportedContentReward row exists.
func ReportedContentRewardExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"reported_content_reward\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if reported_content_reward exists")
	}

	return exists, nil
}

// Exists checks if the ReportedContentReward row exists.
func (o *ReportedContentReward) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ReportedContentRewardExists(ctx, exec, o.ID)
}
