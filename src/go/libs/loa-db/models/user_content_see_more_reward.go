// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/sqlboiler/v4/types"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// UserContentSeeMoreReward is an object representing the database table.
type UserContentSeeMoreReward struct {
	ID        int           `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt time.Time     `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time     `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	Quantity  types.Decimal `boil:"quantity" json:"quantity" toml:"quantity" yaml:"quantity"`
	UserID    int           `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	ContentID int           `boil:"content_id" json:"content_id" toml:"content_id" yaml:"content_id"`
	ItemID    int           `boil:"item_id" json:"item_id" toml:"item_id" yaml:"item_id"`

	R *userContentSeeMoreRewardR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userContentSeeMoreRewardL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserContentSeeMoreRewardColumns = struct {
	ID        string
	CreatedAt string
	UpdatedAt string
	Quantity  string
	UserID    string
	ContentID string
	ItemID    string
}{
	ID:        "id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	Quantity:  "quantity",
	UserID:    "user_id",
	ContentID: "content_id",
	ItemID:    "item_id",
}

var UserContentSeeMoreRewardTableColumns = struct {
	ID        string
	CreatedAt string
	UpdatedAt string
	Quantity  string
	UserID    string
	ContentID string
	ItemID    string
}{
	ID:        "user_content_see_more_reward.id",
	CreatedAt: "user_content_see_more_reward.created_at",
	UpdatedAt: "user_content_see_more_reward.updated_at",
	Quantity:  "user_content_see_more_reward.quantity",
	UserID:    "user_content_see_more_reward.user_id",
	ContentID: "user_content_see_more_reward.content_id",
	ItemID:    "user_content_see_more_reward.item_id",
}

// Generated where

var UserContentSeeMoreRewardWhere = struct {
	ID        whereHelperint
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
	Quantity  whereHelpertypes_Decimal
	UserID    whereHelperint
	ContentID whereHelperint
	ItemID    whereHelperint
}{
	ID:        whereHelperint{field: "\"user_content_see_more_reward\".\"id\""},
	CreatedAt: whereHelpertime_Time{field: "\"user_content_see_more_reward\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"user_content_see_more_reward\".\"updated_at\""},
	Quantity:  whereHelpertypes_Decimal{field: "\"user_content_see_more_reward\".\"quantity\""},
	UserID:    whereHelperint{field: "\"user_content_see_more_reward\".\"user_id\""},
	ContentID: whereHelperint{field: "\"user_content_see_more_reward\".\"content_id\""},
	ItemID:    whereHelperint{field: "\"user_content_see_more_reward\".\"item_id\""},
}

// UserContentSeeMoreRewardRels is where relationship names are stored.
var UserContentSeeMoreRewardRels = struct {
	Content string
	Item    string
	User    string
}{
	Content: "Content",
	Item:    "Item",
	User:    "User",
}

// userContentSeeMoreRewardR is where relationships are stored.
type userContentSeeMoreRewardR struct {
	Content *Content `boil:"Content" json:"Content" toml:"Content" yaml:"Content"`
	Item    *Item    `boil:"Item" json:"Item" toml:"Item" yaml:"Item"`
	User    *User    `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*userContentSeeMoreRewardR) NewStruct() *userContentSeeMoreRewardR {
	return &userContentSeeMoreRewardR{}
}

func (o *UserContentSeeMoreReward) GetContent() *Content {
	if o == nil {
		return nil
	}

	return o.R.GetContent()
}

func (r *userContentSeeMoreRewardR) GetContent() *Content {
	if r == nil {
		return nil
	}

	return r.Content
}

func (o *UserContentSeeMoreReward) GetItem() *Item {
	if o == nil {
		return nil
	}

	return o.R.GetItem()
}

func (r *userContentSeeMoreRewardR) GetItem() *Item {
	if r == nil {
		return nil
	}

	return r.Item
}

func (o *UserContentSeeMoreReward) GetUser() *User {
	if o == nil {
		return nil
	}

	return o.R.GetUser()
}

func (r *userContentSeeMoreRewardR) GetUser() *User {
	if r == nil {
		return nil
	}

	return r.User
}

// userContentSeeMoreRewardL is where Load methods for each relationship are stored.
type userContentSeeMoreRewardL struct{}

var (
	userContentSeeMoreRewardAllColumns            = []string{"id", "created_at", "updated_at", "quantity", "user_id", "content_id", "item_id"}
	userContentSeeMoreRewardColumnsWithoutDefault = []string{"updated_at", "user_id", "content_id", "item_id"}
	userContentSeeMoreRewardColumnsWithDefault    = []string{"id", "created_at", "quantity"}
	userContentSeeMoreRewardPrimaryKeyColumns     = []string{"id"}
	userContentSeeMoreRewardGeneratedColumns      = []string{}
)

type (
	// UserContentSeeMoreRewardSlice is an alias for a slice of pointers to UserContentSeeMoreReward.
	// This should almost always be used instead of []UserContentSeeMoreReward.
	UserContentSeeMoreRewardSlice []*UserContentSeeMoreReward
	// UserContentSeeMoreRewardHook is the signature for custom UserContentSeeMoreReward hook methods
	UserContentSeeMoreRewardHook func(context.Context, boil.ContextExecutor, *UserContentSeeMoreReward) error

	userContentSeeMoreRewardQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userContentSeeMoreRewardType                 = reflect.TypeOf(&UserContentSeeMoreReward{})
	userContentSeeMoreRewardMapping              = queries.MakeStructMapping(userContentSeeMoreRewardType)
	userContentSeeMoreRewardPrimaryKeyMapping, _ = queries.BindMapping(userContentSeeMoreRewardType, userContentSeeMoreRewardMapping, userContentSeeMoreRewardPrimaryKeyColumns)
	userContentSeeMoreRewardInsertCacheMut       sync.RWMutex
	userContentSeeMoreRewardInsertCache          = make(map[string]insertCache)
	userContentSeeMoreRewardUpdateCacheMut       sync.RWMutex
	userContentSeeMoreRewardUpdateCache          = make(map[string]updateCache)
	userContentSeeMoreRewardUpsertCacheMut       sync.RWMutex
	userContentSeeMoreRewardUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userContentSeeMoreRewardAfterSelectMu sync.Mutex
var userContentSeeMoreRewardAfterSelectHooks []UserContentSeeMoreRewardHook

var userContentSeeMoreRewardBeforeInsertMu sync.Mutex
var userContentSeeMoreRewardBeforeInsertHooks []UserContentSeeMoreRewardHook
var userContentSeeMoreRewardAfterInsertMu sync.Mutex
var userContentSeeMoreRewardAfterInsertHooks []UserContentSeeMoreRewardHook

var userContentSeeMoreRewardBeforeUpdateMu sync.Mutex
var userContentSeeMoreRewardBeforeUpdateHooks []UserContentSeeMoreRewardHook
var userContentSeeMoreRewardAfterUpdateMu sync.Mutex
var userContentSeeMoreRewardAfterUpdateHooks []UserContentSeeMoreRewardHook

var userContentSeeMoreRewardBeforeDeleteMu sync.Mutex
var userContentSeeMoreRewardBeforeDeleteHooks []UserContentSeeMoreRewardHook
var userContentSeeMoreRewardAfterDeleteMu sync.Mutex
var userContentSeeMoreRewardAfterDeleteHooks []UserContentSeeMoreRewardHook

var userContentSeeMoreRewardBeforeUpsertMu sync.Mutex
var userContentSeeMoreRewardBeforeUpsertHooks []UserContentSeeMoreRewardHook
var userContentSeeMoreRewardAfterUpsertMu sync.Mutex
var userContentSeeMoreRewardAfterUpsertHooks []UserContentSeeMoreRewardHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserContentSeeMoreReward) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userContentSeeMoreRewardAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserContentSeeMoreReward) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userContentSeeMoreRewardBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserContentSeeMoreReward) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userContentSeeMoreRewardAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserContentSeeMoreReward) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userContentSeeMoreRewardBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserContentSeeMoreReward) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userContentSeeMoreRewardAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserContentSeeMoreReward) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userContentSeeMoreRewardBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserContentSeeMoreReward) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userContentSeeMoreRewardAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserContentSeeMoreReward) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userContentSeeMoreRewardBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserContentSeeMoreReward) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userContentSeeMoreRewardAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserContentSeeMoreRewardHook registers your hook function for all future operations.
func AddUserContentSeeMoreRewardHook(hookPoint boil.HookPoint, userContentSeeMoreRewardHook UserContentSeeMoreRewardHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		userContentSeeMoreRewardAfterSelectMu.Lock()
		userContentSeeMoreRewardAfterSelectHooks = append(userContentSeeMoreRewardAfterSelectHooks, userContentSeeMoreRewardHook)
		userContentSeeMoreRewardAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		userContentSeeMoreRewardBeforeInsertMu.Lock()
		userContentSeeMoreRewardBeforeInsertHooks = append(userContentSeeMoreRewardBeforeInsertHooks, userContentSeeMoreRewardHook)
		userContentSeeMoreRewardBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		userContentSeeMoreRewardAfterInsertMu.Lock()
		userContentSeeMoreRewardAfterInsertHooks = append(userContentSeeMoreRewardAfterInsertHooks, userContentSeeMoreRewardHook)
		userContentSeeMoreRewardAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		userContentSeeMoreRewardBeforeUpdateMu.Lock()
		userContentSeeMoreRewardBeforeUpdateHooks = append(userContentSeeMoreRewardBeforeUpdateHooks, userContentSeeMoreRewardHook)
		userContentSeeMoreRewardBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		userContentSeeMoreRewardAfterUpdateMu.Lock()
		userContentSeeMoreRewardAfterUpdateHooks = append(userContentSeeMoreRewardAfterUpdateHooks, userContentSeeMoreRewardHook)
		userContentSeeMoreRewardAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		userContentSeeMoreRewardBeforeDeleteMu.Lock()
		userContentSeeMoreRewardBeforeDeleteHooks = append(userContentSeeMoreRewardBeforeDeleteHooks, userContentSeeMoreRewardHook)
		userContentSeeMoreRewardBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		userContentSeeMoreRewardAfterDeleteMu.Lock()
		userContentSeeMoreRewardAfterDeleteHooks = append(userContentSeeMoreRewardAfterDeleteHooks, userContentSeeMoreRewardHook)
		userContentSeeMoreRewardAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		userContentSeeMoreRewardBeforeUpsertMu.Lock()
		userContentSeeMoreRewardBeforeUpsertHooks = append(userContentSeeMoreRewardBeforeUpsertHooks, userContentSeeMoreRewardHook)
		userContentSeeMoreRewardBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		userContentSeeMoreRewardAfterUpsertMu.Lock()
		userContentSeeMoreRewardAfterUpsertHooks = append(userContentSeeMoreRewardAfterUpsertHooks, userContentSeeMoreRewardHook)
		userContentSeeMoreRewardAfterUpsertMu.Unlock()
	}
}

// OneG returns a single userContentSeeMoreReward record from the query using the global executor.
func (q userContentSeeMoreRewardQuery) OneG(ctx context.Context) (*UserContentSeeMoreReward, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single userContentSeeMoreReward record from the query.
func (q userContentSeeMoreRewardQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserContentSeeMoreReward, error) {
	o := &UserContentSeeMoreReward{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_content_see_more_reward")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all UserContentSeeMoreReward records from the query using the global executor.
func (q userContentSeeMoreRewardQuery) AllG(ctx context.Context) (UserContentSeeMoreRewardSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all UserContentSeeMoreReward records from the query.
func (q userContentSeeMoreRewardQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserContentSeeMoreRewardSlice, error) {
	var o []*UserContentSeeMoreReward

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserContentSeeMoreReward slice")
	}

	if len(userContentSeeMoreRewardAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all UserContentSeeMoreReward records in the query using the global executor
func (q userContentSeeMoreRewardQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all UserContentSeeMoreReward records in the query.
func (q userContentSeeMoreRewardQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_content_see_more_reward rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q userContentSeeMoreRewardQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q userContentSeeMoreRewardQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_content_see_more_reward exists")
	}

	return count > 0, nil
}

// Content pointed to by the foreign key.
func (o *UserContentSeeMoreReward) Content(mods ...qm.QueryMod) contentQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ContentID),
	}

	queryMods = append(queryMods, mods...)

	return Contents(queryMods...)
}

// Item pointed to by the foreign key.
func (o *UserContentSeeMoreReward) Item(mods ...qm.QueryMod) itemQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ItemID),
	}

	queryMods = append(queryMods, mods...)

	return Items(queryMods...)
}

// User pointed to by the foreign key.
func (o *UserContentSeeMoreReward) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadContent allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userContentSeeMoreRewardL) LoadContent(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserContentSeeMoreReward interface{}, mods queries.Applicator) error {
	var slice []*UserContentSeeMoreReward
	var object *UserContentSeeMoreReward

	if singular {
		var ok bool
		object, ok = maybeUserContentSeeMoreReward.(*UserContentSeeMoreReward)
		if !ok {
			object = new(UserContentSeeMoreReward)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserContentSeeMoreReward)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserContentSeeMoreReward))
			}
		}
	} else {
		s, ok := maybeUserContentSeeMoreReward.(*[]*UserContentSeeMoreReward)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserContentSeeMoreReward)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserContentSeeMoreReward))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userContentSeeMoreRewardR{}
		}
		args[object.ContentID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userContentSeeMoreRewardR{}
			}

			args[obj.ContentID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`content`),
		qm.WhereIn(`content.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Content")
	}

	var resultSlice []*Content
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Content")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for content")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for content")
	}

	if len(contentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Content = foreign
		if foreign.R == nil {
			foreign.R = &contentR{}
		}
		foreign.R.UserContentSeeMoreRewards = append(foreign.R.UserContentSeeMoreRewards, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ContentID == foreign.ID {
				local.R.Content = foreign
				if foreign.R == nil {
					foreign.R = &contentR{}
				}
				foreign.R.UserContentSeeMoreRewards = append(foreign.R.UserContentSeeMoreRewards, local)
				break
			}
		}
	}

	return nil
}

// LoadItem allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userContentSeeMoreRewardL) LoadItem(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserContentSeeMoreReward interface{}, mods queries.Applicator) error {
	var slice []*UserContentSeeMoreReward
	var object *UserContentSeeMoreReward

	if singular {
		var ok bool
		object, ok = maybeUserContentSeeMoreReward.(*UserContentSeeMoreReward)
		if !ok {
			object = new(UserContentSeeMoreReward)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserContentSeeMoreReward)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserContentSeeMoreReward))
			}
		}
	} else {
		s, ok := maybeUserContentSeeMoreReward.(*[]*UserContentSeeMoreReward)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserContentSeeMoreReward)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserContentSeeMoreReward))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userContentSeeMoreRewardR{}
		}
		args[object.ItemID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userContentSeeMoreRewardR{}
			}

			args[obj.ItemID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`item`),
		qm.WhereIn(`item.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Item")
	}

	var resultSlice []*Item
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Item")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for item")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for item")
	}

	if len(itemAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Item = foreign
		if foreign.R == nil {
			foreign.R = &itemR{}
		}
		foreign.R.UserContentSeeMoreRewards = append(foreign.R.UserContentSeeMoreRewards, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ItemID == foreign.ID {
				local.R.Item = foreign
				if foreign.R == nil {
					foreign.R = &itemR{}
				}
				foreign.R.UserContentSeeMoreRewards = append(foreign.R.UserContentSeeMoreRewards, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userContentSeeMoreRewardL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserContentSeeMoreReward interface{}, mods queries.Applicator) error {
	var slice []*UserContentSeeMoreReward
	var object *UserContentSeeMoreReward

	if singular {
		var ok bool
		object, ok = maybeUserContentSeeMoreReward.(*UserContentSeeMoreReward)
		if !ok {
			object = new(UserContentSeeMoreReward)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserContentSeeMoreReward)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserContentSeeMoreReward))
			}
		}
	} else {
		s, ok := maybeUserContentSeeMoreReward.(*[]*UserContentSeeMoreReward)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserContentSeeMoreReward)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserContentSeeMoreReward))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userContentSeeMoreRewardR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userContentSeeMoreRewardR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`user`),
		qm.WhereIn(`user.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UserContentSeeMoreRewards = append(foreign.R.UserContentSeeMoreRewards, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UserContentSeeMoreRewards = append(foreign.R.UserContentSeeMoreRewards, local)
				break
			}
		}
	}

	return nil
}

// SetContentG of the userContentSeeMoreReward to the related item.
// Sets o.R.Content to related.
// Adds o to related.R.UserContentSeeMoreRewards.
// Uses the global database handle.
func (o *UserContentSeeMoreReward) SetContentG(ctx context.Context, insert bool, related *Content) error {
	return o.SetContent(ctx, boil.GetContextDB(), insert, related)
}

// SetContent of the userContentSeeMoreReward to the related item.
// Sets o.R.Content to related.
// Adds o to related.R.UserContentSeeMoreRewards.
func (o *UserContentSeeMoreReward) SetContent(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Content) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_content_see_more_reward\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"content_id"}),
		strmangle.WhereClause("\"", "\"", 2, userContentSeeMoreRewardPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ContentID = related.ID
	if o.R == nil {
		o.R = &userContentSeeMoreRewardR{
			Content: related,
		}
	} else {
		o.R.Content = related
	}

	if related.R == nil {
		related.R = &contentR{
			UserContentSeeMoreRewards: UserContentSeeMoreRewardSlice{o},
		}
	} else {
		related.R.UserContentSeeMoreRewards = append(related.R.UserContentSeeMoreRewards, o)
	}

	return nil
}

// SetItemG of the userContentSeeMoreReward to the related item.
// Sets o.R.Item to related.
// Adds o to related.R.UserContentSeeMoreRewards.
// Uses the global database handle.
func (o *UserContentSeeMoreReward) SetItemG(ctx context.Context, insert bool, related *Item) error {
	return o.SetItem(ctx, boil.GetContextDB(), insert, related)
}

// SetItem of the userContentSeeMoreReward to the related item.
// Sets o.R.Item to related.
// Adds o to related.R.UserContentSeeMoreRewards.
func (o *UserContentSeeMoreReward) SetItem(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Item) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_content_see_more_reward\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"item_id"}),
		strmangle.WhereClause("\"", "\"", 2, userContentSeeMoreRewardPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ItemID = related.ID
	if o.R == nil {
		o.R = &userContentSeeMoreRewardR{
			Item: related,
		}
	} else {
		o.R.Item = related
	}

	if related.R == nil {
		related.R = &itemR{
			UserContentSeeMoreRewards: UserContentSeeMoreRewardSlice{o},
		}
	} else {
		related.R.UserContentSeeMoreRewards = append(related.R.UserContentSeeMoreRewards, o)
	}

	return nil
}

// SetUserG of the userContentSeeMoreReward to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserContentSeeMoreRewards.
// Uses the global database handle.
func (o *UserContentSeeMoreReward) SetUserG(ctx context.Context, insert bool, related *User) error {
	return o.SetUser(ctx, boil.GetContextDB(), insert, related)
}

// SetUser of the userContentSeeMoreReward to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserContentSeeMoreRewards.
func (o *UserContentSeeMoreReward) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_content_see_more_reward\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, userContentSeeMoreRewardPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &userContentSeeMoreRewardR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			UserContentSeeMoreRewards: UserContentSeeMoreRewardSlice{o},
		}
	} else {
		related.R.UserContentSeeMoreRewards = append(related.R.UserContentSeeMoreRewards, o)
	}

	return nil
}

// UserContentSeeMoreRewards retrieves all the records using an executor.
func UserContentSeeMoreRewards(mods ...qm.QueryMod) userContentSeeMoreRewardQuery {
	mods = append(mods, qm.From("\"user_content_see_more_reward\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"user_content_see_more_reward\".*"})
	}

	return userContentSeeMoreRewardQuery{q}
}

// FindUserContentSeeMoreRewardG retrieves a single record by ID.
func FindUserContentSeeMoreRewardG(ctx context.Context, iD int, selectCols ...string) (*UserContentSeeMoreReward, error) {
	return FindUserContentSeeMoreReward(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindUserContentSeeMoreReward retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserContentSeeMoreReward(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*UserContentSeeMoreReward, error) {
	userContentSeeMoreRewardObj := &UserContentSeeMoreReward{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_content_see_more_reward\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, userContentSeeMoreRewardObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from user_content_see_more_reward")
	}

	if err = userContentSeeMoreRewardObj.doAfterSelectHooks(ctx, exec); err != nil {
		return userContentSeeMoreRewardObj, err
	}

	return userContentSeeMoreRewardObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *UserContentSeeMoreReward) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserContentSeeMoreReward) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_content_see_more_reward provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userContentSeeMoreRewardColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userContentSeeMoreRewardInsertCacheMut.RLock()
	cache, cached := userContentSeeMoreRewardInsertCache[key]
	userContentSeeMoreRewardInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userContentSeeMoreRewardAllColumns,
			userContentSeeMoreRewardColumnsWithDefault,
			userContentSeeMoreRewardColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userContentSeeMoreRewardType, userContentSeeMoreRewardMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userContentSeeMoreRewardType, userContentSeeMoreRewardMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_content_see_more_reward\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_content_see_more_reward\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into user_content_see_more_reward")
	}

	if !cached {
		userContentSeeMoreRewardInsertCacheMut.Lock()
		userContentSeeMoreRewardInsertCache[key] = cache
		userContentSeeMoreRewardInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single UserContentSeeMoreReward record using the global executor.
// See Update for more documentation.
func (o *UserContentSeeMoreReward) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the UserContentSeeMoreReward.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserContentSeeMoreReward) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userContentSeeMoreRewardUpdateCacheMut.RLock()
	cache, cached := userContentSeeMoreRewardUpdateCache[key]
	userContentSeeMoreRewardUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userContentSeeMoreRewardAllColumns,
			userContentSeeMoreRewardPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update user_content_see_more_reward, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_content_see_more_reward\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userContentSeeMoreRewardPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userContentSeeMoreRewardType, userContentSeeMoreRewardMapping, append(wl, userContentSeeMoreRewardPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update user_content_see_more_reward row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for user_content_see_more_reward")
	}

	if !cached {
		userContentSeeMoreRewardUpdateCacheMut.Lock()
		userContentSeeMoreRewardUpdateCache[key] = cache
		userContentSeeMoreRewardUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q userContentSeeMoreRewardQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q userContentSeeMoreRewardQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for user_content_see_more_reward")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for user_content_see_more_reward")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o UserContentSeeMoreRewardSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserContentSeeMoreRewardSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userContentSeeMoreRewardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_content_see_more_reward\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userContentSeeMoreRewardPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in userContentSeeMoreReward slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all userContentSeeMoreReward")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *UserContentSeeMoreReward) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserContentSeeMoreReward) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no user_content_see_more_reward provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userContentSeeMoreRewardColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userContentSeeMoreRewardUpsertCacheMut.RLock()
	cache, cached := userContentSeeMoreRewardUpsertCache[key]
	userContentSeeMoreRewardUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			userContentSeeMoreRewardAllColumns,
			userContentSeeMoreRewardColumnsWithDefault,
			userContentSeeMoreRewardColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userContentSeeMoreRewardAllColumns,
			userContentSeeMoreRewardPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert user_content_see_more_reward, could not build update column list")
		}

		ret := strmangle.SetComplement(userContentSeeMoreRewardAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(userContentSeeMoreRewardPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert user_content_see_more_reward, could not build conflict column list")
			}

			conflict = make([]string, len(userContentSeeMoreRewardPrimaryKeyColumns))
			copy(conflict, userContentSeeMoreRewardPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"user_content_see_more_reward\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(userContentSeeMoreRewardType, userContentSeeMoreRewardMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userContentSeeMoreRewardType, userContentSeeMoreRewardMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert user_content_see_more_reward")
	}

	if !cached {
		userContentSeeMoreRewardUpsertCacheMut.Lock()
		userContentSeeMoreRewardUpsertCache[key] = cache
		userContentSeeMoreRewardUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single UserContentSeeMoreReward record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *UserContentSeeMoreReward) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single UserContentSeeMoreReward record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserContentSeeMoreReward) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserContentSeeMoreReward provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userContentSeeMoreRewardPrimaryKeyMapping)
	sql := "DELETE FROM \"user_content_see_more_reward\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from user_content_see_more_reward")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for user_content_see_more_reward")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q userContentSeeMoreRewardQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q userContentSeeMoreRewardQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no userContentSeeMoreRewardQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from user_content_see_more_reward")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_content_see_more_reward")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o UserContentSeeMoreRewardSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserContentSeeMoreRewardSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userContentSeeMoreRewardBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userContentSeeMoreRewardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_content_see_more_reward\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userContentSeeMoreRewardPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from userContentSeeMoreReward slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_content_see_more_reward")
	}

	if len(userContentSeeMoreRewardAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *UserContentSeeMoreReward) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: no UserContentSeeMoreReward provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserContentSeeMoreReward) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserContentSeeMoreReward(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserContentSeeMoreRewardSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("models: empty UserContentSeeMoreRewardSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserContentSeeMoreRewardSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserContentSeeMoreRewardSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userContentSeeMoreRewardPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_content_see_more_reward\".* FROM \"user_content_see_more_reward\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userContentSeeMoreRewardPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserContentSeeMoreRewardSlice")
	}

	*o = slice

	return nil
}

// UserContentSeeMoreRewardExistsG checks if the UserContentSeeMoreReward row exists.
func UserContentSeeMoreRewardExistsG(ctx context.Context, iD int) (bool, error) {
	return UserContentSeeMoreRewardExists(ctx, boil.GetContextDB(), iD)
}

// UserContentSeeMoreRewardExists checks if the UserContentSeeMoreReward row exists.
func UserContentSeeMoreRewardExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_content_see_more_reward\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if user_content_see_more_reward exists")
	}

	return exists, nil
}

// Exists checks if the UserContentSeeMoreReward row exists.
func (o *UserContentSeeMoreReward) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UserContentSeeMoreRewardExists(ctx, exec, o.ID)
}
