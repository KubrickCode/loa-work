// Code generated by MockGen. DO NOT EDIT.
// Source: item.go
//
// Generated by this command:
//
//	mockgen -source=item.go -package=loadb -self_package=github.com/KubrickCode/loa-work/src/go/libs/loadb
//

// Package loadb is a generated GoMock package.
package loadb

import (
	reflect "reflect"

	models "github.com/KubrickCode/loa-work/src/go/libs/loadb/models"
	gomock "go.uber.org/mock/gomock"
)

// MockItemRepository is a mock of ItemRepository interface.
type MockItemRepository struct {
	ctrl     *gomock.Controller
	recorder *MockItemRepositoryMockRecorder
	isgomock struct{}
}

// MockItemRepositoryMockRecorder is the mock recorder for MockItemRepository.
type MockItemRepositoryMockRecorder struct {
	mock *MockItemRepository
}

// NewMockItemRepository creates a new mock instance.
func NewMockItemRepository(ctrl *gomock.Controller) *MockItemRepository {
	mock := &MockItemRepository{ctrl: ctrl}
	mock.recorder = &MockItemRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemRepository) EXPECT() *MockItemRepositoryMockRecorder {
	return m.recorder
}

// FindManyByKind mocks base method.
func (m *MockItemRepository) FindManyByKind(kind models.ItemKind) ([]*models.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindManyByKind", kind)
	ret0, _ := ret[0].([]*models.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindManyByKind indicates an expected call of FindManyByKind.
func (mr *MockItemRepositoryMockRecorder) FindManyByKind(kind any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindManyByKind", reflect.TypeOf((*MockItemRepository)(nil).FindManyByKind), kind)
}

// UpdateItemPrice mocks base method.
func (m *MockItemRepository) UpdateItemPrice(item *models.Item, price Decimal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItemPrice", item, price)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateItemPrice indicates an expected call of UpdateItemPrice.
func (mr *MockItemRepositoryMockRecorder) UpdateItemPrice(item, price any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItemPrice", reflect.TypeOf((*MockItemRepository)(nil).UpdateItemPrice), item, price)
}

// UpdateMany mocks base method.
func (m *MockItemRepository) UpdateMany(items []*models.Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMany", items)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMany indicates an expected call of UpdateMany.
func (mr *MockItemRepositoryMockRecorder) UpdateMany(items any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMany", reflect.TypeOf((*MockItemRepository)(nil).UpdateMany), items)
}
