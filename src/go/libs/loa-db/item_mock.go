// Code generated by MockGen. DO NOT EDIT.
// Source: ./item.go
//
// Generated by this command:
//
//	mockgen -source=./item.go -package=loadb -self_package=github.com/KubrickCode/loa-work/src/go/libs/loadb
//

// Package loadb is a generated GoMock package.
package loadb

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockItemDB is a mock of ItemDB interface.
type MockItemDB struct {
	ctrl     *gomock.Controller
	recorder *MockItemDBMockRecorder
	isgomock struct{}
}

// MockItemDBMockRecorder is the mock recorder for MockItemDB.
type MockItemDBMockRecorder struct {
	mock *MockItemDB
}

// NewMockItemDB creates a new mock instance.
func NewMockItemDB(ctrl *gomock.Controller) *MockItemDB {
	mock := &MockItemDB{ctrl: ctrl}
	mock.recorder = &MockItemDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemDB) EXPECT() *MockItemDBMockRecorder {
	return m.recorder
}

// FindManyByKind mocks base method.
func (m *MockItemDB) FindManyByKind(kind string) ([]Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindManyByKind", kind)
	ret0, _ := ret[0].([]Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindManyByKind indicates an expected call of FindManyByKind.
func (mr *MockItemDBMockRecorder) FindManyByKind(kind any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindManyByKind", reflect.TypeOf((*MockItemDB)(nil).FindManyByKind), kind)
}

// UpdateMany mocks base method.
func (m *MockItemDB) UpdateMany(items []Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMany", items)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMany indicates an expected call of UpdateMany.
func (mr *MockItemDBMockRecorder) UpdateMany(items any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMany", reflect.TypeOf((*MockItemDB)(nil).UpdateMany), items)
}
