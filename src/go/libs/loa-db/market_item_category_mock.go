// Code generated by MockGen. DO NOT EDIT.
// Source: market_item_category.go
//
// Generated by this command:
//
//	mockgen -source=market_item_category.go -package=loadb -self_package=github.com/KubrickCode/loa-work/src/go/libs/loadb
//

// Package loadb is a generated GoMock package.
package loadb

import (
	reflect "reflect"

	models "github.com/KubrickCode/loa-work/src/go/libs/loadb/models"
	gomock "go.uber.org/mock/gomock"
)

// MockMarketItemCategoryRepository is a mock of MarketItemCategoryRepository interface.
type MockMarketItemCategoryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMarketItemCategoryRepositoryMockRecorder
	isgomock struct{}
}

// MockMarketItemCategoryRepositoryMockRecorder is the mock recorder for MockMarketItemCategoryRepository.
type MockMarketItemCategoryRepositoryMockRecorder struct {
	mock *MockMarketItemCategoryRepository
}

// NewMockMarketItemCategoryRepository creates a new mock instance.
func NewMockMarketItemCategoryRepository(ctrl *gomock.Controller) *MockMarketItemCategoryRepository {
	mock := &MockMarketItemCategoryRepository{ctrl: ctrl}
	mock.recorder = &MockMarketItemCategoryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMarketItemCategoryRepository) EXPECT() *MockMarketItemCategoryRepositoryMockRecorder {
	return m.recorder
}

// FindByID mocks base method.
func (m *MockMarketItemCategoryRepository) FindByID(id int) (*models.MarketItemCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*models.MarketItemCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockMarketItemCategoryRepositoryMockRecorder) FindByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockMarketItemCategoryRepository)(nil).FindByID), id)
}

// FindItemScraperEnabledAll mocks base method.
func (m *MockMarketItemCategoryRepository) FindItemScraperEnabledAll() ([]*models.MarketItemCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindItemScraperEnabledAll")
	ret0, _ := ret[0].([]*models.MarketItemCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindItemScraperEnabledAll indicates an expected call of FindItemScraperEnabledAll.
func (mr *MockMarketItemCategoryRepositoryMockRecorder) FindItemScraperEnabledAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindItemScraperEnabledAll", reflect.TypeOf((*MockMarketItemCategoryRepository)(nil).FindItemScraperEnabledAll))
}

// UpsertMany mocks base method.
func (m *MockMarketItemCategoryRepository) UpsertMany(categories []*models.MarketItemCategory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertMany", categories)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertMany indicates an expected call of UpsertMany.
func (mr *MockMarketItemCategoryRepositoryMockRecorder) UpsertMany(categories any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertMany", reflect.TypeOf((*MockMarketItemCategoryRepository)(nil).UpsertMany), categories)
}
