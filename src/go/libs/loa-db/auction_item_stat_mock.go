// Code generated by MockGen. DO NOT EDIT.
// Source: auction_item_stat.go
//
// Generated by this command:
//
//	mockgen -source=auction_item_stat.go -package=loadb -self_package=github.com/KubrickCode/loa-work/src/go/libs/loadb
//

// Package loadb is a generated GoMock package.
package loadb

import (
	reflect "reflect"

	models "github.com/KubrickCode/loa-work/src/go/libs/loadb/models"
	gomock "go.uber.org/mock/gomock"
)

// MockAuctionItemStatRepository is a mock of AuctionItemStatRepository interface.
type MockAuctionItemStatRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAuctionItemStatRepositoryMockRecorder
	isgomock struct{}
}

// MockAuctionItemStatRepositoryMockRecorder is the mock recorder for MockAuctionItemStatRepository.
type MockAuctionItemStatRepositoryMockRecorder struct {
	mock *MockAuctionItemStatRepository
}

// NewMockAuctionItemStatRepository creates a new mock instance.
func NewMockAuctionItemStatRepository(ctrl *gomock.Controller) *MockAuctionItemStatRepository {
	mock := &MockAuctionItemStatRepository{ctrl: ctrl}
	mock.recorder = &MockAuctionItemStatRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuctionItemStatRepository) EXPECT() *MockAuctionItemStatRepositoryMockRecorder {
	return m.recorder
}

// CreateMany mocks base method.
func (m *MockAuctionItemStatRepository) CreateMany(stats []*models.AuctionItemStat) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMany", stats)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMany indicates an expected call of CreateMany.
func (mr *MockAuctionItemStatRepositoryMockRecorder) CreateMany(stats any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMany", reflect.TypeOf((*MockAuctionItemStatRepository)(nil).CreateMany), stats)
}

// GetLatestStatsByItemID mocks base method.
func (m *MockAuctionItemStatRepository) GetLatestStatsByItemID(itemID, limit int) ([]*models.AuctionItemStat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestStatsByItemID", itemID, limit)
	ret0, _ := ret[0].([]*models.AuctionItemStat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestStatsByItemID indicates an expected call of GetLatestStatsByItemID.
func (mr *MockAuctionItemStatRepositoryMockRecorder) GetLatestStatsByItemID(itemID, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestStatsByItemID", reflect.TypeOf((*MockAuctionItemStatRepository)(nil).GetLatestStatsByItemID), itemID, limit)
}

// GetLatestStatsByItemIDs mocks base method.
func (m *MockAuctionItemStatRepository) GetLatestStatsByItemIDs(itemIDs []int, limit int) (map[int][]*models.AuctionItemStat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestStatsByItemIDs", itemIDs, limit)
	ret0, _ := ret[0].(map[int][]*models.AuctionItemStat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestStatsByItemIDs indicates an expected call of GetLatestStatsByItemIDs.
func (mr *MockAuctionItemStatRepositoryMockRecorder) GetLatestStatsByItemIDs(itemIDs, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestStatsByItemIDs", reflect.TypeOf((*MockAuctionItemStatRepository)(nil).GetLatestStatsByItemIDs), itemIDs, limit)
}
