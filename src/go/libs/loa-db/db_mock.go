// Code generated by MockGen. DO NOT EDIT.
// Source: ./db.go
//
// Generated by this command:
//
//	mockgen -source=./db.go -package=loadb -self_package=github.com/KubrickCode/loa-work/src/go/libs/loadb
//

// Package loadb is a generated GoMock package.
package loadb

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
	isgomock struct{}
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// AuctionItem mocks base method.
func (m *MockDB) AuctionItem() AuctionItemDB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuctionItem")
	ret0, _ := ret[0].(AuctionItemDB)
	return ret0
}

// AuctionItem indicates an expected call of AuctionItem.
func (mr *MockDBMockRecorder) AuctionItem() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuctionItem", reflect.TypeOf((*MockDB)(nil).AuctionItem))
}

// AuctionItemCategory mocks base method.
func (m *MockDB) AuctionItemCategory() AuctionItemCategoryDB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuctionItemCategory")
	ret0, _ := ret[0].(AuctionItemCategoryDB)
	return ret0
}

// AuctionItemCategory indicates an expected call of AuctionItemCategory.
func (mr *MockDBMockRecorder) AuctionItemCategory() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuctionItemCategory", reflect.TypeOf((*MockDB)(nil).AuctionItemCategory))
}

// AuctionItemStat mocks base method.
func (m *MockDB) AuctionItemStat() AuctionItemStatDB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuctionItemStat")
	ret0, _ := ret[0].(AuctionItemStatDB)
	return ret0
}

// AuctionItemStat indicates an expected call of AuctionItemStat.
func (mr *MockDBMockRecorder) AuctionItemStat() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuctionItemStat", reflect.TypeOf((*MockDB)(nil).AuctionItemStat))
}

// ContentRewardItem mocks base method.
func (m *MockDB) ContentRewardItem() ContentRewardItemDB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContentRewardItem")
	ret0, _ := ret[0].(ContentRewardItemDB)
	return ret0
}

// ContentRewardItem indicates an expected call of ContentRewardItem.
func (mr *MockDBMockRecorder) ContentRewardItem() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContentRewardItem", reflect.TypeOf((*MockDB)(nil).ContentRewardItem))
}

// ContentRewardItemPrice mocks base method.
func (m *MockDB) ContentRewardItemPrice() ContentRewardItemPriceDB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContentRewardItemPrice")
	ret0, _ := ret[0].(ContentRewardItemPriceDB)
	return ret0
}

// ContentRewardItemPrice indicates an expected call of ContentRewardItemPrice.
func (mr *MockDBMockRecorder) ContentRewardItemPrice() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContentRewardItemPrice", reflect.TypeOf((*MockDB)(nil).ContentRewardItemPrice))
}

// Gorm mocks base method.
func (m *MockDB) Gorm() *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gorm")
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Gorm indicates an expected call of Gorm.
func (mr *MockDBMockRecorder) Gorm() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gorm", reflect.TypeOf((*MockDB)(nil).Gorm))
}

// MarketItem mocks base method.
func (m *MockDB) MarketItem() MarketItemDB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarketItem")
	ret0, _ := ret[0].(MarketItemDB)
	return ret0
}

// MarketItem indicates an expected call of MarketItem.
func (mr *MockDBMockRecorder) MarketItem() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarketItem", reflect.TypeOf((*MockDB)(nil).MarketItem))
}

// MarketItemCategory mocks base method.
func (m *MockDB) MarketItemCategory() MarketItemCategoryDB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarketItemCategory")
	ret0, _ := ret[0].(MarketItemCategoryDB)
	return ret0
}

// MarketItemCategory indicates an expected call of MarketItemCategory.
func (mr *MockDBMockRecorder) MarketItemCategory() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarketItemCategory", reflect.TypeOf((*MockDB)(nil).MarketItemCategory))
}

// MarketItemStat mocks base method.
func (m *MockDB) MarketItemStat() MarketItemStatDB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarketItemStat")
	ret0, _ := ret[0].(MarketItemStatDB)
	return ret0
}

// MarketItemStat indicates an expected call of MarketItemStat.
func (mr *MockDBMockRecorder) MarketItemStat() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarketItemStat", reflect.TypeOf((*MockDB)(nil).MarketItemStat))
}

// WithTransaction mocks base method.
func (m *MockDB) WithTransaction(action func(DB) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTransaction", action)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithTransaction indicates an expected call of WithTransaction.
func (mr *MockDBMockRecorder) WithTransaction(action any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTransaction", reflect.TypeOf((*MockDB)(nil).WithTransaction), action)
}
