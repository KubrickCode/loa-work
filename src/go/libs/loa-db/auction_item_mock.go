// Code generated by MockGen. DO NOT EDIT.
// Source: auction_item.go
//
// Generated by this command:
//
//	mockgen -source=auction_item.go -package=loadb -self_package=github.com/KubrickCode/loa-work/src/go/libs/loadb
//

// Package loadb is a generated GoMock package.
package loadb

import (
	reflect "reflect"

	models "github.com/KubrickCode/loa-work/src/go/libs/loadb/models"
	gomock "go.uber.org/mock/gomock"
)

// MockAuctionItemRepository is a mock of AuctionItemRepository interface.
type MockAuctionItemRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAuctionItemRepositoryMockRecorder
	isgomock struct{}
}

// MockAuctionItemRepositoryMockRecorder is the mock recorder for MockAuctionItemRepository.
type MockAuctionItemRepositoryMockRecorder struct {
	mock *MockAuctionItemRepository
}

// NewMockAuctionItemRepository creates a new mock instance.
func NewMockAuctionItemRepository(ctrl *gomock.Controller) *MockAuctionItemRepository {
	mock := &MockAuctionItemRepository{ctrl: ctrl}
	mock.recorder = &MockAuctionItemRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuctionItemRepository) EXPECT() *MockAuctionItemRepositoryMockRecorder {
	return m.recorder
}

// FindAll mocks base method.
func (m *MockAuctionItemRepository) FindAll(count int) ([]*models.AuctionItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", count)
	ret0, _ := ret[0].([]*models.AuctionItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockAuctionItemRepositoryMockRecorder) FindAll(count any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockAuctionItemRepository)(nil).FindAll), count)
}

// FindByName mocks base method.
func (m *MockAuctionItemRepository) FindByName(name string) (*models.AuctionItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByName", name)
	ret0, _ := ret[0].(*models.AuctionItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByName indicates an expected call of FindByName.
func (mr *MockAuctionItemRepositoryMockRecorder) FindByName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByName", reflect.TypeOf((*MockAuctionItemRepository)(nil).FindByName), name)
}

// FindStatScraperEnabledAll mocks base method.
func (m *MockAuctionItemRepository) FindStatScraperEnabledAll() ([]*models.AuctionItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindStatScraperEnabledAll")
	ret0, _ := ret[0].([]*models.AuctionItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindStatScraperEnabledAll indicates an expected call of FindStatScraperEnabledAll.
func (mr *MockAuctionItemRepositoryMockRecorder) FindStatScraperEnabledAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindStatScraperEnabledAll", reflect.TypeOf((*MockAuctionItemRepository)(nil).FindStatScraperEnabledAll))
}

// UpdateAvgBuyPrice mocks base method.
func (m *MockAuctionItemRepository) UpdateAvgBuyPrice(item *models.AuctionItem, price Decimal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAvgBuyPrice", item, price)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAvgBuyPrice indicates an expected call of UpdateAvgBuyPrice.
func (mr *MockAuctionItemRepositoryMockRecorder) UpdateAvgBuyPrice(item, price any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAvgBuyPrice", reflect.TypeOf((*MockAuctionItemRepository)(nil).UpdateAvgBuyPrice), item, price)
}

// UpdateStat mocks base method.
func (m *MockAuctionItemRepository) UpdateStat(item *models.AuctionItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStat", item)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStat indicates an expected call of UpdateStat.
func (mr *MockAuctionItemRepositoryMockRecorder) UpdateStat(item any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStat", reflect.TypeOf((*MockAuctionItemRepository)(nil).UpdateStat), item)
}
