// Code generated by MockGen. DO NOT EDIT.
// Source: ./market-item-category.go
//
// Generated by this command:
//
//	mockgen -source=./market-item-category.go -package=loadb -self_package=github.com/KubrickCode/loa-work/src/go/libs/loadb
//

// Package loadb is a generated GoMock package.
package loadb

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMarketItemCategoryDB is a mock of MarketItemCategoryDB interface.
type MockMarketItemCategoryDB struct {
	ctrl     *gomock.Controller
	recorder *MockMarketItemCategoryDBMockRecorder
	isgomock struct{}
}

// MockMarketItemCategoryDBMockRecorder is the mock recorder for MockMarketItemCategoryDB.
type MockMarketItemCategoryDBMockRecorder struct {
	mock *MockMarketItemCategoryDB
}

// NewMockMarketItemCategoryDB creates a new mock instance.
func NewMockMarketItemCategoryDB(ctrl *gomock.Controller) *MockMarketItemCategoryDB {
	mock := &MockMarketItemCategoryDB{ctrl: ctrl}
	mock.recorder = &MockMarketItemCategoryDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMarketItemCategoryDB) EXPECT() *MockMarketItemCategoryDBMockRecorder {
	return m.recorder
}

// FindByID mocks base method.
func (m *MockMarketItemCategoryDB) FindByID(id int) (*MarketItemCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*MarketItemCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockMarketItemCategoryDBMockRecorder) FindByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockMarketItemCategoryDB)(nil).FindByID), id)
}

// FindItemScraperEnabledAll mocks base method.
func (m *MockMarketItemCategoryDB) FindItemScraperEnabledAll() ([]MarketItemCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindItemScraperEnabledAll")
	ret0, _ := ret[0].([]MarketItemCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindItemScraperEnabledAll indicates an expected call of FindItemScraperEnabledAll.
func (mr *MockMarketItemCategoryDBMockRecorder) FindItemScraperEnabledAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindItemScraperEnabledAll", reflect.TypeOf((*MockMarketItemCategoryDB)(nil).FindItemScraperEnabledAll))
}

// UpsertMany mocks base method.
func (m *MockMarketItemCategoryDB) UpsertMany(categories []MarketItemCategory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertMany", categories)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertMany indicates an expected call of UpsertMany.
func (mr *MockMarketItemCategoryDBMockRecorder) UpsertMany(categories any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertMany", reflect.TypeOf((*MockMarketItemCategoryDB)(nil).UpsertMany), categories)
}
