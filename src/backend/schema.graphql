# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AuctionItem {
  avgBuyPrice: Float!
  createdAt: DateTime!
  id: Int!
  imageUrl: String!
  isStatScraperEnabled: Boolean!
  name: String!
  updatedAt: DateTime!
}

input AuctionItemListFilter {
  isStatScraperEnabled: Boolean
  nameKeyword: String
}

enum AuthProvider {
  DISCORD
  GOOGLE
  KAKAO
}

type Content {
  contentCategory: ContentCategory!
  contentCategoryId: Int!
  contentDuration: ContentDuration!
  contentRewards: [ContentReward!]!
  contentSeeMoreRewards: [ContentSeeMoreReward!]!
  createdAt: DateTime!
  displayName: String!
  duration: Int!
  durationText: String!
  gate: Int
  id: Int!
  level: Int!
  name: String!
  updatedAt: DateTime!
  wage(filter: ContentWageFilter): ContentWage!
  wageFilter: ContentObjectWageFilter
}

type ContentCategory {
  createdAt: DateTime!
  id: Int!
  imageUrl: String!
  name: String!
  updatedAt: DateTime!
}

input ContentCreateInput {
  categoryId: Int!
  contentRewards: [ContentCreateRewardItemsInput!]!
  contentSeeMoreRewards: [ContentCreateSeeMoreRewardsInput!]
  duration: Int!
  gate: Int
  level: Int!
  name: String!
}

type ContentCreateResult {
  ok: Boolean!
}

input ContentCreateRewardItemsInput {
  contentRewardItemId: Int!
  defaultAverageQuantity: Float!
  isExcluded: Boolean!
  isSellable: Boolean!
}

input ContentCreateSeeMoreRewardsInput {
  contentRewardItemId: Int!
  isExcluded: Boolean!
  quantity: Float!
}

type ContentDuration {
  contentId: Int!
  createdAt: DateTime!
  defaultValue: Int!
  id: Int!
  updatedAt: DateTime!
  userContentDuration: UserContentDuration!
}

input ContentListFilter {
  contentCategoryId: Int
  includeIsSeeMore: Boolean
  keyword: String
  wageFilter: ContentListWageFilter
}

input ContentListWageFilter {
  includeContentRewardItems: [String!]
  includeIsBound: Boolean
}

type ContentObjectWageFilter {
  includeContentRewardItems: [String!]
  includeIsBound: Boolean
  includeIsSeeMore: Boolean
}

type ContentReward {
  averageQuantity: Float!
  contentRewardItem: ContentRewardItem!
  contentRewardItemId: Int!
  createdAt: DateTime!
  id: Int!
  isSellable: Boolean!
  updatedAt: DateTime!
  userContentReward: UserContentReward!
}

type ContentRewardItem {
  createdAt: DateTime!
  id: Int!
  imageUrl: String!
  kind: ContentRewardItemKind!
  name: String!
  pieColor: String!
  price: Float!
  updatedAt: DateTime!
  userContentRewardItem: UserContentRewardItem!
}

enum ContentRewardItemKind {
  AUCTION_ITEM
  EXTRA_ITEM
  MARKET_ITEM
}

input ContentRewardItemsFilter {
  excludeItemName: String
  kind: ContentRewardItemKind
}

input ContentRewardReportInput {
  averageQuantity: Float!
  id: Int!
}

input ContentRewardsReportInput {
  contentRewards: [ContentRewardReportInput!]!
}

type ContentRewardsReportResult {
  ok: Boolean!
}

type ContentSeeMoreReward {
  contentId: Int!
  contentRewardItem: ContentRewardItem!
  contentRewardItemId: Int!
  createdAt: DateTime!
  id: Int!
  quantity: Float!
  updatedAt: DateTime!
}

type ContentWage {
  content: Content!
  contentId: Int!
  goldAmountPerClear: Float!
  goldAmountPerHour: Float!
  krwAmountPerHour: Float!
}

input ContentWageFilter {
  includeContentRewardItemIds: [Int!]
  includeIsBound: Boolean
  includeIsSeeMore: Boolean
}

input ContentWageListFilter {
  contentCategoryId: Int
  includeContentRewardItemIds: [Int!]
  includeIsBound: Boolean
  includeIsSeeMore: Boolean
  keyword: String
}

input CustomContentWageCalculateInput {
  minutes: Int!
  rewardItems: [CustomContentWageCalculateRewardItemInput!]!
  seconds: Int!
}

type CustomContentWageCalculateResult {
  goldAmountPerClear: Int!
  goldAmountPerHour: Int!
  krwAmountPerHour: Int!
  ok: Boolean!
}

input CustomContentWageCalculateRewardItemInput {
  id: Int!
  quantity: Float!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type MarketItem {
  bundleCount: Int!
  createdAt: DateTime!
  currentMinPrice: Int!
  id: Int!
  imageUrl: String!
  isStatScraperEnabled: Boolean!
  name: String!
  recentPrice: Int!
  refId: Int!
  updatedAt: DateTime!
  yDayAvgPrice: Float!
}

input MarketItemListFilter {
  categoryName: String
  grade: String
  isStatScraperEnabled: Boolean
  keyword: String
}

type Mutation {
  contentCreate(input: ContentCreateInput!): ContentCreateResult!
  contentRewardsReport(input: ContentRewardsReportInput!): ContentRewardsReportResult!
  customContentWageCalculate(input: CustomContentWageCalculateInput!): CustomContentWageCalculateResult!
  userContentDurationEdit(input: UserContentDurationEditInput!): UserContentDurationEditResult!
  userContentRewardItemEdit(input: UserContentRewardItemEditInput!): UserContentRewardItemEditResult!
  userContentRewardsEdit(input: UserContentRewardsEditInput!): UserContentRewardsEditResult!
  userGoldExchangeRateEdit(input: UserGoldExchangeRateEditInput!): UserGoldExchangeRateEditResult!
}

input OrderByArg {
  field: String!
  order: String!
}

type Query {
  auctionItemList(filter: AuctionItemListFilter): [AuctionItem!]!
  auctionItems(orderBy: [OrderByArg!], take: Int): [AuctionItem!]!
  content(id: Int!): Content!
  contentCategories: [ContentCategory!]!
  contentDuration(id: Int!): ContentDuration!
  contentList(filter: ContentListFilter): [Content!]!
  contentRewardItem(id: Int!): ContentRewardItem!
  contentRewardItems(filter: ContentRewardItemsFilter): [ContentRewardItem!]!
  contentWageList(filter: ContentWageListFilter, orderBy: [OrderByArg!]): [ContentWage!]!
  goldExchangeRate: UserGoldExchangeRate!
  marketItemList(filter: MarketItemListFilter): [MarketItem!]!
  marketItems(orderBy: [OrderByArg!], take: Int): [MarketItem!]!
  userGoldExchangeRate: UserGoldExchangeRate!
  userList: [User!]!
}

type User {
  createdAt: DateTime!
  displayName: String!
  email: String
  id: Int!
  imageUrl: String
  provider: AuthProvider!
  refId: String!
  role: UserRole!
  updatedAt: DateTime!
}

type UserContentDuration {
  contentDurationId: Int!
  createdAt: DateTime!
  id: Int!
  updatedAt: DateTime!
  userId: Int!
  value: Int!
}

input UserContentDurationEditInput {
  id: Int!
  minutes: Int!
  seconds: Int!
}

type UserContentDurationEditResult {
  ok: Boolean!
}

type UserContentReward {
  averageQuantity: Float!
  contentRewardId: Int!
  createdAt: DateTime!
  id: Int!
  updatedAt: DateTime!
  userId: Int!
}

input UserContentRewardEditInput {
  averageQuantity: Float!
  id: Int!
}

type UserContentRewardItem {
  contentRewardItemId: Int!
  createdAt: DateTime!
  id: Int!
  price: Float!
  updatedAt: DateTime!
  userId: Int!
}

input UserContentRewardItemEditInput {
  id: Int!
  price: Float!
}

type UserContentRewardItemEditResult {
  ok: Boolean!
}

input UserContentRewardsEditInput {
  isReportable: Boolean!
  userContentRewards: [UserContentRewardEditInput!]!
}

type UserContentRewardsEditResult {
  ok: Boolean!
}

type UserGoldExchangeRate {
  createdAt: DateTime!
  goldAmount: Float!
  id: Int!
  krwAmount: Float!
  updatedAt: DateTime!
  userId: Int!
}

input UserGoldExchangeRateEditInput {
  id: Int!
  krwAmount: Float!
}

type UserGoldExchangeRateEditResult {
  ok: Boolean!
}

enum UserRole {
  ADMIN
  OWNER
  USER
}