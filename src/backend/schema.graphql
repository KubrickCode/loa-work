# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AuctionItem {
  avgBuyPrice: Float
  createdAt: DateTime!
  id: Int!
  imageUrl: String!
  isStatScraperEnabled: Boolean!
  name: String!
  updatedAt: DateTime!
}

input AuctionItemListFilter {
  isStatScraperEnabled: Boolean
  nameKeyword: String
}

type AuctionItemStat {
  auctionItemId: Int!
  bidPrice: Int!
  bidStartPrice: Int!
  buyPrice: Int!
  createdAt: DateTime!
  endDate: DateTime!
  id: Int!
  isCompetitive: Boolean!
  startPrice: Int!
}

type Content {
  contentCategory: ContentCategory!
  contentCategoryId: Int!
  contentDuration: ContentDuration!
  contentRewards: [ContentReward!]!
  contentSeeMoreRewards: [ContentSeeMoreReward!]!
  createdAt: DateTime!
  displayName: String!
  duration: Int!
  durationText: String!
  gate: Int
  id: Int!
  level: Int!
  name: String!
  updatedAt: DateTime!
  wageFilter: ContentWageFilter
}

type ContentCategory {
  createdAt: DateTime!
  id: Int!
  imageUrl: String!
  name: String!
  updatedAt: DateTime!
}

type ContentDuration {
  contentId: Int!
  createdAt: DateTime!
  defaultValue: Int!
  id: Int!
  updatedAt: DateTime!
  userContentDuration: UserContentDuration!
}

input ContentListFilter {
  contentCategoryId: Int
  includeIsSeeMore: Boolean
  wageFilter: ContentListWageFilter
}

input ContentListWageFilter {
  includeContentRewardItems: [String!]
  includeIsBound: Boolean
}

type ContentReward {
  averageQuantity: Float!
  contentRewardItem: ContentRewardItem!
  contentRewardItemId: Int!
  createdAt: DateTime!
  id: Int!
  isSellable: Boolean!
  updatedAt: DateTime!
  userContentReward: UserContentReward!
}

type ContentRewardItem {
  createdAt: DateTime!
  defaultPrice: Float!
  id: Int!
  imageUrl: String!
  kind: ContentRewardItemKind!
  name: String!
  pieColor: String!
  price: Float!
  updatedAt: DateTime!
  userContentRewardItem: UserContentRewardItem!
}

enum ContentRewardItemKind {
  AUCTION_ITEM
  EXTRA_ITEM
  MARKET_ITEM
}

input ContentRewardItemsFilter {
  excludeItemName: String
  kind: ContentRewardItemKind
}

type ContentSeeMoreReward {
  contentId: Int!
  contentRewardItem: ContentRewardItem!
  contentRewardItemId: Int!
  createdAt: DateTime!
  id: Int!
  quantity: Int!
  updatedAt: DateTime!
}

type ContentWage {
  content: Content!
  contentId: Int!
  goldAmountPerClear: Int!
  goldAmountPerHour: Int!
  krwAmountPerHour: Int!
}

type ContentWageFilter {
  includeContentRewardItems: [String!]
  includeIsBound: Boolean
  includeIsSeeMore: Boolean
}

input ContentWageListFilter {
  contentCategoryId: Int
  includeContentRewardItemIds: [Int!]
  includeIsBound: Boolean
  includeIsSeeMore: Boolean
}

input CustomContentWageCalculateInput {
  duration: Float!
  rewardItems: [CustomContentWageCalculateRewardItemInput!]!
}

type CustomContentWageCalculateResult {
  goldAmountPerClear: Int!
  goldAmountPerHour: Int!
  krwAmountPerHour: Int!
  ok: Boolean!
}

input CustomContentWageCalculateRewardItemInput {
  id: Float!
  quantity: Float!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type MarketItem {
  bundleCount: Int!
  createdAt: DateTime!
  currentMinPrice: Int!
  id: Int!
  imageUrl: String!
  isStatScraperEnabled: Boolean!
  name: String!
  recentPrice: Int!
  refId: Int!
  updatedAt: DateTime!
  yDayAvgPrice: Float!
}

input MarketItemListFilter {
  categoryName: String
  grade: String
  isStatScraperEnabled: Boolean
}

type MarketItemStat {
  createdAt: DateTime!
  currentMinPrice: Int!
  id: Int!
  marketItemId: Int!
  recentPrice: Int!
  yDayAvgPrice: Float!
}

type Mutation {
  customContentWageCalculate(input: CustomContentWageCalculateInput!): CustomContentWageCalculateResult!
  userContentDurationEdit(input: UserContentDurationEditInput!): UserContentDurationEditResult!
  userContentRewardItemEdit(input: UserContentRewardItemEditInput!): UserContentRewardItemEditResult!
  userContentRewardsEdit(input: UserContentRewardsEditInput!): UserContentRewardsEditResult!
  userGoldExchangeRateEdit(input: UserGoldExchangeRateEditInput!): UserGoldExchangeRateEditResult!
}

input OrderByArg {
  field: String!
  order: String!
}

type Query {
  auctionItemList(filter: AuctionItemListFilter): [AuctionItem!]!
  auctionItemStats(orderBy: [OrderByArg!], take: Int): [AuctionItemStat!]!
  content(id: Int!): Content!
  contentCategories: [ContentCategory!]!
  contentDuration(id: Int!): ContentDuration!
  contentList(filter: ContentListFilter): [Content!]!
  contentRewardItem(id: Int!): ContentRewardItem!
  contentRewardItems(filter: ContentRewardItemsFilter): [ContentRewardItem!]!
  contentWageList(filter: ContentWageListFilter, orderBy: [OrderByArg!]): [ContentWage!]!
  marketItemList(filter: MarketItemListFilter): [MarketItem!]!
  marketItemStats(orderBy: [OrderByArg!], take: Int): [MarketItemStat!]!
  userGoldExchangeRate: UserGoldExchangeRate!
}

type UserContentDuration {
  contentDurationId: Int!
  createdAt: DateTime!
  id: Int!
  updatedAt: DateTime!
  userId: Int!
  value: Int!
}

input UserContentDurationEditInput {
  id: Float!
  value: Float!
}

type UserContentDurationEditResult {
  ok: Boolean!
}

type UserContentReward {
  averageQuantity: Float!
  contentRewardId: Int!
  createdAt: DateTime!
  id: Int!
  updatedAt: DateTime!
  userId: Int!
}

input UserContentRewardEditInput {
  averageQuantity: Float!
  id: Float!
}

type UserContentRewardItem {
  contentRewardItemId: Int!
  createdAt: DateTime!
  id: Int!
  price: Float!
  updatedAt: DateTime!
  userId: Int!
}

input UserContentRewardItemEditInput {
  id: Int!
  price: Float!
}

type UserContentRewardItemEditResult {
  ok: Boolean!
}

input UserContentRewardsEditInput {
  userContentRewards: [UserContentRewardEditInput!]!
}

type UserContentRewardsEditResult {
  ok: Boolean!
}

type UserGoldExchangeRate {
  createdAt: DateTime!
  goldAmount: Int!
  id: Int!
  krwAmount: Int!
  updatedAt: DateTime!
  userId: Int!
}

input UserGoldExchangeRateEditInput {
  id: Int!
  krwAmount: Int!
}

type UserGoldExchangeRateEditResult {
  ok: Boolean!
}