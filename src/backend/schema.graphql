# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AuctionItem {
  avgBuyPrice: Float!
  createdAt: DateTime!
  id: Int!
  imageUrl: String!
  isStatScraperEnabled: Boolean!
  name: String!
  updatedAt: DateTime!
}

input AuctionItemListFilter {
  isStatScraperEnabled: Boolean
  nameKeyword: String
}

enum AuthProvider {
  DISCORD
  GOOGLE
  KAKAO
}

type Content {
  contentCategory: ContentCategory!
  contentCategoryId: Int!
  contentRewards: [ContentReward!]!
  contentSeeMoreRewards: [ContentSeeMoreReward!]!
  createdAt: DateTime!
  displayName: String!
  duration: Int!
  durationText: String!
  gate: Int
  id: Int!
  level: Int!
  name: String!
  updatedAt: DateTime!
  wage(filter: ContentWageFilter): ContentWage!
  wageFilter: ContentObjectWageFilter
}

type ContentCategory {
  createdAt: DateTime!
  id: Int!
  imageUrl: String!
  name: String!
  updatedAt: DateTime!
}

input ContentCreateInput {
  categoryId: Int!
  contentRewards: [ContentCreateItemsInput!]!
  contentSeeMoreRewards: [ContentCreateSeeMoreRewardsInput!]
  duration: Int!
  gate: Int
  level: Int!
  name: String!
}

input ContentCreateItemsInput {
  averageQuantity: Float!
  isSellable: Boolean!
  itemId: Int!
}

type ContentCreateResult {
  ok: Boolean!
}

input ContentCreateSeeMoreRewardsInput {
  itemId: Int!
  quantity: Float!
}

type ContentDuration {
  content: Content!
  contentId: Int!
  createdAt: DateTime!
  id: Int!
  updatedAt: DateTime!
  value: Int!
}

input ContentDurationEditInput {
  contentId: Int!
  minutes: Int!
  seconds: Int!
}

type ContentDurationEditResult {
  ok: Boolean!
}

input ContentDurationsEditInput {
  contentDurations: [ContentDurationsEditInputDuration!]!
}

input ContentDurationsEditInputDuration {
  contentId: Int!
  minutes: Int!
  seconds: Int!
}

type ContentDurationsEditResult {
  ok: Boolean!
}

type ContentGroup {
  contentCategory: ContentCategory!
  contentCategoryId: Int!
  contentIds: [Int!]!
  contents: [Content!]!
  duration: Int!
  durationText: String!
  level: Int!
  name: String!
}

input ContentGroupFilter {
  contentIds: [Int!]
}

type ContentGroupWage {
  contentGroup: ContentGroup!
  goldAmountPerClear: Float!
  goldAmountPerHour: Float!
  krwAmountPerHour: Float!
}

input ContentGroupWageListFilter {
  contentCategoryId: Int
  includeIsBound: Boolean
  includeIsSeeMore: Boolean
  includeItemIds: [Int!]
  keyword: String
  status: ContentStatus
}

input ContentListFilter {
  contentCategoryId: Int
  includeIsSeeMore: Boolean
  keyword: String
  status: ContentStatus
}

type ContentObjectWageFilter {
  includeIsBound: Boolean
  includeIsSeeMore: Boolean
  includeItemIds: [String!]
}

type ContentReward {
  averageQuantity: Float!
  createdAt: DateTime!
  id: Int!
  isSellable: Boolean!
  item: Item!
  itemId: Int!
  updatedAt: DateTime!
}

input ContentRewardEditInput {
  averageQuantity: Float!
  contentId: Int!
  isSellable: Boolean!
  itemId: Int!
}

input ContentRewardReportInput {
  averageQuantity: Float!
  id: Int!
}

input ContentRewardsEditInput {
  contentRewards: [ContentRewardEditInput!]!
  isReportable: Boolean!
}

type ContentRewardsEditResult {
  ok: Boolean!
}

input ContentRewardsReportInput {
  contentRewards: [ContentRewardReportInput!]!
}

type ContentRewardsReportResult {
  ok: Boolean!
}

type ContentSeeMoreReward {
  contentId: Int!
  createdAt: DateTime!
  id: Int!
  item: Item!
  itemId: Int!
  quantity: Float!
  updatedAt: DateTime!
}

input ContentSeeMoreRewardEditInput {
  contentId: Int!
  itemId: Int!
  quantity: Float!
}

input ContentSeeMoreRewardsEditInput {
  contentSeeMoreRewards: [ContentSeeMoreRewardEditInput!]!
}

type ContentSeeMoreRewardsEditResult {
  ok: Boolean!
}

enum ContentStatus {
  ACTIVE
  ARCHIVED
}

type ContentWage {
  content: Content!
  contentId: Int!
  goldAmountPerClear: Float!
  goldAmountPerHour: Float!
  krwAmountPerHour: Float!
}

input ContentWageFilter {
  includeIsBound: Boolean
  includeIsSeeMore: Boolean
  includeItemIds: [Int!]
}

input ContentWageListFilter {
  contentCategoryId: Int
  includeIsBound: Boolean
  includeIsSeeMore: Boolean
  includeItemIds: [Int!]
  keyword: String
  status: ContentStatus
}

input ContentsFilter {
  ids: [Int!]
}

input CustomContentWageCalculateInput {
  items: [CustomContentWageCalculateItemsInput!]!
  minutes: Int!
  seconds: Int!
}

input CustomContentWageCalculateItemsInput {
  id: Int!
  quantity: Float!
}

type CustomContentWageCalculateResult {
  goldAmountPerClear: Int!
  goldAmountPerHour: Int!
  krwAmountPerHour: Int!
  ok: Boolean!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type GoldExchangeRate {
  createdAt: DateTime!
  goldAmount: Float!
  id: Int!
  krwAmount: Float!
  updatedAt: DateTime!
}

input GoldExchangeRateEditInput {
  krwAmount: Int!
}

type GoldExchangeRateEditResult {
  ok: Boolean!
}

type Item {
  createdAt: DateTime!
  id: Int!
  imageUrl: String!
  kind: ItemKind!
  name: String!
  pieColor: String!
  price: Float!
  updatedAt: DateTime!
  userItem: UserItem!
}

enum ItemKind {
  AUCTION
  EXTRA
  MARKET
}

input ItemsFilter {
  excludeItemName: String
  kind: ItemKind
}

type MarketItem {
  bundleCount: Int!
  createdAt: DateTime!
  currentMinPrice: Int!
  id: Int!
  imageUrl: String!
  isStatScraperEnabled: Boolean!
  name: String!
  recentPrice: Int!
  refId: Int!
  updatedAt: DateTime!
  yDayAvgPrice: Float!
}

input MarketItemListFilter {
  categoryName: String
  grade: String
  isStatScraperEnabled: Boolean
  keyword: String
}

type Mutation {
  contentCreate(input: ContentCreateInput!): ContentCreateResult!
  contentDurationEdit(input: ContentDurationEditInput!): ContentDurationEditResult!
  contentDurationsEdit(input: ContentDurationsEditInput!): ContentDurationsEditResult!
  contentRewardsEdit(input: ContentRewardsEditInput!): ContentRewardsEditResult!
  contentRewardsReport(input: ContentRewardsReportInput!): ContentRewardsReportResult!
  contentSeeMoreRewardsEdit(input: ContentSeeMoreRewardsEditInput!): ContentSeeMoreRewardsEditResult!
  customContentWageCalculate(input: CustomContentWageCalculateInput!): CustomContentWageCalculateResult!
  goldExchangeRateEdit(input: GoldExchangeRateEditInput!): GoldExchangeRateEditResult!
  userItemEdit(input: UserItemEditInput!): UserItemEditResult!
}

input OrderByArg {
  field: String!
  order: String!
}

type Query {
  auctionItemList(filter: AuctionItemListFilter): [AuctionItem!]!
  auctionItems(orderBy: [OrderByArg!], take: Int): [AuctionItem!]!
  content(id: Int!): Content!
  contentCategories: [ContentCategory!]!
  contentDuration(id: Int!): ContentDuration!
  contentGroup(filter: ContentGroupFilter): ContentGroup!
  contentGroupWageList(filter: ContentGroupWageListFilter, orderBy: [OrderByArg!]): [ContentGroupWage!]!
  contentList(filter: ContentListFilter): [Content!]!
  contentWageList(filter: ContentWageListFilter, orderBy: [OrderByArg!]): [ContentWage!]!
  contents(filter: ContentsFilter): [Content!]!
  goldExchangeRate: GoldExchangeRate!
  item(id: Int!): Item!
  items(filter: ItemsFilter): [Item!]!
  marketItemList(filter: MarketItemListFilter): [MarketItem!]!
  marketItems(orderBy: [OrderByArg!], take: Int): [MarketItem!]!
  userList: [User!]!
}

type User {
  createdAt: DateTime!
  displayName: String!
  email: String
  id: Int!
  imageUrl: String
  provider: AuthProvider!
  refId: String!
  role: UserRole!
  updatedAt: DateTime!
}

type UserItem {
  createdAt: DateTime!
  id: Int!
  itemId: Int!
  price: Float!
  updatedAt: DateTime!
  userId: Int!
}

input UserItemEditInput {
  id: Int!
  price: Float!
}

type UserItemEditResult {
  ok: Boolean!
}

enum UserRole {
  ADMIN
  OWNER
  USER
}