generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AuctionItemCategory {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  code                 Int     @unique
  isItemScraperEnabled Boolean @default(false) @map("is_item_scraper_enabled")
  name                 String

  // Relations
  auctionItems AuctionItem[]

  @@map("auction_item_category")
}

// 경매장 아이템
model AuctionItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  name                 String  @unique
  imageSrc             String  @map("image_src")
  isStatScraperEnabled Boolean @default(false) @map("is_stat_scraper_enabled")

  // Relations
  auctionItemStats      AuctionItemStat[]
  auctionItemCategory   AuctionItemCategory @relation(fields: [auctionItemCategoryId], references: [id])
  auctionItemCategoryId Int                 @map("auction_item_category_id")

  @@map("auction_item")
}

model AuctionItemStat {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  buyPrice      Int @map("buy_price") // 즉시 구매가
  bidPrice      Int @map("bid_price") // 현재 최고가
  bidStartPrice Int @map("bid_start_price") // 최소 입찰가
  startPrice    Int @map("start_price") // 시작 입찰가

  IsCompetitive Boolean  @default(false) @map("is_competitive") // 경쟁 입찰 여부
  endDate       DateTime @map("end_date") // 경매 종료일

  // Relations
  auctionItemId Int         @map("auction_item_id")
  auctionItem   AuctionItem @relation(fields: [auctionItemId], references: [id], onDelete: Cascade)

  @@map("auction_item_stat")
}

model Content {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  gate  Int?
  level Int
  name  String

  // Relations
  contentRewards        ContentReward[]
  contentCategory       ContentCategory        @relation(fields: [contentCategoryId], references: [id], onDelete: Cascade)
  contentCategoryId     Int                    @map("content_category_id")
  contentDurations      ContentDuration[]
  contentSeeMoreRewards ContentSeeMoreReward[]

  @@unique([name, contentCategoryId, gate])
  @@map("content")
}

model ContentCategory {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  imageUrl String @map("image_url")
  name     String @unique

  // Relations
  contents Content[]

  @@map("content_category")
}

model ContentDuration {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  defaultValue Int @map("default_value") // 소요시간(초)

  // Relations
  contentId            Int                   @unique @map("content_id")
  content              Content               @relation(fields: [contentId], references: [id], onDelete: Cascade)
  userContentDurations UserContentDuration[]

  @@map("content_duration")
}

model ContentReward {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  defaultAverageQuantity Decimal @map("default_average_quantity")
  isSellable             Boolean @default(false) @map("is_sellable")

  // Relations
  contentId           Int                 @map("content_id")
  content             Content             @relation(fields: [contentId], references: [id], onDelete: Cascade)
  contentRewardItem   ContentRewardItem   @relation(fields: [contentRewardItemId], references: [id], onDelete: Cascade)
  contentRewardItemId Int                 @map("content_reward_item_id")
  userContentRewards  UserContentReward[]

  @@unique([contentId, contentRewardItemId])
  @@map("content_reward")
}

model ContentRewardItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  defaultPrice Decimal               @default(0) @map("default_price") // 개당 가격
  imageUrl     String                @map("image_url")
  kind         ContentRewardItemKind
  name         String                @unique

  // Relations
  contentRewards         ContentReward[]
  userContentRewardItems UserContentRewardItem[]
  contentSeeMoreRewards  ContentSeeMoreReward[]

  @@map("content_reward_item")
}

model ContentSeeMoreReward {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  quantity Decimal

  // Relations
  contentId           Int               @map("content_id")
  content             Content           @relation(fields: [contentId], references: [id], onDelete: Cascade)
  contentRewardItemId Int               @map("content_reward_item_id")
  contentRewardItem   ContentRewardItem @relation(fields: [contentRewardItemId], references: [id], onDelete: Cascade)

  @@map("content_see_more_reward")
}

model ExtraItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  name String @unique

  @@map("extra_item")
}

model GoldExchangeRate {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  krwAmount  Int @map("krw_amount")
  goldAmount Int @map("gold_amount")

  @@map("gold_exchange_rate")
}

model MarketItemCategory {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  code                 Int     @unique
  isItemScraperEnabled Boolean @default(false) @map("is_item_scraper_enabled")
  name                 String

  // Relations
  marketItems MarketItem[]

  @@map("market_item_category")
}

// 거래소 아이템
model MarketItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  bundleCount          Int     @map("bundle_count") // 묶음 판매 단위
  name                 String
  grade                String
  imageSrc             String  @map("image_src")
  isStatScraperEnabled Boolean @default(false) @map("is_stat_scraper_enabled")
  refId                Int     @unique @map("ref_id")

  // Relations
  marketItemCategoryId Int                @map("market_item_category_id")
  marketItemCategory   MarketItemCategory @relation(fields: [marketItemCategoryId], references: [id], onDelete: Cascade)
  marketItemStats      MarketItemStat[]

  @@unique([name, grade])
  @@map("market_item")
}

model MarketItemStat {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  currentMinPrice Int     @map("current_min_price") // 최저가
  recentPrice     Int     @map("recent_price") // 최근 거래가
  yDayAvgPrice    Decimal @map("y_day_avg_price") // 전일 평균 거래가

  // Relations
  marketItemId Int        @map("market_item_id")
  marketItem   MarketItem @relation(fields: [marketItemId], references: [id], onDelete: Cascade)

  @@map("market_item_stat")
}

model MinimumWage {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  amount Int
  year   Int @unique

  @@map("minimum_wage")
}

model Session {
  id  String @id
  sid String @unique

  data      String
  expiresAt DateTime @map("expires_at") @db.Timestamptz(6)

  @@map("session")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  displayName String       @map("display_name")
  email       String
  imageUrl    String?      @map("image_url")
  provider    AuthProvider
  refId       String       @unique @map("ref_id")
  role        UserRole     @default(USER)

  // Relations
  userContentDurations   UserContentDuration[]
  userContentRewardItems UserContentRewardItem[]
  userContentRewards     UserContentReward[]
  userGoldExchangeRate   UserGoldExchangeRate?

  @@map("user")
}

model UserContentDuration {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  value Int // 소요시간(초)

  // Relations
  contentDurationId Int             @map("content_duration_id")
  contentDuration   ContentDuration @relation(fields: [contentDurationId], references: [id], onDelete: Cascade)
  userId            Int             @map("user_id")
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([contentDurationId, userId])
  @@map("user_content_duration")
}

model UserContentReward {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  averageQuantity Decimal @map("average_quantity")

  // Relations
  contentRewardId Int           @map("content_reward_id")
  contentReward   ContentReward @relation(fields: [contentRewardId], references: [id], onDelete: Cascade)
  userId          Int           @map("user_id")
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, contentRewardId])
  @@map("user_content_reward")
}

model UserContentRewardItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  price Decimal @default(0) // 개당 가격

  // Relations
  contentRewardItemId Int               @map("content_reward_item_id")
  contentRewardItem   ContentRewardItem @relation(fields: [contentRewardItemId], references: [id], onDelete: Cascade)
  userId              Int               @map("user_id")
  user                User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, contentRewardItemId])
  @@map("user_content_reward_item")
}

model UserGoldExchangeRate {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  krwAmount  Int @map("krw_amount")
  goldAmount Int @map("gold_amount")

  // Relations
  userId Int  @unique @map("user_id")
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_gold_exchange_rate")
}

enum AuthProvider {
  GOOGLE
  DISCORD
  KAKAO
}

enum ContentRewardItemKind {
  AUCTION_ITEM
  MARKET_ITEM
  EXTRA_ITEM
}

enum UserRole {
  OWNER
  ADMIN
  USER
}
