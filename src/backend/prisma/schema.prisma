generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AuctionItemCategory {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  code                 Int     @unique
  isItemScraperEnabled Boolean @default(false) @map("is_item_scraper_enabled")
  name                 String

  // Relations
  auctionItems AuctionItem[]

  @@map("auction_item_category")
}

// 경매장 아이템
model AuctionItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  avgBuyPrice          Decimal @default(0) @map("avg_buy_price") // 평균 즉시 구매가
  imageUrl             String  @map("image_url")
  isStatScraperEnabled Boolean @default(false) @map("is_stat_scraper_enabled")
  name                 String  @unique

  // Relations
  auctionItemStats      AuctionItemStat[]
  auctionItemCategory   AuctionItemCategory @relation(fields: [auctionItemCategoryId], references: [id])
  auctionItemCategoryId Int                 @map("auction_item_category_id")

  @@map("auction_item")
}

model AuctionItemStat {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  bidPrice      Int      @map("bid_price") // 현재 최고가
  bidStartPrice Int      @map("bid_start_price") // 최소 입찰가
  buyPrice      Int      @map("buy_price") // 즉시 구매가
  endDate       DateTime @map("end_date") // 경매 종료일
  isCompetitive Boolean  @default(false) @map("is_competitive") // 경쟁 입찰 여부
  startPrice    Int      @map("start_price") // 시작 입찰가

  // Relations
  auctionItemId Int         @map("auction_item_id")
  auctionItem   AuctionItem @relation(fields: [auctionItemId], references: [id], onDelete: Cascade)

  @@index([auctionItemId, createdAt])
  @@map("auction_item_stat")
}

model Content {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  gate   Int?
  level  Int
  name   String
  status ContentStatus @default(ACTIVE)

  // Relations
  contentRewards        ContentReward[]
  contentCategory       ContentCategory        @relation(fields: [contentCategoryId], references: [id], onDelete: Cascade)
  contentCategoryId     Int                    @map("content_category_id")
  contentDuration       ContentDuration?
  contentSeeMoreRewards ContentSeeMoreReward[]
  userContentDurations  UserContentDuration[]

  @@unique([name, gate])
  @@map("content")
}

model ContentCategory {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  imageUrl String @map("image_url")
  name     String @unique

  // Relations
  contents Content[]

  @@map("content_category")
}

model ContentDuration {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  value Int // 소요시간(초)

  // Relations
  contentId Int     @unique @map("content_id")
  content   Content @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@map("content_duration")
}

model ContentReward {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  defaultAverageQuantity Decimal @default(0) @map("default_average_quantity")
  isSellable             Boolean @default(false) @map("is_sellable")

  // Relations
  contentId              Int                     @map("content_id")
  content                Content                 @relation(fields: [contentId], references: [id], onDelete: Cascade)
  item                   Item                    @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId                 Int                     @map("item_id")
  userContentRewards     UserContentReward[]
  reportedContentRewards ReportedContentReward[]

  @@unique([contentId, itemId])
  @@map("content_reward")
}

model Item {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  imageUrl   String   @map("image_url")
  isEditable Boolean  @default(false) @map("is_editable")
  kind       ItemKind
  name       String   @unique
  price      Decimal  @default(0)

  // Relations
  contentRewards        ContentReward[]
  userItems             UserItem[]
  contentSeeMoreRewards ContentSeeMoreReward[]

  @@map("item")
}

model ContentSeeMoreReward {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  quantity Decimal @default(0)

  // Relations
  contentId                 Int                        @map("content_id")
  content                   Content                    @relation(fields: [contentId], references: [id], onDelete: Cascade)
  itemId                    Int                        @map("item_id")
  item                      Item                       @relation(fields: [itemId], references: [id], onDelete: Cascade)
  userContentSeeMoreRewards UserContentSeeMoreReward[]

  @@map("content_see_more_reward")
}

model GoldExchangeRate {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  goldAmount Int @map("gold_amount")
  krwAmount  Int @map("krw_amount")

  @@map("gold_exchange_rate")
}

model MarketItemCategory {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  code                 Int     @unique
  isItemScraperEnabled Boolean @default(false) @map("is_item_scraper_enabled")
  name                 String

  // Relations
  marketItems MarketItem[]

  @@map("market_item_category")
}

// 거래소 아이템
model MarketItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  bundleCount          Int     @map("bundle_count") // 묶음 판매 단위
  currentMinPrice      Int     @default(0) @map("current_min_price") // 최저가
  grade                String
  imageUrl             String  @map("image_url")
  isStatScraperEnabled Boolean @default(false) @map("is_stat_scraper_enabled")
  name                 String
  recentPrice          Int     @default(0) @map("recent_price") // 최근 거래가
  refId                Int     @unique @map("ref_id")
  yDayAvgPrice         Decimal @default(0) @map("y_day_avg_price") // 전일 평균 거래가

  // Relations
  marketItemCategoryId Int                @map("market_item_category_id")
  marketItemCategory   MarketItemCategory @relation(fields: [marketItemCategoryId], references: [id], onDelete: Cascade)
  marketItemStats      MarketItemStat[]

  @@unique([name, grade])
  @@map("market_item")
}

model MarketItemStat {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  currentMinPrice Int     @map("current_min_price") // 최저가
  recentPrice     Int     @map("recent_price") // 최근 거래가
  yDayAvgPrice    Decimal @map("y_day_avg_price") // 전일 평균 거래가

  // Relations
  marketItemId Int        @map("market_item_id")
  marketItem   MarketItem @relation(fields: [marketItemId], references: [id], onDelete: Cascade)

  @@index([marketItemId, createdAt])
  @@map("market_item_stat")
}

model ReportedContentReward {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  averageQuantity Decimal @map("average_quantity")

  // Relations
  contentRewardId Int           @map("content_reward_id")
  contentReward   ContentReward @relation(fields: [contentRewardId], references: [id], onDelete: Cascade)
  userId          Int           @map("user_id")
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reported_content_reward")
}

model Session {
  id  String @id
  sid String @unique

  data      String
  expiresAt DateTime @map("expires_at") @db.Timestamptz(6)

  @@map("session")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  displayName String       @map("display_name")
  email       String?
  imageUrl    String?      @map("image_url")
  provider    AuthProvider
  refId       String       @unique @map("ref_id")
  role        UserRole     @default(USER)

  // Relations
  userContentDurations      UserContentDuration[]
  userItems                 UserItem[]
  userContentRewards        UserContentReward[]
  userGoldExchangeRate      UserGoldExchangeRate?
  reportedContentRewards    ReportedContentReward[]
  userContentSeeMoreRewards UserContentSeeMoreReward[]

  @@map("user")
}

model UserContentDuration {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  value Int // 소요시간(초)

  // Relations
  contentId Int     @map("content_id")
  content   Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
  userId    Int     @map("user_id")
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([contentId, userId])
  @@map("user_content_duration")
}

model UserContentReward {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  averageQuantity Decimal @default(0) @map("average_quantity")
  isEdited        Boolean @default(false) @map("is_edited")
  isSellable      Boolean @default(false) @map("is_sellable")

  // Relations
  contentRewardId Int           @map("content_reward_id")
  contentReward   ContentReward @relation(fields: [contentRewardId], references: [id], onDelete: Cascade)
  userId          Int           @map("user_id")
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, contentRewardId])
  @@map("user_content_reward")
}

model UserContentSeeMoreReward {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  isEdited Boolean @default(false) @map("is_edited")
  quantity Decimal @default(0)

  // Relations
  contentSeeMoreRewardId Int                  @map("content_see_more_reward_id")
  contentSeeMoreReward   ContentSeeMoreReward @relation(fields: [contentSeeMoreRewardId], references: [id], onDelete: Cascade)
  userId                 Int                  @map("user_id")
  user                   User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, contentSeeMoreRewardId])
  @@map("user_content_see_more_reward")
}

model UserItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  price Decimal @default(0) // 개당 가격

  // Relations
  itemId Int  @map("item_id")
  item   Item @relation(fields: [itemId], references: [id], onDelete: Cascade)
  userId Int  @map("user_id")
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, itemId])
  @@map("user_item")
}

model UserGoldExchangeRate {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  goldAmount Int     @map("gold_amount")
  isEdited   Boolean @default(false) @map("is_edited")
  krwAmount  Int     @map("krw_amount")

  // Relations
  userId Int  @unique @map("user_id")
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_gold_exchange_rate")
}

enum AuthProvider {
  GOOGLE
  DISCORD
  KAKAO
}

enum ItemKind {
  AUCTION
  MARKET
  EXTRA
}

enum ContentStatus {
  ACTIVE
  ARCHIVED
}

enum UserRole {
  OWNER
  ADMIN
  USER
}
