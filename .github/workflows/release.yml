name: Deploy Services
on:
  push:
    branches:
      - release
    paths:
      - "src/backend/**"
  workflow_dispatch:

jobs:
  deploy-backend:
    name: Build and Deploy Backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Setup Nginx and SSL
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            if ! command -v nginx &> /dev/null; then
              sudo apt update
              sudo apt install -y nginx certbot python3-certbot-nginx
            fi

            sudo tee /etc/nginx/sites-available/default << 'EOF'
            server {
                listen 80;
                listen [::]:80;
                server_name api-loa-life.duckdns.org;

                location / {
                    proxy_pass http://localhost:3001;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection 'upgrade';
                    proxy_set_header Host $host;
                    proxy_cache_bypass $http_upgrade;
                }
            }
            EOF

            if [ ! -d "/etc/letsencrypt/live/api-loa-life.duckdns.org" ]; then
              sudo certbot --nginx -d api-loa-life.duckdns.org --non-interactive --agree-tos --email ${{ secrets.CERTBOT_EMAIL }}
            fi

            sudo systemctl reload nginx

      - name: Build and Push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/loa-life:backend-api-$IMAGE_TAG ./src/backend
          docker push $ECR_REGISTRY/loa-life:backend-api-$IMAGE_TAG
          docker tag $ECR_REGISTRY/loa-life:backend-api-$IMAGE_TAG $ECR_REGISTRY/loa-life:backend-api-latest
          docker push $ECR_REGISTRY/loa-life:backend-api-latest

      - name: Install AWS CLI on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            if ! command -v aws &> /dev/null; then
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              sudo apt install -y unzip
              unzip awscliv2.zip
              sudo ./aws/install
              rm -rf aws awscliv2.zip
            fi

            # Configure AWS CLI
            mkdir -p ~/.aws
            cat > ~/.aws/credentials << EOF
            [default]
            aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            EOF

            cat > ~/.aws/config << EOF
            [default]
            region = ap-northeast-2
            output = json
            EOF

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}
            docker pull ${{ secrets.ECR_REGISTRY }}/loa-life:backend-api-latest

            docker stop backend-service || true
            docker rm backend-service || true

            docker run -d \
              --name backend-service \
              -p 3001:3001 \
              -e DATABASE_URL="${{ secrets.DATABASE_URL }}" \
              -e GOOGLE_CLIENT_ID="${{ secrets.GOOGLE_CLIENT_ID }}" \
              -e GOOGLE_CLIENT_SECRET="${{ secrets.GOOGLE_CLIENT_SECRET }}" \
              -e GOOGLE_AUTH_CALLBACK_URL="${{ secrets.GOOGLE_AUTH_CALLBACK_URL }}" \
              -e DISCORD_CLIENT_ID="${{ secrets.DISCORD_CLIENT_ID }}" \
              -e DISCORD_CLIENT_SECRET="${{ secrets.DISCORD_CLIENT_SECRET }}" \
              -e DISCORD_AUTH_CALLBACK_URL="${{ secrets.DISCORD_AUTH_CALLBACK_URL }}" \
              -e KAKAO_CLIENT_ID="${{ secrets.KAKAO_CLIENT_ID }}" \
              -e KAKAO_CLIENT_SECRET="${{ secrets.KAKAO_CLIENT_SECRET }}" \
              -e KAKAO_AUTH_CALLBACK_URL="${{ secrets.KAKAO_AUTH_CALLBACK_URL }}" \
              -e AUTH_SUCCESS_URL="${{ secrets.AUTH_SUCCESS_URL }}" \
              -e CLIENT_ENDPOINT="${{ secrets.CLIENT_ENDPOINT }}" \
              --restart always \
              ${{ secrets.ECR_REGISTRY }}/loa-life:backend-api-latest

      - name: Run Database Migrations
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            docker exec backend-service npx prisma migrate deploy --schema=/app/prisma/schema.prisma
