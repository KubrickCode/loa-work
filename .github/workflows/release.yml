name: Deploy Services
on:
  push:
    branches: [release]
    paths: ["src/backend/**", "src/go/**", "src/frontend/**"]
  workflow_dispatch:

jobs:
  deploy-web-service:
    name: Build and Deploy Web Service
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Build Frontend
        env:
          VITE_GOOGLE_LOGIN_URL: ${{ secrets.VITE_GOOGLE_LOGIN_URL }}
          VITE_DISCORD_LOGIN_URL: ${{ secrets.VITE_DISCORD_LOGIN_URL }}
          VITE_KAKAO_LOGIN_URL: ${{ secrets.VITE_KAKAO_LOGIN_URL }}
          VITE_KAKAO_OPEN_TALK_URL: ${{ secrets.VITE_KAKAO_OPEN_TALK_URL }}
        run: |
          cd src/frontend
          yarn install
          yarn build
          mkdir -p ../backend/frontend-build
          cp -r build/* ../backend/frontend-build/
          ls -la ../backend/frontend-build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Create nginx config
        run: |
          cp infra/nginx/default.conf default.conf

      - name: Copy nginx config
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "default.conf"
          target: "/home/ubuntu"

      - name: Setup Nginx and SSL
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            if ! command -v nginx &> /dev/null; then
              sudo apt update
              sudo apt install -y nginx certbot python3-certbot-nginx
            fi

            sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/default.bak
            sudo cp /home/ubuntu/default.conf /etc/nginx/sites-available/default

            if [ ! -d "/etc/letsencrypt/live/loa-work.info" ]; then
              sudo certbot --nginx -d loa-work.info --non-interactive --agree-tos --email ${{ secrets.CERTBOT_EMAIL }}
            else
              sudo sed -i '/listen 443/,/^}/!b;/^}/!d;r /etc/nginx/sites-available/default.bak' /etc/nginx/sites-available/default
            fi

            sudo nginx -t && sudo systemctl reload nginx

      - name: Build and Push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          ls -la src/backend/frontend-build
          docker build \
            -t $ECR_REGISTRY/loa-work/web-service:$IMAGE_TAG ./src/backend
          docker push $ECR_REGISTRY/loa-work/web-service:$IMAGE_TAG
          docker tag $ECR_REGISTRY/loa-work/web-service:$IMAGE_TAG $ECR_REGISTRY/loa-work/web-service:latest
          docker push $ECR_REGISTRY/loa-work/web-service:latest

      - name: Setup EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Copy setup script
            cat > setup.sh << 'EOF'
            $(cat .github/scripts/setup-ec2.sh)
            EOF
            chmod +x setup.sh

            # Run setup script with AWS credentials
            ./setup.sh "${{ secrets.AWS_ACCESS_KEY_ID }}" "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
            rm setup.sh

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            docker system prune -af --volumes

            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}

            docker pull ${{ secrets.ECR_REGISTRY }}/loa-work/web-service:latest
            docker stop web-service || true
            docker rm web-service || true

            docker run -d \
              --name web-service \
              -p 3001:3001 \
              -e NODE_ENV=production \
              -e DATABASE_URL="${{ secrets.DATABASE_URL }}" \
              -e GOOGLE_CLIENT_ID="${{ secrets.GOOGLE_CLIENT_ID }}" \
              -e GOOGLE_CLIENT_SECRET="${{ secrets.GOOGLE_CLIENT_SECRET }}" \
              -e GOOGLE_AUTH_CALLBACK_URL="${{ secrets.GOOGLE_AUTH_CALLBACK_URL }}" \
              -e DISCORD_CLIENT_ID="${{ secrets.DISCORD_CLIENT_ID }}" \
              -e DISCORD_CLIENT_SECRET="${{ secrets.DISCORD_CLIENT_SECRET }}" \
              -e DISCORD_AUTH_CALLBACK_URL="${{ secrets.DISCORD_AUTH_CALLBACK_URL }}" \
              -e KAKAO_CLIENT_ID="${{ secrets.KAKAO_CLIENT_ID }}" \
              -e KAKAO_CLIENT_SECRET="${{ secrets.KAKAO_CLIENT_SECRET }}" \
              -e KAKAO_AUTH_CALLBACK_URL="${{ secrets.KAKAO_AUTH_CALLBACK_URL }}" \
              -e AUTH_SUCCESS_URL="${{ secrets.AUTH_SUCCESS_URL }}" \
              -e CLIENT_ENDPOINT="${{ secrets.CLIENT_ENDPOINT }}" \
              -e CLIENT_DOMAIN="${{ secrets.CLIENT_DOMAIN }}" \
              -e SESSION_SECRET="${{ secrets.SESSION_SECRET }}" \
              --restart always \
              ${{ secrets.ECR_REGISTRY }}/loa-work/web-service:latest

      - name: Run Database Migrations
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            docker system prune -af --volumes
            docker exec web-service npx prisma migrate deploy --schema=/app/prisma/schema.prisma

      # - name: Copy CloudWatch files
      #   uses: appleboy/scp-action@master
      #   with:
      #     host: ${{ secrets.EC2_HOST }}
      #     username: ubuntu
      #     key: ${{ secrets.EC2_SSH_KEY }}
      #     source: ".github/scripts/cloudwatch-config.json,.github/scripts/setup-cloudwatch.sh"
      #     target: "~"
      #     strip_components: 2

      # - name: Setup CloudWatch
      #   env:
      #     SERVICE_NAME: web-service
      #     CENTRAL_ACCOUNT_ID: ${{ secrets.CENTRAL_ACCOUNT_ID }}
      #   run: |
      #     echo "${{ secrets.EC2_SSH_KEY }}" > private_key && chmod 600 private_key
      #     scp -o StrictHostKeyChecking=no -i private_key .github/scripts/cloudwatch-config.json ubuntu@${{ secrets.EC2_HOST }}:~/cloudwatch-config.json
      #     scp -o StrictHostKeyChecking=no -i private_key .github/scripts/setup-cloudwatch.sh ubuntu@${{ secrets.EC2_HOST }}:~/setup-cloudwatch.sh
      #     ssh -o StrictHostKeyChecking=no -i private_key ubuntu@${{ secrets.EC2_HOST }} "chmod +x ~/setup-cloudwatch.sh && SERVICE_NAME=$SERVICE_NAME CENTRAL_ACCOUNT_ID=$CENTRAL_ACCOUNT_ID ~/setup-cloudwatch.sh"
      #     rm private_key

  deploy-go-services:
    strategy:
      matrix:
        include:
          - name: market-item-stat-scraper
            app-path: src/go/apps/market-item-stat-scraper
            host-secret: MISS_EC2_HOST
            ssh-key-secret: MISS_EC2_SSH_KEY
          - name: auction-item-stat-scraper
            app-path: src/go/apps/auction-item-stat-scraper
            host-secret: AISS_EC2_HOST
            ssh-key-secret: AISS_EC2_SSH_KEY
    name: Build and Deploy ${{ matrix.name }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials for ECR
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and Push Docker image
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build \
            --build-arg APP_PATH=${{ matrix.app-path }} \
            -t $ECR_REGISTRY/loa-work/${{ matrix.name }}:$IMAGE_TAG \
            -f src/go/Dockerfile .
          docker push $ECR_REGISTRY/loa-work/${{ matrix.name }}:$IMAGE_TAG
          docker tag $ECR_REGISTRY/loa-work/${{ matrix.name }}:$IMAGE_TAG $ECR_REGISTRY/loa-work/${{ matrix.name }}:latest
          docker push $ECR_REGISTRY/loa-work/${{ matrix.name }}:latest

      - name: Setup EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets[matrix.host-secret] }}
          username: ubuntu
          key: ${{ secrets[matrix.ssh-key-secret] }}
          script: |
            # Copy setup script
            cat > setup.sh << 'EOF'
            $(cat .github/scripts/setup-ec2.sh)
            EOF
            chmod +x setup.sh

            # Run setup script with AWS credentials
            ./setup.sh "${{ secrets.AWS_ACCESS_KEY_ID }}" "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
            rm setup.sh

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets[matrix.host-secret] }}
          username: ubuntu
          key: ${{ secrets[matrix.ssh-key-secret] }}
          script: |
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}
            docker pull ${{ secrets.ECR_REGISTRY }}/loa-work/${{ matrix.name }}:latest

            docker stop ${{ matrix.name }} || true
            docker rm ${{ matrix.name }} || true

            docker run -d \
              --name ${{ matrix.name }} \
              -e DATABASE_URL="${{ secrets.DATABASE_URL }}" \
              -e LOA_API_BASE_URL="${{ secrets.LOA_API_BASE_URL }}" \
              -e LOA_API_TOKEN="${{ secrets.LOA_API_TOKEN }}" \
              --restart always \
              ${{ secrets.ECR_REGISTRY }}/loa-work/${{ matrix.name }}:latest

      # - name: Copy CloudWatch files
      #   uses: appleboy/scp-action@master
      #   with:
      #     host: ${{ secrets[matrix.host-secret] }}
      #     username: ubuntu
      #     key: ${{ secrets[matrix.ssh-key-secret] }}
      #     source: ".github/scripts/cloudwatch-config.json,.github/scripts/setup-cloudwatch.sh"
      #     target: "~"
      #     strip_components: 2

      # - name: Setup CloudWatch
      #   env:
      #     SERVICE_NAME: ${{ matrix.name }}
      #     CENTRAL_ACCOUNT_ID: ${{ secrets.CENTRAL_ACCOUNT_ID }}
      #   run: |
      #     echo "${{ secrets[matrix.ssh-key-secret] }}" > private_key && chmod 600 private_key
      #     scp -o StrictHostKeyChecking=no -i private_key .github/scripts/cloudwatch-config.json ubuntu@${{ secrets[matrix.host-secret] }}:~/cloudwatch-config.json
      #     scp -o StrictHostKeyChecking=no -i private_key .github/scripts/setup-cloudwatch.sh ubuntu@${{ secrets[matrix.host-secret] }}:~/setup-cloudwatch.sh
      #     ssh -o StrictHostKeyChecking=no -i private_key ubuntu@${{ secrets[matrix.host-secret] }} "chmod +x ~/setup-cloudwatch.sh && SERVICE_NAME=$SERVICE_NAME CENTRAL_ACCOUNT_ID=$CENTRAL_ACCOUNT_ID ~/setup-cloudwatch.sh"
      #     rm private_key
